#pragma once
#include <map>
#include <string>
std::map<std::string, uint32_t> kGasCostTable = {
  {"<invalid>"                   , 0         },
  {"alloca"                      , 1         },
  {"atomic.notify"               , 1         },
  {"block"                       , 0         },
  {"br"                          , 90        },
  {"br_if"                       , 90        },
  {"br_on_exn"                   , 1         },
  {"br_table"                    , 120       },
  {"br_unless"                   , 1         },
  {"call"                        , 90        },
  {"call_host"                   , 1         },
  {"call_indirect"               , 10000     },
  {"catch"                       , 0         },
  {"catch_all"                   , 0         },
  {"data"                        , 1         },
  {"data.drop"                   , 1         },
  {"drop"                        , 120       },
  {"drop_keep"                   , 1         },
  {"elem.drop"                   , 1         },
  {"else"                        , 0         },
  {"end"                         , 0         },
  {"f32.abs"                     , 1         },
  {"f32.add"                     , 1         },
  {"f32.ceil"                    , 1         },
  {"f32.const"                   , 1         },
  {"f32.convert_i32_s"           , 1         },
  {"f32.convert_i32_u"           , 1         },
  {"f32.convert_i64_s"           , 1         },
  {"f32.convert_i64_u"           , 1         },
  {"f32.copysign"                , 1         },
  {"f32.demote_f64"              , 1         },
  {"f32.div"                     , 1         },
  {"f32.eq"                      , 45        },
  {"f32.floor"                   , 1         },
  {"f32.ge"                      , 45        },
  {"f32.gt"                      , 45        },
  {"f32.le"                      , 45        },
  {"f32.load"                    , 120       },
  {"f32.lt"                      , 45        },
  {"f32.max"                     , 1         },
  {"f32.min"                     , 1         },
  {"f32.mul"                     , 1         },
  {"f32.ne"                      , 45        },
  {"f32.nearest"                 , 1         },
  {"f32.neg"                     , 1         },
  {"f32.reinterpret_i32"         , 1         },
  {"f32.sqrt"                    , 1         },
  {"f32.store"                   , 120       },
  {"f32.sub"                     , 1         },
  {"f32.trunc"                   , 1         },
  {"f32x4.abs"                   , 1         },
  {"f32x4.add"                   , 1         },
  {"f32x4.convert_i32x4_s"       , 1         },
  {"f32x4.convert_i32x4_u"       , 1         },
  {"f32x4.div"                   , 1         },
  {"f32x4.eq"                    , 1         },
  {"f32x4.extract_lane"          , 1         },
  {"f32x4.ge"                    , 1         },
  {"f32x4.gt"                    , 1         },
  {"f32x4.le"                    , 1         },
  {"f32x4.lt"                    , 1         },
  {"f32x4.max"                   , 1         },
  {"f32x4.min"                   , 1         },
  {"f32x4.mul"                   , 1         },
  {"f32x4.ne"                    , 1         },
  {"f32x4.neg"                   , 1         },
  {"f32x4.replace_lane"          , 1         },
  {"f32x4.splat"                 , 1         },
  {"f32x4.sqrt"                  , 1         },
  {"f32x4.sub"                   , 1         },
  {"f64.abs"                     , 1         },
  {"f64.add"                     , 1         },
  {"f64.ceil"                    , 1         },
  {"f64.const"                   , 1         },
  {"f64.convert_i32_s"           , 1         },
  {"f64.convert_i32_u"           , 1         },
  {"f64.convert_i64_s"           , 1         },
  {"f64.convert_i64_u"           , 1         },
  {"f64.copysign"                , 1         },
  {"f64.div"                     , 1         },
  {"f64.eq"                      , 45        },
  {"f64.floor"                   , 1         },
  {"f64.ge"                      , 45        },
  {"f64.gt"                      , 45        },
  {"f64.le"                      , 45        },
  {"f64.load"                    , 120       },
  {"f64.lt"                      , 45        },
  {"f64.max"                     , 1         },
  {"f64.min"                     , 1         },
  {"f64.mul"                     , 1         },
  {"f64.ne"                      , 45        },
  {"f64.nearest"                 , 1         },
  {"f64.neg"                     , 1         },
  {"f64.promote_f32"             , 1         },
  {"f64.reinterpret_i64"         , 1         },
  {"f64.sqrt"                    , 1         },
  {"f64.store"                   , 120       },
  {"f64.sub"                     , 1         },
  {"f64.trunc"                   , 1         },
  {"f64x2.abs"                   , 1         },
  {"f64x2.add"                   , 1         },
  {"f64x2.convert_i64x2_s"       , 1         },
  {"f64x2.convert_i64x2_u"       , 1         },
  {"f64x2.div"                   , 1         },
  {"f64x2.eq"                    , 1         },
  {"f64x2.extract_lane"          , 1         },
  {"f64x2.ge"                    , 1         },
  {"f64x2.gt"                    , 1         },
  {"f64x2.le"                    , 1         },
  {"f64x2.lt"                    , 1         },
  {"f64x2.max"                   , 1         },
  {"f64x2.min"                   , 1         },
  {"f64x2.mul"                   , 1         },
  {"f64x2.ne"                    , 1         },
  {"f64x2.neg"                   , 1         },
  {"f64x2.replace_lane"          , 1         },
  {"f64x2.splat"                 , 1         },
  {"f64x2.sqrt"                  , 1         },
  {"f64x2.sub"                   , 1         },
  {"global.get"                  , 120       },
  {"global.set"                  , 120       },
  {"i16x8.add"                   , 1         },
  {"i16x8.add_saturate_s"        , 1         },
  {"i16x8.add_saturate_u"        , 1         },
  {"i16x8.all_true"              , 1         },
  {"i16x8.any_true"              , 1         },
  {"i16x8.eq"                    , 1         },
  {"i16x8.extract_lane_s"        , 1         },
  {"i16x8.extract_lane_u"        , 1         },
  {"i16x8.ge_s"                  , 1         },
  {"i16x8.ge_u"                  , 1         },
  {"i16x8.gt_s"                  , 1         },
  {"i16x8.gt_u"                  , 1         },
  {"i16x8.le_s"                  , 1         },
  {"i16x8.le_u"                  , 1         },
  {"i16x8.lt_s"                  , 1         },
  {"i16x8.lt_u"                  , 1         },
  {"i16x8.mul"                   , 1         },
  {"i16x8.ne"                    , 1         },
  {"i16x8.neg"                   , 1         },
  {"i16x8.replace_lane"          , 1         },
  {"i16x8.shl"                   , 1         },
  {"i16x8.shr_s"                 , 1         },
  {"i16x8.shr_u"                 , 1         },
  {"i16x8.splat"                 , 1         },
  {"i16x8.sub"                   , 1         },
  {"i16x8.sub_saturate_s"        , 1         },
  {"i16x8.sub_saturate_u"        , 1         },
  {"i32.add"                     , 45        },
  {"i32.and"                     , 45        },
  {"i32.atomic.load"             , 1         },
  {"i32.atomic.load16_u"         , 1         },
  {"i32.atomic.load8_u"          , 1         },
  {"i32.atomic.rmw.add"          , 1         },
  {"i32.atomic.rmw.and"          , 1         },
  {"i32.atomic.rmw.cmpxchg"      , 1         },
  {"i32.atomic.rmw.or"           , 1         },
  {"i32.atomic.rmw.sub"          , 1         },
  {"i32.atomic.rmw.xchg"         , 1         },
  {"i32.atomic.rmw.xor"          , 1         },
  {"i32.atomic.rmw16.add_u"      , 1         },
  {"i32.atomic.rmw16.and_u"      , 1         },
  {"i32.atomic.rmw16.cmpxchg_u"  , 1         },
  {"i32.atomic.rmw16.or_u"       , 1         },
  {"i32.atomic.rmw16.sub_u"      , 1         },
  {"i32.atomic.rmw16.xchg_u"     , 1         },
  {"i32.atomic.rmw16.xor_u"      , 1         },
  {"i32.atomic.rmw8.add_u"       , 1         },
  {"i32.atomic.rmw8.and_u"       , 1         },
  {"i32.atomic.rmw8.cmpxchg_u"   , 1         },
  {"i32.atomic.rmw8.or_u"        , 1         },
  {"i32.atomic.rmw8.sub_u"       , 1         },
  {"i32.atomic.rmw8.xchg_u"      , 1         },
  {"i32.atomic.rmw8.xor_u"       , 1         },
  {"i32.atomic.store"            , 1         },
  {"i32.atomic.store16"          , 1         },
  {"i32.atomic.store8"           , 1         },
  {"i32.atomic.wait"             , 1         },
  {"i32.clz"                     , 45        },
  {"i32.const"                   , 1         },
  {"i32.ctz"                     , 45        },
  {"i32.div_s"                   , 36000     },
  {"i32.div_u"                   , 36000     },
  {"i32.eq"                      , 45        },
  {"i32.eqz"                     , 45        },
  {"i32.extend16_s"              , 1         },
  {"i32.extend8_s"               , 1         },
  {"i32.ge_s"                    , 45        },
  {"i32.ge_u"                    , 45        },
  {"i32.gt_s"                    , 45        },
  {"i32.gt_u"                    , 45        },
  {"i32.le_s"                    , 45        },
  {"i32.le_u"                    , 45        },
  {"i32.load"                    , 120       },
  {"i32.load16_s"                , 120       },
  {"i32.load16_u"                , 120       },
  {"i32.load8_s"                 , 120       },
  {"i32.load8_u"                 , 120       },
  {"i32.lt_s"                    , 45        },
  {"i32.lt_u"                    , 45        },
  {"i32.mul"                     , 45        },
  {"i32.ne"                      , 45        },
  {"i32.or"                      , 45        },
  {"i32.popcnt"                  , 45        },
  {"i32.reinterpret_f32"         , 1         },
  {"i32.rem_s"                   , 36000     },
  {"i32.rem_u"                   , 36000     },
  {"i32.rotl"                    , 90        },
  {"i32.rotr"                    , 90        },
  {"i32.shl"                     , 67        },
  {"i32.shr_s"                   , 67        },
  {"i32.shr_u"                   , 67        },
  {"i32.store"                   , 120       },
  {"i32.store16"                 , 120       },
  {"i32.store8"                  , 120       },
  {"i32.sub"                     , 45        },
  {"i32.trunc_f32_s"             , 1         },
  {"i32.trunc_f32_u"             , 1         },
  {"i32.trunc_f64_s"             , 1         },
  {"i32.trunc_f64_u"             , 1         },
  {"i32.trunc_sat_f32_s"         , 1         },
  {"i32.trunc_sat_f32_u"         , 1         },
  {"i32.trunc_sat_f64_s"         , 1         },
  {"i32.trunc_sat_f64_u"         , 1         },
  {"i32.wrap_i64"                , 1         },
  {"i32.xor"                     , 45        },
  {"i32x4.add"                   , 1         },
  {"i32x4.all_true"              , 1         },
  {"i32x4.any_true"              , 1         },
  {"i32x4.eq"                    , 1         },
  {"i32x4.extract_lane"          , 1         },
  {"i32x4.ge_s"                  , 1         },
  {"i32x4.ge_u"                  , 1         },
  {"i32x4.gt_s"                  , 1         },
  {"i32x4.gt_u"                  , 1         },
  {"i32x4.le_s"                  , 1         },
  {"i32x4.le_u"                  , 1         },
  {"i32x4.lt_s"                  , 1         },
  {"i32x4.lt_u"                  , 1         },
  {"i32x4.mul"                   , 1         },
  {"i32x4.ne"                    , 1         },
  {"i32x4.neg"                   , 1         },
  {"i32x4.replace_lane"          , 1         },
  {"i32x4.shl"                   , 1         },
  {"i32x4.shr_s"                 , 1         },
  {"i32x4.shr_u"                 , 1         },
  {"i32x4.splat"                 , 1         },
  {"i32x4.sub"                   , 1         },
  {"i32x4.trunc_sat_f32x4_s"     , 1         },
  {"i32x4.trunc_sat_f32x4_u"     , 1         },
  {"i64.add"                     , 45        },
  {"i64.and"                     , 45        },
  {"i64.atomic.load"             , 1         },
  {"i64.atomic.load16_u"         , 1         },
  {"i64.atomic.load32_u"         , 1         },
  {"i64.atomic.load8_u"          , 1         },
  {"i64.atomic.rmw.add"          , 1         },
  {"i64.atomic.rmw.and"          , 1         },
  {"i64.atomic.rmw.cmpxchg"      , 1         },
  {"i64.atomic.rmw.or"           , 1         },
  {"i64.atomic.rmw.sub"          , 1         },
  {"i64.atomic.rmw.xchg"         , 1         },
  {"i64.atomic.rmw.xor"          , 1         },
  {"i64.atomic.rmw16.add_u"      , 1         },
  {"i64.atomic.rmw16.and_u"      , 1         },
  {"i64.atomic.rmw16.cmpxchg_u"  , 1         },
  {"i64.atomic.rmw16.or_u"       , 1         },
  {"i64.atomic.rmw16.sub_u"      , 1         },
  {"i64.atomic.rmw16.xchg_u"     , 1         },
  {"i64.atomic.rmw16.xor_u"      , 1         },
  {"i64.atomic.rmw32.add_u"      , 1         },
  {"i64.atomic.rmw32.and_u"      , 1         },
  {"i64.atomic.rmw32.cmpxchg_u"  , 1         },
  {"i64.atomic.rmw32.or_u"       , 1         },
  {"i64.atomic.rmw32.sub_u"      , 1         },
  {"i64.atomic.rmw32.xchg_u"     , 1         },
  {"i64.atomic.rmw32.xor_u"      , 1         },
  {"i64.atomic.rmw8.add_u"       , 1         },
  {"i64.atomic.rmw8.and_u"       , 1         },
  {"i64.atomic.rmw8.cmpxchg_u"   , 1         },
  {"i64.atomic.rmw8.or_u"        , 1         },
  {"i64.atomic.rmw8.sub_u"       , 1         },
  {"i64.atomic.rmw8.xchg_u"      , 1         },
  {"i64.atomic.rmw8.xor_u"       , 1         },
  {"i64.atomic.store"            , 1         },
  {"i64.atomic.store16"          , 1         },
  {"i64.atomic.store32"          , 1         },
  {"i64.atomic.store8"           , 1         },
  {"i64.atomic.wait"             , 1         },
  {"i64.clz"                     , 45        },
  {"i64.const"                   , 1         },
  {"i64.ctz"                     , 45        },
  {"i64.div_s"                   , 36000     },
  {"i64.div_u"                   , 36000     },
  {"i64.eq"                      , 45        },
  {"i64.eqz"                     , 45        },
  {"i64.extend16_s"              , 1         },
  {"i64.extend32_s"              , 1         },
  {"i64.extend8_s"               , 1         },
  {"i64.extend_i32_s"            , 1         },
  {"i64.extend_i32_u"            , 1         },
  {"i64.ge_s"                    , 45        },
  {"i64.ge_u"                    , 45        },
  {"i64.gt_s"                    , 45        },
  {"i64.gt_u"                    , 45        },
  {"i64.le_s"                    , 45        },
  {"i64.le_u"                    , 45        },
  {"i64.load"                    , 120       },
  {"i64.load16_s"                , 120       },
  {"i64.load16_u"                , 120       },
  {"i64.load32_s"                , 120       },
  {"i64.load32_u"                , 120       },
  {"i64.load8_s"                 , 120       },
  {"i64.load8_u"                 , 120       },
  {"i64.lt_s"                    , 45        },
  {"i64.lt_u"                    , 45        },
  {"i64.mul"                     , 36000     },
  {"i64.ne"                      , 45        },
  {"i64.or"                      , 45        },
  {"i64.popcnt"                  , 45        },
  {"i64.reinterpret_f64"         , 1         },
  {"i64.rem_s"                   , 36000     },
  {"i64.rem_u"                   , 36000     },
  {"i64.rotl"                    , 90        },
  {"i64.rotr"                    , 90        },
  {"i64.shl"                     , 67        },
  {"i64.shr_s"                   , 67        },
  {"i64.shr_u"                   , 67        },
  {"i64.store"                   , 120       },
  {"i64.store16"                 , 120       },
  {"i64.store32"                 , 120       },
  {"i64.store8"                  , 120       },
  {"i64.sub"                     , 45        },
  {"i64.trunc_f32_s"             , 1         },
  {"i64.trunc_f32_u"             , 1         },
  {"i64.trunc_f64_s"             , 1         },
  {"i64.trunc_f64_u"             , 1         },
  {"i64.trunc_sat_f32_s"         , 1         },
  {"i64.trunc_sat_f32_u"         , 1         },
  {"i64.trunc_sat_f64_s"         , 1         },
  {"i64.trunc_sat_f64_u"         , 1         },
  {"i64.xor"                     , 45        },
  {"i64x2.add"                   , 1         },
  {"i64x2.all_true"              , 1         },
  {"i64x2.any_true"              , 1         },
  {"i64x2.extract_lane"          , 1         },
  {"i64x2.neg"                   , 1         },
  {"i64x2.replace_lane"          , 1         },
  {"i64x2.shl"                   , 1         },
  {"i64x2.shr_s"                 , 1         },
  {"i64x2.shr_u"                 , 1         },
  {"i64x2.splat"                 , 1         },
  {"i64x2.sub"                   , 1         },
  {"i64x2.trunc_sat_f64x2_s"     , 1         },
  {"i64x2.trunc_sat_f64x2_u"     , 1         },
  {"i8x16.add"                   , 1         },
  {"i8x16.add_saturate_s"        , 1         },
  {"i8x16.add_saturate_u"        , 1         },
  {"i8x16.all_true"              , 1         },
  {"i8x16.any_true"              , 1         },
  {"i8x16.eq"                    , 1         },
  {"i8x16.extract_lane_s"        , 1         },
  {"i8x16.extract_lane_u"        , 1         },
  {"i8x16.ge_s"                  , 1         },
  {"i8x16.ge_u"                  , 1         },
  {"i8x16.gt_s"                  , 1         },
  {"i8x16.gt_u"                  , 1         },
  {"i8x16.le_s"                  , 1         },
  {"i8x16.le_u"                  , 1         },
  {"i8x16.lt_s"                  , 1         },
  {"i8x16.lt_u"                  , 1         },
  {"i8x16.mul"                   , 1         },
  {"i8x16.ne"                    , 1         },
  {"i8x16.neg"                   , 1         },
  {"i8x16.replace_lane"          , 1         },
  {"i8x16.shl"                   , 1         },
  {"i8x16.shr_s"                 , 1         },
  {"i8x16.shr_u"                 , 1         },
  {"i8x16.splat"                 , 1         },
  {"i8x16.sub"                   , 1         },
  {"i8x16.sub_saturate_s"        , 1         },
  {"i8x16.sub_saturate_u"        , 1         },
  {"if"                          , 0         },
  {"local.get"                   , 120       },
  {"local.set"                   , 120       },
  {"local.tee"                   , 120       },
  {"loop"                        , 1         },
  {"memory.copy"                 , 1         },
  {"memory.fill"                 , 1         },
  {"memory.grow"                 , 10000     },
  {"memory.init"                 , 1         },
  {"memory.size"                 , 120       },
  {"nop"                         , 1         },
  {"ref.is_null"                 , 1         },
  {"ref.null"                    , 1         },
  {"ref.func"                    , 1         },
  {"rethrow"                     , 0         },
  {"return"                      , 90        },
  {"return_call"                 , 0         },
  {"return_call_indirect"        , 0         },
  {"select"                      , 120       },
  {"table.copy"                  , 1         },
  {"table.get"                   , 120       },
  {"table.grow"                  , 120       },
  {"table.init"                  , 1         },
  {"table.set"                   , 120       },
  {"table.size"                  , 120       },
  {"table.fill"                  , 120       },
  {"throw"                       , 0         },
  {"try"                         , 0         },
  {"unreachable"                 , 1         },
  {"v128.and"                    , 1         },
  {"v128.bitselect"              , 1         },
  {"v128.const"                  , 1         },
  {"v128.load"                   , 1         },
  {"v128.not"                    , 1         },
  {"v128.or"                     , 1         },
  {"v128.store"                  , 1         },
  {"v128.xor"                    , 1         },
  {"v8x16.shuffle"               , 1         },
  {"v8x16.shuffle1"              , 1         },
  {"v8x16.shuffle2_imm"          , 1         },
};
