// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xchain.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type XChainErrorEnum int32

const (
	XChainErrorEnum_SUCCESS                        XChainErrorEnum = 0
	XChainErrorEnum_UNKNOW_ERROR                   XChainErrorEnum = 1
	XChainErrorEnum_CONNECT_REFUSE                 XChainErrorEnum = 2
	XChainErrorEnum_NOT_ENOUGH_UTXO_ERROR          XChainErrorEnum = 3
	XChainErrorEnum_UTXOVM_ALREADY_UNCONFIRM_ERROR XChainErrorEnum = 4
	XChainErrorEnum_UTXOVM_NOT_FOUND_ERROR         XChainErrorEnum = 5
	XChainErrorEnum_INPUT_OUTPUT_NOT_EQUAL_ERROR   XChainErrorEnum = 6
	XChainErrorEnum_TX_NOT_FOUND_ERROR             XChainErrorEnum = 7
	XChainErrorEnum_TX_SIGN_ERROR                  XChainErrorEnum = 8
	XChainErrorEnum_BLOCKCHAIN_NOTEXIST            XChainErrorEnum = 9
	XChainErrorEnum_VALIDATE_ERROR                 XChainErrorEnum = 10
	XChainErrorEnum_CANNOT_SYNC_BLOCK_ERROR        XChainErrorEnum = 11
	XChainErrorEnum_CONFIRM_BLOCK_ERROR            XChainErrorEnum = 12
	XChainErrorEnum_UTXOVM_PLAY_ERROR              XChainErrorEnum = 13
	XChainErrorEnum_WALK_ERROR                     XChainErrorEnum = 14
	XChainErrorEnum_NOT_READY_ERROR                XChainErrorEnum = 15
	XChainErrorEnum_BLOCK_EXIST_ERROR              XChainErrorEnum = 16
	XChainErrorEnum_ROOT_BLOCK_EXIST_ERROR         XChainErrorEnum = 17
	XChainErrorEnum_TX_DUPLICATE_ERROR             XChainErrorEnum = 19
	XChainErrorEnum_SERVICE_REFUSED_ERROR          XChainErrorEnum = 20
	XChainErrorEnum_TXDATA_SIGN_ERROR              XChainErrorEnum = 21
	XChainErrorEnum_TX_SLE_ERROR                   XChainErrorEnum = 25
	XChainErrorEnum_TX_FEE_NOT_ENOUGH_ERROR        XChainErrorEnum = 26
	XChainErrorEnum_UTXO_SIGN_ERROR                XChainErrorEnum = 28
	XChainErrorEnum_DPOS_QUERY_ERROR               XChainErrorEnum = 31
	XChainErrorEnum_RWSET_INVALID_ERROR            XChainErrorEnum = 33
	XChainErrorEnum_RWACL_INVALID_ERROR            XChainErrorEnum = 34
	XChainErrorEnum_GAS_NOT_ENOUGH_ERROR           XChainErrorEnum = 35
	XChainErrorEnum_TX_VERSION_INVALID_ERROR       XChainErrorEnum = 36
)

var XChainErrorEnum_name = map[int32]string{
	0:  "SUCCESS",
	1:  "UNKNOW_ERROR",
	2:  "CONNECT_REFUSE",
	3:  "NOT_ENOUGH_UTXO_ERROR",
	4:  "UTXOVM_ALREADY_UNCONFIRM_ERROR",
	5:  "UTXOVM_NOT_FOUND_ERROR",
	6:  "INPUT_OUTPUT_NOT_EQUAL_ERROR",
	7:  "TX_NOT_FOUND_ERROR",
	8:  "TX_SIGN_ERROR",
	9:  "BLOCKCHAIN_NOTEXIST",
	10: "VALIDATE_ERROR",
	11: "CANNOT_SYNC_BLOCK_ERROR",
	12: "CONFIRM_BLOCK_ERROR",
	13: "UTXOVM_PLAY_ERROR",
	14: "WALK_ERROR",
	15: "NOT_READY_ERROR",
	16: "BLOCK_EXIST_ERROR",
	17: "ROOT_BLOCK_EXIST_ERROR",
	19: "TX_DUPLICATE_ERROR",
	20: "SERVICE_REFUSED_ERROR",
	21: "TXDATA_SIGN_ERROR",
	25: "TX_SLE_ERROR",
	26: "TX_FEE_NOT_ENOUGH_ERROR",
	28: "UTXO_SIGN_ERROR",
	31: "DPOS_QUERY_ERROR",
	33: "RWSET_INVALID_ERROR",
	34: "RWACL_INVALID_ERROR",
	35: "GAS_NOT_ENOUGH_ERROR",
	36: "TX_VERSION_INVALID_ERROR",
}
var XChainErrorEnum_value = map[string]int32{
	"SUCCESS":                        0,
	"UNKNOW_ERROR":                   1,
	"CONNECT_REFUSE":                 2,
	"NOT_ENOUGH_UTXO_ERROR":          3,
	"UTXOVM_ALREADY_UNCONFIRM_ERROR": 4,
	"UTXOVM_NOT_FOUND_ERROR":         5,
	"INPUT_OUTPUT_NOT_EQUAL_ERROR":   6,
	"TX_NOT_FOUND_ERROR":             7,
	"TX_SIGN_ERROR":                  8,
	"BLOCKCHAIN_NOTEXIST":            9,
	"VALIDATE_ERROR":                 10,
	"CANNOT_SYNC_BLOCK_ERROR":        11,
	"CONFIRM_BLOCK_ERROR":            12,
	"UTXOVM_PLAY_ERROR":              13,
	"WALK_ERROR":                     14,
	"NOT_READY_ERROR":                15,
	"BLOCK_EXIST_ERROR":              16,
	"ROOT_BLOCK_EXIST_ERROR":         17,
	"TX_DUPLICATE_ERROR":             19,
	"SERVICE_REFUSED_ERROR":          20,
	"TXDATA_SIGN_ERROR":              21,
	"TX_SLE_ERROR":                   25,
	"TX_FEE_NOT_ENOUGH_ERROR":        26,
	"UTXO_SIGN_ERROR":                28,
	"DPOS_QUERY_ERROR":               31,
	"RWSET_INVALID_ERROR":            33,
	"RWACL_INVALID_ERROR":            34,
	"GAS_NOT_ENOUGH_ERROR":           35,
	"TX_VERSION_INVALID_ERROR":       36,
}

func (x XChainErrorEnum) String() string {
	return proto.EnumName(XChainErrorEnum_name, int32(x))
}
func (XChainErrorEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{0}
}

// TransactionStatus is the status of transaction
type TransactionStatus int32

const (
	// Undefined status
	TransactionStatus_UNDEFINE TransactionStatus = 0
	// Transaction not exist
	TransactionStatus_NOEXIST TransactionStatus = 1
	// Transaction have been confirmed
	TransactionStatus_CONFIRM TransactionStatus = 2
	// Transaction is on the furcation
	TransactionStatus_FURCATION TransactionStatus = 3
	// Transaction have not been confirmed
	TransactionStatus_UNCONFIRM TransactionStatus = 4
)

var TransactionStatus_name = map[int32]string{
	0: "UNDEFINE",
	1: "NOEXIST",
	2: "CONFIRM",
	3: "FURCATION",
	4: "UNCONFIRM",
}
var TransactionStatus_value = map[string]int32{
	"UNDEFINE":  0,
	"NOEXIST":   1,
	"CONFIRM":   2,
	"FURCATION": 3,
	"UNCONFIRM": 4,
}

func (x TransactionStatus) String() string {
	return proto.EnumName(TransactionStatus_name, int32(x))
}
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{1}
}

// --------   Account and Permission Section --------
type PermissionRule int32

const (
	PermissionRule_NULL           PermissionRule = 0
	PermissionRule_SIGN_THRESHOLD PermissionRule = 1
	PermissionRule_SIGN_AKSET     PermissionRule = 2
	PermissionRule_SIGN_RATE      PermissionRule = 3
	PermissionRule_SIGN_SUM       PermissionRule = 4
	PermissionRule_CA_SERVER      PermissionRule = 5
	PermissionRule_COMMUNITY_VOTE PermissionRule = 6
)

var PermissionRule_name = map[int32]string{
	0: "NULL",
	1: "SIGN_THRESHOLD",
	2: "SIGN_AKSET",
	3: "SIGN_RATE",
	4: "SIGN_SUM",
	5: "CA_SERVER",
	6: "COMMUNITY_VOTE",
}
var PermissionRule_value = map[string]int32{
	"NULL":           0,
	"SIGN_THRESHOLD": 1,
	"SIGN_AKSET":     2,
	"SIGN_RATE":      3,
	"SIGN_SUM":       4,
	"CA_SERVER":      5,
	"COMMUNITY_VOTE": 6,
}

func (x PermissionRule) String() string {
	return proto.EnumName(PermissionRule_name, int32(x))
}
func (PermissionRule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{2}
}

type Block_EBlockStatus int32

const (
	Block_ERROR   Block_EBlockStatus = 0
	Block_TRUNK   Block_EBlockStatus = 1
	Block_BRANCH  Block_EBlockStatus = 2
	Block_NOEXIST Block_EBlockStatus = 3
)

var Block_EBlockStatus_name = map[int32]string{
	0: "ERROR",
	1: "TRUNK",
	2: "BRANCH",
	3: "NOEXIST",
}
var Block_EBlockStatus_value = map[string]int32{
	"ERROR":   0,
	"TRUNK":   1,
	"BRANCH":  2,
	"NOEXIST": 3,
}

func (x Block_EBlockStatus) String() string {
	return proto.EnumName(Block_EBlockStatus_name, int32(x))
}
func (Block_EBlockStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{5, 0}
}

type Header struct {
	Logid                string          `protobuf:"bytes,1,opt,name=logid,proto3" json:"logid,omitempty"`
	FromNode             string          `protobuf:"bytes,2,opt,name=from_node,json=fromNode,proto3" json:"from_node,omitempty"`
	Error                XChainErrorEnum `protobuf:"varint,3,opt,name=error,proto3,enum=pb.XChainErrorEnum" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetLogid() string {
	if m != nil {
		return m.Logid
	}
	return ""
}

func (m *Header) GetFromNode() string {
	if m != nil {
		return m.FromNode
	}
	return ""
}

func (m *Header) GetError() XChainErrorEnum {
	if m != nil {
		return m.Error
	}
	return XChainErrorEnum_SUCCESS
}

type TxDataAccount struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount               string   `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FrozenHeight         int64    `protobuf:"varint,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxDataAccount) Reset()         { *m = TxDataAccount{} }
func (m *TxDataAccount) String() string { return proto.CompactTextString(m) }
func (*TxDataAccount) ProtoMessage()    {}
func (*TxDataAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{1}
}
func (m *TxDataAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxDataAccount.Unmarshal(m, b)
}
func (m *TxDataAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxDataAccount.Marshal(b, m, deterministic)
}
func (dst *TxDataAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxDataAccount.Merge(dst, src)
}
func (m *TxDataAccount) XXX_Size() int {
	return xxx_messageInfo_TxDataAccount.Size(m)
}
func (m *TxDataAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_TxDataAccount.DiscardUnknown(m)
}

var xxx_messageInfo_TxDataAccount proto.InternalMessageInfo

func (m *TxDataAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TxDataAccount) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TxDataAccount) GetFrozenHeight() int64 {
	if m != nil {
		return m.FrozenHeight
	}
	return 0
}

type TxData struct {
	Header *Header `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	// Transaction id
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// Block name
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// Account which start the transaction
	FromAddr string `protobuf:"bytes,3,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	// The pk of the account which start the transaction
	FromPubkey string `protobuf:"bytes,4,opt,name=from_pubkey,json=fromPubkey,proto3" json:"from_pubkey,omitempty"`
	// The sk of the account which start the transaction
	FromScrkey string `protobuf:"bytes,5,opt,name=from_scrkey,json=fromScrkey,proto3" json:"from_scrkey,omitempty"`
	// if user don't want to provide scrkey, he should sign the txdata into user_sign
	UserSign []byte `protobuf:"bytes,14,opt,name=user_sign,json=userSign,proto3" json:"user_sign,omitempty"`
	// The account list accept tx
	Account []*TxDataAccount `protobuf:"bytes,6,rep,name=account,proto3" json:"account,omitempty"`
	// Random number used to avoid replay attacks
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp to launch the Tx
	Timestamp int64  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Desc      []byte `protobuf:"bytes,12,opt,name=desc,proto3" json:"desc,omitempty"`
	// tx version
	Version              int32    `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxData) Reset()         { *m = TxData{} }
func (m *TxData) String() string { return proto.CompactTextString(m) }
func (*TxData) ProtoMessage()    {}
func (*TxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{2}
}
func (m *TxData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxData.Unmarshal(m, b)
}
func (m *TxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxData.Marshal(b, m, deterministic)
}
func (dst *TxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxData.Merge(dst, src)
}
func (m *TxData) XXX_Size() int {
	return xxx_messageInfo_TxData.Size(m)
}
func (m *TxData) XXX_DiscardUnknown() {
	xxx_messageInfo_TxData.DiscardUnknown(m)
}

var xxx_messageInfo_TxData proto.InternalMessageInfo

func (m *TxData) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TxData) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *TxData) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *TxData) GetFromAddr() string {
	if m != nil {
		return m.FromAddr
	}
	return ""
}

func (m *TxData) GetFromPubkey() string {
	if m != nil {
		return m.FromPubkey
	}
	return ""
}

func (m *TxData) GetFromScrkey() string {
	if m != nil {
		return m.FromScrkey
	}
	return ""
}

func (m *TxData) GetUserSign() []byte {
	if m != nil {
		return m.UserSign
	}
	return nil
}

func (m *TxData) GetAccount() []*TxDataAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TxData) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *TxData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TxData) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *TxData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type TxStatus struct {
	Header               *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string            `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Txid                 []byte            `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Status               TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.TransactionStatus" json:"status,omitempty"`
	Distance             int64             `protobuf:"varint,5,opt,name=distance,proto3" json:"distance,omitempty"`
	Tx                   *Transaction      `protobuf:"bytes,7,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TxStatus) Reset()         { *m = TxStatus{} }
func (m *TxStatus) String() string { return proto.CompactTextString(m) }
func (*TxStatus) ProtoMessage()    {}
func (*TxStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{3}
}
func (m *TxStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxStatus.Unmarshal(m, b)
}
func (m *TxStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxStatus.Marshal(b, m, deterministic)
}
func (dst *TxStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxStatus.Merge(dst, src)
}
func (m *TxStatus) XXX_Size() int {
	return xxx_messageInfo_TxStatus.Size(m)
}
func (m *TxStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TxStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TxStatus proto.InternalMessageInfo

func (m *TxStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TxStatus) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *TxStatus) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *TxStatus) GetStatus() TransactionStatus {
	if m != nil {
		return m.Status
	}
	return TransactionStatus_UNDEFINE
}

func (m *TxStatus) GetDistance() int64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *TxStatus) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type BatchTxs struct {
	Header               *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Txs                  []*TxStatus `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BatchTxs) Reset()         { *m = BatchTxs{} }
func (m *BatchTxs) String() string { return proto.CompactTextString(m) }
func (*BatchTxs) ProtoMessage()    {}
func (*BatchTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{4}
}
func (m *BatchTxs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchTxs.Unmarshal(m, b)
}
func (m *BatchTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchTxs.Marshal(b, m, deterministic)
}
func (dst *BatchTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxs.Merge(dst, src)
}
func (m *BatchTxs) XXX_Size() int {
	return xxx_messageInfo_BatchTxs.Size(m)
}
func (m *BatchTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxs.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxs proto.InternalMessageInfo

func (m *BatchTxs) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BatchTxs) GetTxs() []*TxStatus {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Block struct {
	Header               *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string             `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Blockid              []byte             `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	Status               Block_EBlockStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.Block_EBlockStatus" json:"status,omitempty"`
	Block                *InternalBlock     `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{5}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *Block) GetBlockid() []byte {
	if m != nil {
		return m.Blockid
	}
	return nil
}

func (m *Block) GetStatus() Block_EBlockStatus {
	if m != nil {
		return m.Status
	}
	return Block_ERROR
}

func (m *Block) GetBlock() *InternalBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

type BlockID struct {
	Header  *Header `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Blockid []byte  `protobuf:"bytes,2,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// if need content
	NeedContent          bool     `protobuf:"varint,3,opt,name=need_content,json=needContent,proto3" json:"need_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockID) Reset()         { *m = BlockID{} }
func (m *BlockID) String() string { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()    {}
func (*BlockID) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{6}
}
func (m *BlockID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockID.Unmarshal(m, b)
}
func (m *BlockID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockID.Marshal(b, m, deterministic)
}
func (dst *BlockID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockID.Merge(dst, src)
}
func (m *BlockID) XXX_Size() int {
	return xxx_messageInfo_BlockID.Size(m)
}
func (m *BlockID) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockID.DiscardUnknown(m)
}

var xxx_messageInfo_BlockID proto.InternalMessageInfo

func (m *BlockID) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockID) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *BlockID) GetBlockid() []byte {
	if m != nil {
		return m.Blockid
	}
	return nil
}

func (m *BlockID) GetNeedContent() bool {
	if m != nil {
		return m.NeedContent
	}
	return false
}

type CommonReply struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonReply) Reset()         { *m = CommonReply{} }
func (m *CommonReply) String() string { return proto.CompactTextString(m) }
func (*CommonReply) ProtoMessage()    {}
func (*CommonReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{7}
}
func (m *CommonReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonReply.Unmarshal(m, b)
}
func (m *CommonReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonReply.Marshal(b, m, deterministic)
}
func (dst *CommonReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonReply.Merge(dst, src)
}
func (m *CommonReply) XXX_Size() int {
	return xxx_messageInfo_CommonReply.Size(m)
}
func (m *CommonReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommonReply proto.InternalMessageInfo

func (m *CommonReply) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CommonIn struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonIn) Reset()         { *m = CommonIn{} }
func (m *CommonIn) String() string { return proto.CompactTextString(m) }
func (*CommonIn) ProtoMessage()    {}
func (*CommonIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{8}
}
func (m *CommonIn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonIn.Unmarshal(m, b)
}
func (m *CommonIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonIn.Marshal(b, m, deterministic)
}
func (dst *CommonIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonIn.Merge(dst, src)
}
func (m *CommonIn) XXX_Size() int {
	return xxx_messageInfo_CommonIn.Size(m)
}
func (m *CommonIn) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonIn.DiscardUnknown(m)
}

var xxx_messageInfo_CommonIn proto.InternalMessageInfo

func (m *CommonIn) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type TokenDetail struct {
	Bcname               string          `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Balance              string          `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Error                XChainErrorEnum `protobuf:"varint,3,opt,name=error,proto3,enum=pb.XChainErrorEnum" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TokenDetail) Reset()         { *m = TokenDetail{} }
func (m *TokenDetail) String() string { return proto.CompactTextString(m) }
func (*TokenDetail) ProtoMessage()    {}
func (*TokenDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{9}
}
func (m *TokenDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenDetail.Unmarshal(m, b)
}
func (m *TokenDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenDetail.Marshal(b, m, deterministic)
}
func (dst *TokenDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenDetail.Merge(dst, src)
}
func (m *TokenDetail) XXX_Size() int {
	return xxx_messageInfo_TokenDetail.Size(m)
}
func (m *TokenDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TokenDetail proto.InternalMessageInfo

func (m *TokenDetail) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *TokenDetail) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *TokenDetail) GetError() XChainErrorEnum {
	if m != nil {
		return m.Error
	}
	return XChainErrorEnum_SUCCESS
}

type AddressStatus struct {
	Header               *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Address              string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Bcs                  []*TokenDetail `protobuf:"bytes,3,rep,name=bcs,proto3" json:"bcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddressStatus) Reset()         { *m = AddressStatus{} }
func (m *AddressStatus) String() string { return proto.CompactTextString(m) }
func (*AddressStatus) ProtoMessage()    {}
func (*AddressStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{10}
}
func (m *AddressStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressStatus.Unmarshal(m, b)
}
func (m *AddressStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressStatus.Marshal(b, m, deterministic)
}
func (dst *AddressStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressStatus.Merge(dst, src)
}
func (m *AddressStatus) XXX_Size() int {
	return xxx_messageInfo_AddressStatus.Size(m)
}
func (m *AddressStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AddressStatus proto.InternalMessageInfo

func (m *AddressStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddressStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressStatus) GetBcs() []*TokenDetail {
	if m != nil {
		return m.Bcs
	}
	return nil
}

// Transaction input
type TxInput struct {
	// The transaction id referenced to
	RefTxid []byte `protobuf:"bytes,1,opt,name=ref_txid,json=refTxid,proto3" json:"ref_txid,omitempty"`
	// The output offset of the transaction referenced to
	RefOffset int32 `protobuf:"varint,2,opt,name=ref_offset,json=refOffset,proto3" json:"ref_offset,omitempty"`
	// The address of the launcher
	FromAddr []byte `protobuf:"bytes,5,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	// The amount of the transaction
	Amount []byte `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// Frozen height
	FrozenHeight         int64    `protobuf:"varint,7,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxInput) Reset()         { *m = TxInput{} }
func (m *TxInput) String() string { return proto.CompactTextString(m) }
func (*TxInput) ProtoMessage()    {}
func (*TxInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{11}
}
func (m *TxInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxInput.Unmarshal(m, b)
}
func (m *TxInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxInput.Marshal(b, m, deterministic)
}
func (dst *TxInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInput.Merge(dst, src)
}
func (m *TxInput) XXX_Size() int {
	return xxx_messageInfo_TxInput.Size(m)
}
func (m *TxInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInput.DiscardUnknown(m)
}

var xxx_messageInfo_TxInput proto.InternalMessageInfo

func (m *TxInput) GetRefTxid() []byte {
	if m != nil {
		return m.RefTxid
	}
	return nil
}

func (m *TxInput) GetRefOffset() int32 {
	if m != nil {
		return m.RefOffset
	}
	return 0
}

func (m *TxInput) GetFromAddr() []byte {
	if m != nil {
		return m.FromAddr
	}
	return nil
}

func (m *TxInput) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TxInput) GetFrozenHeight() int64 {
	if m != nil {
		return m.FrozenHeight
	}
	return 0
}

// Transaction output
type TxOutput struct {
	// The amount of the transaction
	Amount []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The address of the launcher
	ToAddr []byte `protobuf:"bytes,2,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`
	// Fronzen height
	FrozenHeight         int64    `protobuf:"varint,4,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxOutput) Reset()         { *m = TxOutput{} }
func (m *TxOutput) String() string { return proto.CompactTextString(m) }
func (*TxOutput) ProtoMessage()    {}
func (*TxOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{12}
}
func (m *TxOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxOutput.Unmarshal(m, b)
}
func (m *TxOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxOutput.Marshal(b, m, deterministic)
}
func (dst *TxOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutput.Merge(dst, src)
}
func (m *TxOutput) XXX_Size() int {
	return xxx_messageInfo_TxOutput.Size(m)
}
func (m *TxOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutput proto.InternalMessageInfo

func (m *TxOutput) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TxOutput) GetToAddr() []byte {
	if m != nil {
		return m.ToAddr
	}
	return nil
}

func (m *TxOutput) GetFrozenHeight() int64 {
	if m != nil {
		return m.FrozenHeight
	}
	return 0
}

// Transaction is the information of the transaction
type Transaction struct {
	// txid is the id of this transaction
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// the blockid the transaction belong to
	Blockid []byte `protobuf:"bytes,2,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// Transaction input list
	TxInputs []*TxInput `protobuf:"bytes,3,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	// Transaction output list
	TxOutputs []*TxOutput `protobuf:"bytes,4,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	// Transaction description or system contract
	Desc []byte `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// Mining rewards
	Coinbase bool `protobuf:"varint,7,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Random number used to avoid replay attacks
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp to launch the transaction
	Timestamp int64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// tx format version; tx格式版本号
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	// auto generated tx
	Autogen          bool             `protobuf:"varint,11,opt,name=autogen,proto3" json:"autogen,omitempty"`
	TxInputsExt      []*TxInputExt    `protobuf:"bytes,23,rep,name=tx_inputs_ext,json=txInputsExt,proto3" json:"tx_inputs_ext,omitempty"`
	TxOutputsExt     []*TxOutputExt   `protobuf:"bytes,24,rep,name=tx_outputs_ext,json=txOutputsExt,proto3" json:"tx_outputs_ext,omitempty"`
	ContractRequests []*InvokeRequest `protobuf:"bytes,25,rep,name=contract_requests,json=contractRequests,proto3" json:"contract_requests,omitempty"`
	// 权限系统新增字段
	// 交易发起者, 可以是一个Address或者一个Account
	Initiator string `protobuf:"bytes,26,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
	AuthRequire []string `protobuf:"bytes,27,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
	// 交易发起者对交易元数据签名，签名的内容包括auth_require字段
	InitiatorSigns []*SignatureInfo `protobuf:"bytes,28,rep,name=initiator_signs,json=initiatorSigns,proto3" json:"initiator_signs,omitempty"`
	// 收集到的签名
	AuthRequireSigns     []*SignatureInfo `protobuf:"bytes,29,rep,name=auth_require_signs,json=authRequireSigns,proto3" json:"auth_require_signs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{13}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *Transaction) GetBlockid() []byte {
	if m != nil {
		return m.Blockid
	}
	return nil
}

func (m *Transaction) GetTxInputs() []*TxInput {
	if m != nil {
		return m.TxInputs
	}
	return nil
}

func (m *Transaction) GetTxOutputs() []*TxOutput {
	if m != nil {
		return m.TxOutputs
	}
	return nil
}

func (m *Transaction) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *Transaction) GetCoinbase() bool {
	if m != nil {
		return m.Coinbase
	}
	return false
}

func (m *Transaction) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Transaction) GetAutogen() bool {
	if m != nil {
		return m.Autogen
	}
	return false
}

func (m *Transaction) GetTxInputsExt() []*TxInputExt {
	if m != nil {
		return m.TxInputsExt
	}
	return nil
}

func (m *Transaction) GetTxOutputsExt() []*TxOutputExt {
	if m != nil {
		return m.TxOutputsExt
	}
	return nil
}

func (m *Transaction) GetContractRequests() []*InvokeRequest {
	if m != nil {
		return m.ContractRequests
	}
	return nil
}

func (m *Transaction) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *Transaction) GetAuthRequire() []string {
	if m != nil {
		return m.AuthRequire
	}
	return nil
}

func (m *Transaction) GetInitiatorSigns() []*SignatureInfo {
	if m != nil {
		return m.InitiatorSigns
	}
	return nil
}

func (m *Transaction) GetAuthRequireSigns() []*SignatureInfo {
	if m != nil {
		return m.AuthRequireSigns
	}
	return nil
}

// Ledger metadata
type LedgerMeta struct {
	// root block id
	RootBlockid []byte `protobuf:"bytes,1,opt,name=root_blockid,json=rootBlockid,proto3" json:"root_blockid,omitempty"`
	// tip block id
	TipBlockid []byte `protobuf:"bytes,2,opt,name=tip_blockid,json=tipBlockid,proto3" json:"tip_blockid,omitempty"`
	// the height of the trunk
	TrunkHeight int64 `protobuf:"varint,3,opt,name=trunk_height,json=trunkHeight,proto3" json:"trunk_height,omitempty"`
	// max block size
	MaxBlockSize         int64    `protobuf:"varint,4,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerMeta) Reset()         { *m = LedgerMeta{} }
func (m *LedgerMeta) String() string { return proto.CompactTextString(m) }
func (*LedgerMeta) ProtoMessage()    {}
func (*LedgerMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{14}
}
func (m *LedgerMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerMeta.Unmarshal(m, b)
}
func (m *LedgerMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerMeta.Marshal(b, m, deterministic)
}
func (dst *LedgerMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerMeta.Merge(dst, src)
}
func (m *LedgerMeta) XXX_Size() int {
	return xxx_messageInfo_LedgerMeta.Size(m)
}
func (m *LedgerMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerMeta.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerMeta proto.InternalMessageInfo

func (m *LedgerMeta) GetRootBlockid() []byte {
	if m != nil {
		return m.RootBlockid
	}
	return nil
}

func (m *LedgerMeta) GetTipBlockid() []byte {
	if m != nil {
		return m.TipBlockid
	}
	return nil
}

func (m *LedgerMeta) GetTrunkHeight() int64 {
	if m != nil {
		return m.TrunkHeight
	}
	return 0
}

func (m *LedgerMeta) GetMaxBlockSize() int64 {
	if m != nil {
		return m.MaxBlockSize
	}
	return 0
}

// Utxo metadata
type UtxoMeta struct {
	LatestBlockid        []byte   `protobuf:"bytes,1,opt,name=latest_blockid,json=latestBlockid,proto3" json:"latest_blockid,omitempty"`
	LockKeyList          []string `protobuf:"bytes,2,rep,name=lock_key_list,json=lockKeyList,proto3" json:"lock_key_list,omitempty"`
	UtxoTotal            string   `protobuf:"bytes,3,opt,name=utxo_total,json=utxoTotal,proto3" json:"utxo_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UtxoMeta) Reset()         { *m = UtxoMeta{} }
func (m *UtxoMeta) String() string { return proto.CompactTextString(m) }
func (*UtxoMeta) ProtoMessage()    {}
func (*UtxoMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{15}
}
func (m *UtxoMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtxoMeta.Unmarshal(m, b)
}
func (m *UtxoMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtxoMeta.Marshal(b, m, deterministic)
}
func (dst *UtxoMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtxoMeta.Merge(dst, src)
}
func (m *UtxoMeta) XXX_Size() int {
	return xxx_messageInfo_UtxoMeta.Size(m)
}
func (m *UtxoMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UtxoMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UtxoMeta proto.InternalMessageInfo

func (m *UtxoMeta) GetLatestBlockid() []byte {
	if m != nil {
		return m.LatestBlockid
	}
	return nil
}

func (m *UtxoMeta) GetLockKeyList() []string {
	if m != nil {
		return m.LockKeyList
	}
	return nil
}

func (m *UtxoMeta) GetUtxoTotal() string {
	if m != nil {
		return m.UtxoTotal
	}
	return ""
}

// The internal block struct
type InternalBlock struct {
	// block version
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Random number used to avoid replay attacks
	Nonce int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// blockid generate the hash sign of the block used by sha256
	Blockid []byte `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// pre_hash is the parent blockid of the block
	PreHash []byte `protobuf:"bytes,4,opt,name=pre_hash,json=preHash,proto3" json:"pre_hash,omitempty"`
	// The miner id
	Proposer []byte `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// The sign which miner signed: blockid + nonce + timestamp
	Sign []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	// The pk of the miner
	Pubkey []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The Merkle Tree root
	MerkleRoot []byte `protobuf:"bytes,8,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The height of the blockchain
	Height int64 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// Timestamp of the block
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transactions of the block, only txid stored on kv, the detail information stored in another table
	Transactions []*Transaction `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The transaction count of the block
	TxCount int32 `protobuf:"varint,12,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// 所有交易hash的merkle tree
	MerkleTree  [][]byte          `protobuf:"bytes,13,rep,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
	CurTerm     int64             `protobuf:"varint,16,opt,name=curTerm,proto3" json:"curTerm,omitempty"`
	CurBlockNum int64             `protobuf:"varint,17,opt,name=curBlockNum,proto3" json:"curBlockNum,omitempty"`
	FailedTxs   map[string]string `protobuf:"bytes,18,rep,name=failed_txs,json=failedTxs,proto3" json:"failed_txs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 下面的属性会动态变化
	// If the block is on the trunk
	InTrunk bool `protobuf:"varint,14,opt,name=in_trunk,json=inTrunk,proto3" json:"in_trunk,omitempty"`
	// Next next block which on trunk
	NextHash             []byte   `protobuf:"bytes,15,opt,name=next_hash,json=nextHash,proto3" json:"next_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalBlock) Reset()         { *m = InternalBlock{} }
func (m *InternalBlock) String() string { return proto.CompactTextString(m) }
func (*InternalBlock) ProtoMessage()    {}
func (*InternalBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{16}
}
func (m *InternalBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalBlock.Unmarshal(m, b)
}
func (m *InternalBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalBlock.Marshal(b, m, deterministic)
}
func (dst *InternalBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalBlock.Merge(dst, src)
}
func (m *InternalBlock) XXX_Size() int {
	return xxx_messageInfo_InternalBlock.Size(m)
}
func (m *InternalBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalBlock.DiscardUnknown(m)
}

var xxx_messageInfo_InternalBlock proto.InternalMessageInfo

func (m *InternalBlock) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *InternalBlock) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *InternalBlock) GetBlockid() []byte {
	if m != nil {
		return m.Blockid
	}
	return nil
}

func (m *InternalBlock) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *InternalBlock) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *InternalBlock) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *InternalBlock) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *InternalBlock) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *InternalBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *InternalBlock) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *InternalBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *InternalBlock) GetTxCount() int32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *InternalBlock) GetMerkleTree() [][]byte {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

func (m *InternalBlock) GetCurTerm() int64 {
	if m != nil {
		return m.CurTerm
	}
	return 0
}

func (m *InternalBlock) GetCurBlockNum() int64 {
	if m != nil {
		return m.CurBlockNum
	}
	return 0
}

func (m *InternalBlock) GetFailedTxs() map[string]string {
	if m != nil {
		return m.FailedTxs
	}
	return nil
}

func (m *InternalBlock) GetInTrunk() bool {
	if m != nil {
		return m.InTrunk
	}
	return false
}

func (m *InternalBlock) GetNextHash() []byte {
	if m != nil {
		return m.NextHash
	}
	return nil
}

// BlockChain status
type BCStatus struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// block name
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// ledger metadata
	Meta *LedgerMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// The information of the longest block
	Block *InternalBlock `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	// Utox information
	UtxoMeta             *UtxoMeta `protobuf:"bytes,5,opt,name=utxoMeta,proto3" json:"utxoMeta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BCStatus) Reset()         { *m = BCStatus{} }
func (m *BCStatus) String() string { return proto.CompactTextString(m) }
func (*BCStatus) ProtoMessage()    {}
func (*BCStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{17}
}
func (m *BCStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BCStatus.Unmarshal(m, b)
}
func (m *BCStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BCStatus.Marshal(b, m, deterministic)
}
func (dst *BCStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BCStatus.Merge(dst, src)
}
func (m *BCStatus) XXX_Size() int {
	return xxx_messageInfo_BCStatus.Size(m)
}
func (m *BCStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BCStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BCStatus proto.InternalMessageInfo

func (m *BCStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BCStatus) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *BCStatus) GetMeta() *LedgerMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BCStatus) GetBlock() *InternalBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BCStatus) GetUtxoMeta() *UtxoMeta {
	if m != nil {
		return m.UtxoMeta
	}
	return nil
}

type BCTipStatus struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	IsTrunkTip           bool     `protobuf:"varint,2,opt,name=is_trunk_tip,json=isTrunkTip,proto3" json:"is_trunk_tip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BCTipStatus) Reset()         { *m = BCTipStatus{} }
func (m *BCTipStatus) String() string { return proto.CompactTextString(m) }
func (*BCTipStatus) ProtoMessage()    {}
func (*BCTipStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{18}
}
func (m *BCTipStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BCTipStatus.Unmarshal(m, b)
}
func (m *BCTipStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BCTipStatus.Marshal(b, m, deterministic)
}
func (dst *BCTipStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BCTipStatus.Merge(dst, src)
}
func (m *BCTipStatus) XXX_Size() int {
	return xxx_messageInfo_BCTipStatus.Size(m)
}
func (m *BCTipStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BCTipStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BCTipStatus proto.InternalMessageInfo

func (m *BCTipStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BCTipStatus) GetIsTrunkTip() bool {
	if m != nil {
		return m.IsTrunkTip
	}
	return false
}

type BlockChains struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Blockchains          []string `protobuf:"bytes,2,rep,name=blockchains,proto3" json:"blockchains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockChains) Reset()         { *m = BlockChains{} }
func (m *BlockChains) String() string { return proto.CompactTextString(m) }
func (*BlockChains) ProtoMessage()    {}
func (*BlockChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{19}
}
func (m *BlockChains) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockChains.Unmarshal(m, b)
}
func (m *BlockChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockChains.Marshal(b, m, deterministic)
}
func (dst *BlockChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockChains.Merge(dst, src)
}
func (m *BlockChains) XXX_Size() int {
	return xxx_messageInfo_BlockChains.Size(m)
}
func (m *BlockChains) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockChains.DiscardUnknown(m)
}

var xxx_messageInfo_BlockChains proto.InternalMessageInfo

func (m *BlockChains) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockChains) GetBlockchains() []string {
	if m != nil {
		return m.Blockchains
	}
	return nil
}

type Speeds struct {
	SumSpeeds            map[string]float64   `protobuf:"bytes,1,rep,name=SumSpeeds,proto3" json:"SumSpeeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BcSpeeds             map[string]*BCSpeeds `protobuf:"bytes,2,rep,name=BcSpeeds,proto3" json:"BcSpeeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Speeds) Reset()         { *m = Speeds{} }
func (m *Speeds) String() string { return proto.CompactTextString(m) }
func (*Speeds) ProtoMessage()    {}
func (*Speeds) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{20}
}
func (m *Speeds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Speeds.Unmarshal(m, b)
}
func (m *Speeds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Speeds.Marshal(b, m, deterministic)
}
func (dst *Speeds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Speeds.Merge(dst, src)
}
func (m *Speeds) XXX_Size() int {
	return xxx_messageInfo_Speeds.Size(m)
}
func (m *Speeds) XXX_DiscardUnknown() {
	xxx_messageInfo_Speeds.DiscardUnknown(m)
}

var xxx_messageInfo_Speeds proto.InternalMessageInfo

func (m *Speeds) GetSumSpeeds() map[string]float64 {
	if m != nil {
		return m.SumSpeeds
	}
	return nil
}

func (m *Speeds) GetBcSpeeds() map[string]*BCSpeeds {
	if m != nil {
		return m.BcSpeeds
	}
	return nil
}

type BCSpeeds struct {
	BcSpeed              map[string]float64 `protobuf:"bytes,1,rep,name=BcSpeed,proto3" json:"BcSpeed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BCSpeeds) Reset()         { *m = BCSpeeds{} }
func (m *BCSpeeds) String() string { return proto.CompactTextString(m) }
func (*BCSpeeds) ProtoMessage()    {}
func (*BCSpeeds) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{21}
}
func (m *BCSpeeds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BCSpeeds.Unmarshal(m, b)
}
func (m *BCSpeeds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BCSpeeds.Marshal(b, m, deterministic)
}
func (dst *BCSpeeds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BCSpeeds.Merge(dst, src)
}
func (m *BCSpeeds) XXX_Size() int {
	return xxx_messageInfo_BCSpeeds.Size(m)
}
func (m *BCSpeeds) XXX_DiscardUnknown() {
	xxx_messageInfo_BCSpeeds.DiscardUnknown(m)
}

var xxx_messageInfo_BCSpeeds proto.InternalMessageInfo

func (m *BCSpeeds) GetBcSpeed() map[string]float64 {
	if m != nil {
		return m.BcSpeed
	}
	return nil
}

type SystemsStatus struct {
	Header               *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BcsStatus            []*BCStatus `protobuf:"bytes,2,rep,name=bcs_status,json=bcsStatus,proto3" json:"bcs_status,omitempty"`
	Speeds               *Speeds     `protobuf:"bytes,3,opt,name=speeds,proto3" json:"speeds,omitempty"`
	PeerUrls             []string    `protobuf:"bytes,4,rep,name=peerUrls,proto3" json:"peerUrls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SystemsStatus) Reset()         { *m = SystemsStatus{} }
func (m *SystemsStatus) String() string { return proto.CompactTextString(m) }
func (*SystemsStatus) ProtoMessage()    {}
func (*SystemsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{22}
}
func (m *SystemsStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemsStatus.Unmarshal(m, b)
}
func (m *SystemsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemsStatus.Marshal(b, m, deterministic)
}
func (dst *SystemsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemsStatus.Merge(dst, src)
}
func (m *SystemsStatus) XXX_Size() int {
	return xxx_messageInfo_SystemsStatus.Size(m)
}
func (m *SystemsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SystemsStatus proto.InternalMessageInfo

func (m *SystemsStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SystemsStatus) GetBcsStatus() []*BCStatus {
	if m != nil {
		return m.BcsStatus
	}
	return nil
}

func (m *SystemsStatus) GetSpeeds() *Speeds {
	if m != nil {
		return m.Speeds
	}
	return nil
}

func (m *SystemsStatus) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

type SystemsStatusReply struct {
	Header               *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SystemsStatus        *SystemsStatus `protobuf:"bytes,2,opt,name=systems_status,json=systemsStatus,proto3" json:"systems_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SystemsStatusReply) Reset()         { *m = SystemsStatusReply{} }
func (m *SystemsStatusReply) String() string { return proto.CompactTextString(m) }
func (*SystemsStatusReply) ProtoMessage()    {}
func (*SystemsStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{23}
}
func (m *SystemsStatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemsStatusReply.Unmarshal(m, b)
}
func (m *SystemsStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemsStatusReply.Marshal(b, m, deterministic)
}
func (dst *SystemsStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemsStatusReply.Merge(dst, src)
}
func (m *SystemsStatusReply) XXX_Size() int {
	return xxx_messageInfo_SystemsStatusReply.Size(m)
}
func (m *SystemsStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemsStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_SystemsStatusReply proto.InternalMessageInfo

func (m *SystemsStatusReply) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SystemsStatusReply) GetSystemsStatus() *SystemsStatus {
	if m != nil {
		return m.SystemsStatus
	}
	return nil
}

// RawUrl return the node's  connect url
type RawUrl struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RawUrl               string   `protobuf:"bytes,2,opt,name=rawUrl,proto3" json:"rawUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawUrl) Reset()         { *m = RawUrl{} }
func (m *RawUrl) String() string { return proto.CompactTextString(m) }
func (*RawUrl) ProtoMessage()    {}
func (*RawUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{24}
}
func (m *RawUrl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawUrl.Unmarshal(m, b)
}
func (m *RawUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawUrl.Marshal(b, m, deterministic)
}
func (dst *RawUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawUrl.Merge(dst, src)
}
func (m *RawUrl) XXX_Size() int {
	return xxx_messageInfo_RawUrl.Size(m)
}
func (m *RawUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_RawUrl.DiscardUnknown(m)
}

var xxx_messageInfo_RawUrl proto.InternalMessageInfo

func (m *RawUrl) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RawUrl) GetRawUrl() string {
	if m != nil {
		return m.RawUrl
	}
	return ""
}

type Utxo struct {
	Amount               []byte   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	ToAddr               []byte   `protobuf:"bytes,2,opt,name=toAddr,proto3" json:"toAddr,omitempty"`
	ToPubkey             []byte   `protobuf:"bytes,3,opt,name=toPubkey,proto3" json:"toPubkey,omitempty"`
	RefTxid              []byte   `protobuf:"bytes,4,opt,name=refTxid,proto3" json:"refTxid,omitempty"`
	RefOffset            int32    `protobuf:"varint,5,opt,name=refOffset,proto3" json:"refOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Utxo) Reset()         { *m = Utxo{} }
func (m *Utxo) String() string { return proto.CompactTextString(m) }
func (*Utxo) ProtoMessage()    {}
func (*Utxo) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{25}
}
func (m *Utxo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Utxo.Unmarshal(m, b)
}
func (m *Utxo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Utxo.Marshal(b, m, deterministic)
}
func (dst *Utxo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Utxo.Merge(dst, src)
}
func (m *Utxo) XXX_Size() int {
	return xxx_messageInfo_Utxo.Size(m)
}
func (m *Utxo) XXX_DiscardUnknown() {
	xxx_messageInfo_Utxo.DiscardUnknown(m)
}

var xxx_messageInfo_Utxo proto.InternalMessageInfo

func (m *Utxo) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Utxo) GetToAddr() []byte {
	if m != nil {
		return m.ToAddr
	}
	return nil
}

func (m *Utxo) GetToPubkey() []byte {
	if m != nil {
		return m.ToPubkey
	}
	return nil
}

func (m *Utxo) GetRefTxid() []byte {
	if m != nil {
		return m.RefTxid
	}
	return nil
}

func (m *Utxo) GetRefOffset() int32 {
	if m != nil {
		return m.RefOffset
	}
	return 0
}

// UtxoInput query info to query utxos
type UtxoInput struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// which bcname to select
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// address to select
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// publickey of the address
	Publickey string `protobuf:"bytes,4,opt,name=publickey,proto3" json:"publickey,omitempty"`
	// totalNeed refer the total need utxos to select
	TotalNeed string `protobuf:"bytes,5,opt,name=totalNeed,proto3" json:"totalNeed,omitempty"`
	// userSign of input
	UserSign []byte `protobuf:"bytes,7,opt,name=userSign,proto3" json:"userSign,omitempty"`
	// need lock
	NeedLock             bool     `protobuf:"varint,8,opt,name=needLock,proto3" json:"needLock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UtxoInput) Reset()         { *m = UtxoInput{} }
func (m *UtxoInput) String() string { return proto.CompactTextString(m) }
func (*UtxoInput) ProtoMessage()    {}
func (*UtxoInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{26}
}
func (m *UtxoInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtxoInput.Unmarshal(m, b)
}
func (m *UtxoInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtxoInput.Marshal(b, m, deterministic)
}
func (dst *UtxoInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtxoInput.Merge(dst, src)
}
func (m *UtxoInput) XXX_Size() int {
	return xxx_messageInfo_UtxoInput.Size(m)
}
func (m *UtxoInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UtxoInput.DiscardUnknown(m)
}

var xxx_messageInfo_UtxoInput proto.InternalMessageInfo

func (m *UtxoInput) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UtxoInput) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *UtxoInput) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UtxoInput) GetPublickey() string {
	if m != nil {
		return m.Publickey
	}
	return ""
}

func (m *UtxoInput) GetTotalNeed() string {
	if m != nil {
		return m.TotalNeed
	}
	return ""
}

func (m *UtxoInput) GetUserSign() []byte {
	if m != nil {
		return m.UserSign
	}
	return nil
}

func (m *UtxoInput) GetNeedLock() bool {
	if m != nil {
		return m.NeedLock
	}
	return false
}

// UtxoOutput query results
type UtxoOutput struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// outSign return the output
	// bytes outSign = 2;
	// utxo list
	UtxoList []*Utxo `protobuf:"bytes,2,rep,name=utxoList,proto3" json:"utxoList,omitempty"`
	// total selected amount
	TotalSelected        string   `protobuf:"bytes,3,opt,name=totalSelected,proto3" json:"totalSelected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UtxoOutput) Reset()         { *m = UtxoOutput{} }
func (m *UtxoOutput) String() string { return proto.CompactTextString(m) }
func (*UtxoOutput) ProtoMessage()    {}
func (*UtxoOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{27}
}
func (m *UtxoOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtxoOutput.Unmarshal(m, b)
}
func (m *UtxoOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtxoOutput.Marshal(b, m, deterministic)
}
func (dst *UtxoOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtxoOutput.Merge(dst, src)
}
func (m *UtxoOutput) XXX_Size() int {
	return xxx_messageInfo_UtxoOutput.Size(m)
}
func (m *UtxoOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_UtxoOutput.DiscardUnknown(m)
}

var xxx_messageInfo_UtxoOutput proto.InternalMessageInfo

func (m *UtxoOutput) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UtxoOutput) GetUtxoList() []*Utxo {
	if m != nil {
		return m.UtxoList
	}
	return nil
}

func (m *UtxoOutput) GetTotalSelected() string {
	if m != nil {
		return m.TotalSelected
	}
	return ""
}

type NativeCodeDesc struct {
	// native code name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// code version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// digest of binary
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// the previous verion
	PrevVersion string `protobuf:"bytes,4,opt,name=prevVersion,proto3" json:"prevVersion,omitempty"`
	// xuper api version
	XuperApiVersion      int32    `protobuf:"varint,5,opt,name=xuperApiVersion,proto3" json:"xuperApiVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeCodeDesc) Reset()         { *m = NativeCodeDesc{} }
func (m *NativeCodeDesc) String() string { return proto.CompactTextString(m) }
func (*NativeCodeDesc) ProtoMessage()    {}
func (*NativeCodeDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{28}
}
func (m *NativeCodeDesc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeCodeDesc.Unmarshal(m, b)
}
func (m *NativeCodeDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeCodeDesc.Marshal(b, m, deterministic)
}
func (dst *NativeCodeDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeCodeDesc.Merge(dst, src)
}
func (m *NativeCodeDesc) XXX_Size() int {
	return xxx_messageInfo_NativeCodeDesc.Size(m)
}
func (m *NativeCodeDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeCodeDesc.DiscardUnknown(m)
}

var xxx_messageInfo_NativeCodeDesc proto.InternalMessageInfo

func (m *NativeCodeDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NativeCodeDesc) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NativeCodeDesc) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *NativeCodeDesc) GetPrevVersion() string {
	if m != nil {
		return m.PrevVersion
	}
	return ""
}

func (m *NativeCodeDesc) GetXuperApiVersion() int32 {
	if m != nil {
		return m.XuperApiVersion
	}
	return 0
}

type WasmCodeDesc struct {
	Runtime              string   `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Compiler             string   `protobuf:"bytes,2,opt,name=compiler,proto3" json:"compiler,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WasmCodeDesc) Reset()         { *m = WasmCodeDesc{} }
func (m *WasmCodeDesc) String() string { return proto.CompactTextString(m) }
func (*WasmCodeDesc) ProtoMessage()    {}
func (*WasmCodeDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{29}
}
func (m *WasmCodeDesc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WasmCodeDesc.Unmarshal(m, b)
}
func (m *WasmCodeDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WasmCodeDesc.Marshal(b, m, deterministic)
}
func (dst *WasmCodeDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmCodeDesc.Merge(dst, src)
}
func (m *WasmCodeDesc) XXX_Size() int {
	return xxx_messageInfo_WasmCodeDesc.Size(m)
}
func (m *WasmCodeDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmCodeDesc.DiscardUnknown(m)
}

var xxx_messageInfo_WasmCodeDesc proto.InternalMessageInfo

func (m *WasmCodeDesc) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *WasmCodeDesc) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *WasmCodeDesc) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type DeployNativeCodeRequest struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// chain name
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// native code desc
	Desc *NativeCodeDesc `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// code is the bytes of binary code
	Code []byte `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// the address of deployer
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// the public key of deployer
	Pubkey []byte `protobuf:"bytes,6,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// the sign of desc
	Sign                 []byte   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployNativeCodeRequest) Reset()         { *m = DeployNativeCodeRequest{} }
func (m *DeployNativeCodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeployNativeCodeRequest) ProtoMessage()    {}
func (*DeployNativeCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{30}
}
func (m *DeployNativeCodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployNativeCodeRequest.Unmarshal(m, b)
}
func (m *DeployNativeCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployNativeCodeRequest.Marshal(b, m, deterministic)
}
func (dst *DeployNativeCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployNativeCodeRequest.Merge(dst, src)
}
func (m *DeployNativeCodeRequest) XXX_Size() int {
	return xxx_messageInfo_DeployNativeCodeRequest.Size(m)
}
func (m *DeployNativeCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployNativeCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployNativeCodeRequest proto.InternalMessageInfo

func (m *DeployNativeCodeRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeployNativeCodeRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DeployNativeCodeRequest) GetDesc() *NativeCodeDesc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *DeployNativeCodeRequest) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *DeployNativeCodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DeployNativeCodeRequest) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DeployNativeCodeRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type DeployNativeCodeResponse struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployNativeCodeResponse) Reset()         { *m = DeployNativeCodeResponse{} }
func (m *DeployNativeCodeResponse) String() string { return proto.CompactTextString(m) }
func (*DeployNativeCodeResponse) ProtoMessage()    {}
func (*DeployNativeCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{31}
}
func (m *DeployNativeCodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployNativeCodeResponse.Unmarshal(m, b)
}
func (m *DeployNativeCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployNativeCodeResponse.Marshal(b, m, deterministic)
}
func (dst *DeployNativeCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployNativeCodeResponse.Merge(dst, src)
}
func (m *DeployNativeCodeResponse) XXX_Size() int {
	return xxx_messageInfo_DeployNativeCodeResponse.Size(m)
}
func (m *DeployNativeCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployNativeCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeployNativeCodeResponse proto.InternalMessageInfo

func (m *DeployNativeCodeResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type NativeCodeStatus struct {
	Desc                 *NativeCodeDesc `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Status               int32           `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Healthy              bool            `protobuf:"varint,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NativeCodeStatus) Reset()         { *m = NativeCodeStatus{} }
func (m *NativeCodeStatus) String() string { return proto.CompactTextString(m) }
func (*NativeCodeStatus) ProtoMessage()    {}
func (*NativeCodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{32}
}
func (m *NativeCodeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeCodeStatus.Unmarshal(m, b)
}
func (m *NativeCodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeCodeStatus.Marshal(b, m, deterministic)
}
func (dst *NativeCodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeCodeStatus.Merge(dst, src)
}
func (m *NativeCodeStatus) XXX_Size() int {
	return xxx_messageInfo_NativeCodeStatus.Size(m)
}
func (m *NativeCodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeCodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NativeCodeStatus proto.InternalMessageInfo

func (m *NativeCodeStatus) GetDesc() *NativeCodeDesc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *NativeCodeStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NativeCodeStatus) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

type NativeCodeStatusRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeCodeStatusRequest) Reset()         { *m = NativeCodeStatusRequest{} }
func (m *NativeCodeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NativeCodeStatusRequest) ProtoMessage()    {}
func (*NativeCodeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{33}
}
func (m *NativeCodeStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeCodeStatusRequest.Unmarshal(m, b)
}
func (m *NativeCodeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeCodeStatusRequest.Marshal(b, m, deterministic)
}
func (dst *NativeCodeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeCodeStatusRequest.Merge(dst, src)
}
func (m *NativeCodeStatusRequest) XXX_Size() int {
	return xxx_messageInfo_NativeCodeStatusRequest.Size(m)
}
func (m *NativeCodeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeCodeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NativeCodeStatusRequest proto.InternalMessageInfo

func (m *NativeCodeStatusRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NativeCodeStatusRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

type NativeCodeStatusResponse struct {
	Header               *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status               []*NativeCodeStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NativeCodeStatusResponse) Reset()         { *m = NativeCodeStatusResponse{} }
func (m *NativeCodeStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NativeCodeStatusResponse) ProtoMessage()    {}
func (*NativeCodeStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{34}
}
func (m *NativeCodeStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeCodeStatusResponse.Unmarshal(m, b)
}
func (m *NativeCodeStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeCodeStatusResponse.Marshal(b, m, deterministic)
}
func (dst *NativeCodeStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeCodeStatusResponse.Merge(dst, src)
}
func (m *NativeCodeStatusResponse) XXX_Size() int {
	return xxx_messageInfo_NativeCodeStatusResponse.Size(m)
}
func (m *NativeCodeStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeCodeStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NativeCodeStatusResponse proto.InternalMessageInfo

func (m *NativeCodeStatusResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NativeCodeStatusResponse) GetStatus() []*NativeCodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// 候选人列表接口
type DposCandidatesRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposCandidatesRequest) Reset()         { *m = DposCandidatesRequest{} }
func (m *DposCandidatesRequest) String() string { return proto.CompactTextString(m) }
func (*DposCandidatesRequest) ProtoMessage()    {}
func (*DposCandidatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{35}
}
func (m *DposCandidatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposCandidatesRequest.Unmarshal(m, b)
}
func (m *DposCandidatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposCandidatesRequest.Marshal(b, m, deterministic)
}
func (dst *DposCandidatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposCandidatesRequest.Merge(dst, src)
}
func (m *DposCandidatesRequest) XXX_Size() int {
	return xxx_messageInfo_DposCandidatesRequest.Size(m)
}
func (m *DposCandidatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposCandidatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposCandidatesRequest proto.InternalMessageInfo

func (m *DposCandidatesRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposCandidatesRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

// 候选人列表返回
type DposCandidatesResponse struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CandidatesInfo       []string `protobuf:"bytes,2,rep,name=candidatesInfo,proto3" json:"candidatesInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposCandidatesResponse) Reset()         { *m = DposCandidatesResponse{} }
func (m *DposCandidatesResponse) String() string { return proto.CompactTextString(m) }
func (*DposCandidatesResponse) ProtoMessage()    {}
func (*DposCandidatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{36}
}
func (m *DposCandidatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposCandidatesResponse.Unmarshal(m, b)
}
func (m *DposCandidatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposCandidatesResponse.Marshal(b, m, deterministic)
}
func (dst *DposCandidatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposCandidatesResponse.Merge(dst, src)
}
func (m *DposCandidatesResponse) XXX_Size() int {
	return xxx_messageInfo_DposCandidatesResponse.Size(m)
}
func (m *DposCandidatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposCandidatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposCandidatesResponse proto.InternalMessageInfo

func (m *DposCandidatesResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposCandidatesResponse) GetCandidatesInfo() []string {
	if m != nil {
		return m.CandidatesInfo
	}
	return nil
}

// 提名者提名记录请求
type DposNominateRecordsRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposNominateRecordsRequest) Reset()         { *m = DposNominateRecordsRequest{} }
func (m *DposNominateRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*DposNominateRecordsRequest) ProtoMessage()    {}
func (*DposNominateRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{37}
}
func (m *DposNominateRecordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposNominateRecordsRequest.Unmarshal(m, b)
}
func (m *DposNominateRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposNominateRecordsRequest.Marshal(b, m, deterministic)
}
func (dst *DposNominateRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposNominateRecordsRequest.Merge(dst, src)
}
func (m *DposNominateRecordsRequest) XXX_Size() int {
	return xxx_messageInfo_DposNominateRecordsRequest.Size(m)
}
func (m *DposNominateRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposNominateRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposNominateRecordsRequest proto.InternalMessageInfo

func (m *DposNominateRecordsRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposNominateRecordsRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DposNominateRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 候选人信息
type DposNominateInfo struct {
	Candidate            string   `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Txid                 string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposNominateInfo) Reset()         { *m = DposNominateInfo{} }
func (m *DposNominateInfo) String() string { return proto.CompactTextString(m) }
func (*DposNominateInfo) ProtoMessage()    {}
func (*DposNominateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{38}
}
func (m *DposNominateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposNominateInfo.Unmarshal(m, b)
}
func (m *DposNominateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposNominateInfo.Marshal(b, m, deterministic)
}
func (dst *DposNominateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposNominateInfo.Merge(dst, src)
}
func (m *DposNominateInfo) XXX_Size() int {
	return xxx_messageInfo_DposNominateInfo.Size(m)
}
func (m *DposNominateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DposNominateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DposNominateInfo proto.InternalMessageInfo

func (m *DposNominateInfo) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *DposNominateInfo) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// 提名者提名记录返回
type DposNominateRecordsResponse struct {
	Header               *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NominateRecords      []*DposNominateInfo `protobuf:"bytes,2,rep,name=nominateRecords,proto3" json:"nominateRecords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DposNominateRecordsResponse) Reset()         { *m = DposNominateRecordsResponse{} }
func (m *DposNominateRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*DposNominateRecordsResponse) ProtoMessage()    {}
func (*DposNominateRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{39}
}
func (m *DposNominateRecordsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposNominateRecordsResponse.Unmarshal(m, b)
}
func (m *DposNominateRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposNominateRecordsResponse.Marshal(b, m, deterministic)
}
func (dst *DposNominateRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposNominateRecordsResponse.Merge(dst, src)
}
func (m *DposNominateRecordsResponse) XXX_Size() int {
	return xxx_messageInfo_DposNominateRecordsResponse.Size(m)
}
func (m *DposNominateRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposNominateRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposNominateRecordsResponse proto.InternalMessageInfo

func (m *DposNominateRecordsResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposNominateRecordsResponse) GetNominateRecords() []*DposNominateInfo {
	if m != nil {
		return m.NominateRecords
	}
	return nil
}

// 候选人被提名记录请求
type DposNomineeRecordsRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposNomineeRecordsRequest) Reset()         { *m = DposNomineeRecordsRequest{} }
func (m *DposNomineeRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*DposNomineeRecordsRequest) ProtoMessage()    {}
func (*DposNomineeRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{40}
}
func (m *DposNomineeRecordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposNomineeRecordsRequest.Unmarshal(m, b)
}
func (m *DposNomineeRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposNomineeRecordsRequest.Marshal(b, m, deterministic)
}
func (dst *DposNomineeRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposNomineeRecordsRequest.Merge(dst, src)
}
func (m *DposNomineeRecordsRequest) XXX_Size() int {
	return xxx_messageInfo_DposNomineeRecordsRequest.Size(m)
}
func (m *DposNomineeRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposNomineeRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposNomineeRecordsRequest proto.InternalMessageInfo

func (m *DposNomineeRecordsRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposNomineeRecordsRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DposNomineeRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 候选人被提名记录返回
type DposNomineeRecordsResponse struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Txid                 string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposNomineeRecordsResponse) Reset()         { *m = DposNomineeRecordsResponse{} }
func (m *DposNomineeRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*DposNomineeRecordsResponse) ProtoMessage()    {}
func (*DposNomineeRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{41}
}
func (m *DposNomineeRecordsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposNomineeRecordsResponse.Unmarshal(m, b)
}
func (m *DposNomineeRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposNomineeRecordsResponse.Marshal(b, m, deterministic)
}
func (dst *DposNomineeRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposNomineeRecordsResponse.Merge(dst, src)
}
func (m *DposNomineeRecordsResponse) XXX_Size() int {
	return xxx_messageInfo_DposNomineeRecordsResponse.Size(m)
}
func (m *DposNomineeRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposNomineeRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposNomineeRecordsResponse proto.InternalMessageInfo

func (m *DposNomineeRecordsResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposNomineeRecordsResponse) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// 选民投票记录请求
type DposVoteRecordsRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposVoteRecordsRequest) Reset()         { *m = DposVoteRecordsRequest{} }
func (m *DposVoteRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*DposVoteRecordsRequest) ProtoMessage()    {}
func (*DposVoteRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{42}
}
func (m *DposVoteRecordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposVoteRecordsRequest.Unmarshal(m, b)
}
func (m *DposVoteRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposVoteRecordsRequest.Marshal(b, m, deterministic)
}
func (dst *DposVoteRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposVoteRecordsRequest.Merge(dst, src)
}
func (m *DposVoteRecordsRequest) XXX_Size() int {
	return xxx_messageInfo_DposVoteRecordsRequest.Size(m)
}
func (m *DposVoteRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposVoteRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposVoteRecordsRequest proto.InternalMessageInfo

func (m *DposVoteRecordsRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposVoteRecordsRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DposVoteRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 选民投票记录
type VoteRecord struct {
	Candidate            string   `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Txid                 string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRecord) Reset()         { *m = VoteRecord{} }
func (m *VoteRecord) String() string { return proto.CompactTextString(m) }
func (*VoteRecord) ProtoMessage()    {}
func (*VoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{43}
}
func (m *VoteRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRecord.Unmarshal(m, b)
}
func (m *VoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRecord.Marshal(b, m, deterministic)
}
func (dst *VoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRecord.Merge(dst, src)
}
func (m *VoteRecord) XXX_Size() int {
	return xxx_messageInfo_VoteRecord.Size(m)
}
func (m *VoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRecord proto.InternalMessageInfo

func (m *VoteRecord) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *VoteRecord) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// 选民投票记录返回
type DposVoteRecordsResponse struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 选民投票txid记录
	VoteTxidRecords      []*VoteRecord `protobuf:"bytes,2,rep,name=voteTxidRecords,proto3" json:"voteTxidRecords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DposVoteRecordsResponse) Reset()         { *m = DposVoteRecordsResponse{} }
func (m *DposVoteRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*DposVoteRecordsResponse) ProtoMessage()    {}
func (*DposVoteRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{44}
}
func (m *DposVoteRecordsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposVoteRecordsResponse.Unmarshal(m, b)
}
func (m *DposVoteRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposVoteRecordsResponse.Marshal(b, m, deterministic)
}
func (dst *DposVoteRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposVoteRecordsResponse.Merge(dst, src)
}
func (m *DposVoteRecordsResponse) XXX_Size() int {
	return xxx_messageInfo_DposVoteRecordsResponse.Size(m)
}
func (m *DposVoteRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposVoteRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposVoteRecordsResponse proto.InternalMessageInfo

func (m *DposVoteRecordsResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposVoteRecordsResponse) GetVoteTxidRecords() []*VoteRecord {
	if m != nil {
		return m.VoteTxidRecords
	}
	return nil
}

// 候选人被投票记录请求
type DposVotedRecordsRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposVotedRecordsRequest) Reset()         { *m = DposVotedRecordsRequest{} }
func (m *DposVotedRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*DposVotedRecordsRequest) ProtoMessage()    {}
func (*DposVotedRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{45}
}
func (m *DposVotedRecordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposVotedRecordsRequest.Unmarshal(m, b)
}
func (m *DposVotedRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposVotedRecordsRequest.Marshal(b, m, deterministic)
}
func (dst *DposVotedRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposVotedRecordsRequest.Merge(dst, src)
}
func (m *DposVotedRecordsRequest) XXX_Size() int {
	return xxx_messageInfo_DposVotedRecordsRequest.Size(m)
}
func (m *DposVotedRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposVotedRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposVotedRecordsRequest proto.InternalMessageInfo

func (m *DposVotedRecordsRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposVotedRecordsRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DposVotedRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 候选人被投票记录
type VotedRecord struct {
	Voter                string   `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Txid                 string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VotedRecord) Reset()         { *m = VotedRecord{} }
func (m *VotedRecord) String() string { return proto.CompactTextString(m) }
func (*VotedRecord) ProtoMessage()    {}
func (*VotedRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{46}
}
func (m *VotedRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VotedRecord.Unmarshal(m, b)
}
func (m *VotedRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VotedRecord.Marshal(b, m, deterministic)
}
func (dst *VotedRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotedRecord.Merge(dst, src)
}
func (m *VotedRecord) XXX_Size() int {
	return xxx_messageInfo_VotedRecord.Size(m)
}
func (m *VotedRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VotedRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VotedRecord proto.InternalMessageInfo

func (m *VotedRecord) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *VotedRecord) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// 候选人被投票记录返回
type DposVotedRecordsResponse struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 候选人被投票的txid记录
	VotedTxidRecords     []*VotedRecord `protobuf:"bytes,2,rep,name=votedTxidRecords,proto3" json:"votedTxidRecords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DposVotedRecordsResponse) Reset()         { *m = DposVotedRecordsResponse{} }
func (m *DposVotedRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*DposVotedRecordsResponse) ProtoMessage()    {}
func (*DposVotedRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{47}
}
func (m *DposVotedRecordsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposVotedRecordsResponse.Unmarshal(m, b)
}
func (m *DposVotedRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposVotedRecordsResponse.Marshal(b, m, deterministic)
}
func (dst *DposVotedRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposVotedRecordsResponse.Merge(dst, src)
}
func (m *DposVotedRecordsResponse) XXX_Size() int {
	return xxx_messageInfo_DposVotedRecordsResponse.Size(m)
}
func (m *DposVotedRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposVotedRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposVotedRecordsResponse proto.InternalMessageInfo

func (m *DposVotedRecordsResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposVotedRecordsResponse) GetVotedTxidRecords() []*VotedRecord {
	if m != nil {
		return m.VotedTxidRecords
	}
	return nil
}

// 查询检票结果记录请求
type DposCheckResultsRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Term                 int64    `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposCheckResultsRequest) Reset()         { *m = DposCheckResultsRequest{} }
func (m *DposCheckResultsRequest) String() string { return proto.CompactTextString(m) }
func (*DposCheckResultsRequest) ProtoMessage()    {}
func (*DposCheckResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{48}
}
func (m *DposCheckResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposCheckResultsRequest.Unmarshal(m, b)
}
func (m *DposCheckResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposCheckResultsRequest.Marshal(b, m, deterministic)
}
func (dst *DposCheckResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposCheckResultsRequest.Merge(dst, src)
}
func (m *DposCheckResultsRequest) XXX_Size() int {
	return xxx_messageInfo_DposCheckResultsRequest.Size(m)
}
func (m *DposCheckResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DposCheckResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DposCheckResultsRequest proto.InternalMessageInfo

func (m *DposCheckResultsRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposCheckResultsRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *DposCheckResultsRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// 查询检票结果记录返回
type DposCheckResultsResponse struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term                 int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	CheckResult          []string `protobuf:"bytes,3,rep,name=checkResult,proto3" json:"checkResult,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DposCheckResultsResponse) Reset()         { *m = DposCheckResultsResponse{} }
func (m *DposCheckResultsResponse) String() string { return proto.CompactTextString(m) }
func (*DposCheckResultsResponse) ProtoMessage()    {}
func (*DposCheckResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{49}
}
func (m *DposCheckResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DposCheckResultsResponse.Unmarshal(m, b)
}
func (m *DposCheckResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DposCheckResultsResponse.Marshal(b, m, deterministic)
}
func (dst *DposCheckResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DposCheckResultsResponse.Merge(dst, src)
}
func (m *DposCheckResultsResponse) XXX_Size() int {
	return xxx_messageInfo_DposCheckResultsResponse.Size(m)
}
func (m *DposCheckResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DposCheckResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DposCheckResultsResponse proto.InternalMessageInfo

func (m *DposCheckResultsResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DposCheckResultsResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *DposCheckResultsResponse) GetCheckResult() []string {
	if m != nil {
		return m.CheckResult
	}
	return nil
}

type InvokeRPCRequest struct {
	Header               *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string           `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Requests             []*InvokeRequest `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
	Initiator            string           `protobuf:"bytes,4,opt,name=initiator,proto3" json:"initiator,omitempty"`
	AuthRequire          []string         `protobuf:"bytes,5,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InvokeRPCRequest) Reset()         { *m = InvokeRPCRequest{} }
func (m *InvokeRPCRequest) String() string { return proto.CompactTextString(m) }
func (*InvokeRPCRequest) ProtoMessage()    {}
func (*InvokeRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{50}
}
func (m *InvokeRPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeRPCRequest.Unmarshal(m, b)
}
func (m *InvokeRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeRPCRequest.Marshal(b, m, deterministic)
}
func (dst *InvokeRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRPCRequest.Merge(dst, src)
}
func (m *InvokeRPCRequest) XXX_Size() int {
	return xxx_messageInfo_InvokeRPCRequest.Size(m)
}
func (m *InvokeRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRPCRequest proto.InternalMessageInfo

func (m *InvokeRPCRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InvokeRPCRequest) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *InvokeRPCRequest) GetRequests() []*InvokeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *InvokeRPCRequest) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *InvokeRPCRequest) GetAuthRequire() []string {
	if m != nil {
		return m.AuthRequire
	}
	return nil
}

type InvokeRPCResponse struct {
	Header               *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string          `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Response             *InvokeResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InvokeRPCResponse) Reset()         { *m = InvokeRPCResponse{} }
func (m *InvokeRPCResponse) String() string { return proto.CompactTextString(m) }
func (*InvokeRPCResponse) ProtoMessage()    {}
func (*InvokeRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{51}
}
func (m *InvokeRPCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeRPCResponse.Unmarshal(m, b)
}
func (m *InvokeRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeRPCResponse.Marshal(b, m, deterministic)
}
func (dst *InvokeRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRPCResponse.Merge(dst, src)
}
func (m *InvokeRPCResponse) XXX_Size() int {
	return xxx_messageInfo_InvokeRPCResponse.Size(m)
}
func (m *InvokeRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRPCResponse proto.InternalMessageInfo

func (m *InvokeRPCResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InvokeRPCResponse) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *InvokeRPCResponse) GetResponse() *InvokeResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// 预执行的请求结构
type InvokeRequest struct {
	ModuleName           string            `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractName         string            `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	MethodName           string            `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Args                 map[string][]byte `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InvokeRequest) Reset()         { *m = InvokeRequest{} }
func (m *InvokeRequest) String() string { return proto.CompactTextString(m) }
func (*InvokeRequest) ProtoMessage()    {}
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{52}
}
func (m *InvokeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeRequest.Unmarshal(m, b)
}
func (m *InvokeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeRequest.Marshal(b, m, deterministic)
}
func (dst *InvokeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRequest.Merge(dst, src)
}
func (m *InvokeRequest) XXX_Size() int {
	return xxx_messageInfo_InvokeRequest.Size(m)
}
func (m *InvokeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRequest proto.InternalMessageInfo

func (m *InvokeRequest) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *InvokeRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *InvokeRequest) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *InvokeRequest) GetArgs() map[string][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

// 预执行的返回结构
type InvokeResponse struct {
	Inputs               []*TxInputExt    `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*TxOutputExt   `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Response             [][]byte         `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty"`
	GasUsed              int64            `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Requests             []*InvokeRequest `protobuf:"bytes,5,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InvokeResponse) Reset()         { *m = InvokeResponse{} }
func (m *InvokeResponse) String() string { return proto.CompactTextString(m) }
func (*InvokeResponse) ProtoMessage()    {}
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{53}
}
func (m *InvokeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeResponse.Unmarshal(m, b)
}
func (m *InvokeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeResponse.Marshal(b, m, deterministic)
}
func (dst *InvokeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeResponse.Merge(dst, src)
}
func (m *InvokeResponse) XXX_Size() int {
	return xxx_messageInfo_InvokeResponse.Size(m)
}
func (m *InvokeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeResponse proto.InternalMessageInfo

func (m *InvokeResponse) GetInputs() []*TxInputExt {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *InvokeResponse) GetOutputs() []*TxOutputExt {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *InvokeResponse) GetResponse() [][]byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *InvokeResponse) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *InvokeResponse) GetRequests() []*InvokeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

//扩展输入
type TxInputExt struct {
	Bucket               string   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	RefTxid              []byte   `protobuf:"bytes,3,opt,name=ref_txid,json=refTxid,proto3" json:"ref_txid,omitempty"`
	RefOffset            int32    `protobuf:"varint,4,opt,name=ref_offset,json=refOffset,proto3" json:"ref_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxInputExt) Reset()         { *m = TxInputExt{} }
func (m *TxInputExt) String() string { return proto.CompactTextString(m) }
func (*TxInputExt) ProtoMessage()    {}
func (*TxInputExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{54}
}
func (m *TxInputExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxInputExt.Unmarshal(m, b)
}
func (m *TxInputExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxInputExt.Marshal(b, m, deterministic)
}
func (dst *TxInputExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInputExt.Merge(dst, src)
}
func (m *TxInputExt) XXX_Size() int {
	return xxx_messageInfo_TxInputExt.Size(m)
}
func (m *TxInputExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInputExt.DiscardUnknown(m)
}

var xxx_messageInfo_TxInputExt proto.InternalMessageInfo

func (m *TxInputExt) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *TxInputExt) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TxInputExt) GetRefTxid() []byte {
	if m != nil {
		return m.RefTxid
	}
	return nil
}

func (m *TxInputExt) GetRefOffset() int32 {
	if m != nil {
		return m.RefOffset
	}
	return 0
}

// 扩展输出
type TxOutputExt struct {
	Bucket               string   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxOutputExt) Reset()         { *m = TxOutputExt{} }
func (m *TxOutputExt) String() string { return proto.CompactTextString(m) }
func (*TxOutputExt) ProtoMessage()    {}
func (*TxOutputExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{55}
}
func (m *TxOutputExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxOutputExt.Unmarshal(m, b)
}
func (m *TxOutputExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxOutputExt.Marshal(b, m, deterministic)
}
func (dst *TxOutputExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutputExt.Merge(dst, src)
}
func (m *TxOutputExt) XXX_Size() int {
	return xxx_messageInfo_TxOutputExt.Size(m)
}
func (m *TxOutputExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutputExt.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutputExt proto.InternalMessageInfo

func (m *TxOutputExt) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *TxOutputExt) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TxOutputExt) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// 签名详情
type SignatureInfo struct {
	PublicKey            string   `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Sign                 []byte   `protobuf:"bytes,2,opt,name=Sign,proto3" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignatureInfo) Reset()         { *m = SignatureInfo{} }
func (m *SignatureInfo) String() string { return proto.CompactTextString(m) }
func (*SignatureInfo) ProtoMessage()    {}
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{56}
}
func (m *SignatureInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureInfo.Unmarshal(m, b)
}
func (m *SignatureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureInfo.Marshal(b, m, deterministic)
}
func (dst *SignatureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureInfo.Merge(dst, src)
}
func (m *SignatureInfo) XXX_Size() int {
	return xxx_messageInfo_SignatureInfo.Size(m)
}
func (m *SignatureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureInfo proto.InternalMessageInfo

func (m *SignatureInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SignatureInfo) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type PermissionModel struct {
	Rule                 PermissionRule `protobuf:"varint,1,opt,name=rule,proto3,enum=pb.PermissionRule" json:"rule,omitempty"`
	AcceptValue          float64        `protobuf:"fixed64,2,opt,name=acceptValue,proto3" json:"acceptValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PermissionModel) Reset()         { *m = PermissionModel{} }
func (m *PermissionModel) String() string { return proto.CompactTextString(m) }
func (*PermissionModel) ProtoMessage()    {}
func (*PermissionModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{57}
}
func (m *PermissionModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionModel.Unmarshal(m, b)
}
func (m *PermissionModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionModel.Marshal(b, m, deterministic)
}
func (dst *PermissionModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionModel.Merge(dst, src)
}
func (m *PermissionModel) XXX_Size() int {
	return xxx_messageInfo_PermissionModel.Size(m)
}
func (m *PermissionModel) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionModel.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionModel proto.InternalMessageInfo

func (m *PermissionModel) GetRule() PermissionRule {
	if m != nil {
		return m.Rule
	}
	return PermissionRule_NULL
}

func (m *PermissionModel) GetAcceptValue() float64 {
	if m != nil {
		return m.AcceptValue
	}
	return 0
}

// AK集的表示方法
type AkSet struct {
	Aks                  []string `protobuf:"bytes,1,rep,name=aks,proto3" json:"aks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AkSet) Reset()         { *m = AkSet{} }
func (m *AkSet) String() string { return proto.CompactTextString(m) }
func (*AkSet) ProtoMessage()    {}
func (*AkSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{58}
}
func (m *AkSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AkSet.Unmarshal(m, b)
}
func (m *AkSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AkSet.Marshal(b, m, deterministic)
}
func (dst *AkSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AkSet.Merge(dst, src)
}
func (m *AkSet) XXX_Size() int {
	return xxx_messageInfo_AkSet.Size(m)
}
func (m *AkSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AkSet.DiscardUnknown(m)
}

var xxx_messageInfo_AkSet proto.InternalMessageInfo

func (m *AkSet) GetAks() []string {
	if m != nil {
		return m.Aks
	}
	return nil
}

type AkSets struct {
	Sets                 map[string]*AkSet `protobuf:"bytes,1,rep,name=sets,proto3" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Expression           string            `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AkSets) Reset()         { *m = AkSets{} }
func (m *AkSets) String() string { return proto.CompactTextString(m) }
func (*AkSets) ProtoMessage()    {}
func (*AkSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{59}
}
func (m *AkSets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AkSets.Unmarshal(m, b)
}
func (m *AkSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AkSets.Marshal(b, m, deterministic)
}
func (dst *AkSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AkSets.Merge(dst, src)
}
func (m *AkSets) XXX_Size() int {
	return xxx_messageInfo_AkSets.Size(m)
}
func (m *AkSets) XXX_DiscardUnknown() {
	xxx_messageInfo_AkSets.DiscardUnknown(m)
}

var xxx_messageInfo_AkSets proto.InternalMessageInfo

func (m *AkSets) GetSets() map[string]*AkSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

func (m *AkSets) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

// Acl实际使用的结构
type Acl struct {
	Pm                   *PermissionModel   `protobuf:"bytes,1,opt,name=pm,proto3" json:"pm,omitempty"`
	AksWeight            map[string]float64 `protobuf:"bytes,2,rep,name=aksWeight,proto3" json:"aksWeight,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	AkSets               *AkSets            `protobuf:"bytes,3,opt,name=akSets,proto3" json:"akSets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Acl) Reset()         { *m = Acl{} }
func (m *Acl) String() string { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()    {}
func (*Acl) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{60}
}
func (m *Acl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl.Unmarshal(m, b)
}
func (m *Acl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl.Marshal(b, m, deterministic)
}
func (dst *Acl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl.Merge(dst, src)
}
func (m *Acl) XXX_Size() int {
	return xxx_messageInfo_Acl.Size(m)
}
func (m *Acl) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl.DiscardUnknown(m)
}

var xxx_messageInfo_Acl proto.InternalMessageInfo

func (m *Acl) GetPm() *PermissionModel {
	if m != nil {
		return m.Pm
	}
	return nil
}

func (m *Acl) GetAksWeight() map[string]float64 {
	if m != nil {
		return m.AksWeight
	}
	return nil
}

func (m *Acl) GetAkSets() *AkSets {
	if m != nil {
		return m.AkSets
	}
	return nil
}

// 查询Acl
type AclStatus struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname               string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	AccountName          string   `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	ContractName         string   `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`
	MethodName           string   `protobuf:"bytes,5,opt,name=methodName,proto3" json:"methodName,omitempty"`
	Confirmed            bool     `protobuf:"varint,6,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Acl                  *Acl     `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AclStatus) Reset()         { *m = AclStatus{} }
func (m *AclStatus) String() string { return proto.CompactTextString(m) }
func (*AclStatus) ProtoMessage()    {}
func (*AclStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{61}
}
func (m *AclStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclStatus.Unmarshal(m, b)
}
func (m *AclStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclStatus.Marshal(b, m, deterministic)
}
func (dst *AclStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclStatus.Merge(dst, src)
}
func (m *AclStatus) XXX_Size() int {
	return xxx_messageInfo_AclStatus.Size(m)
}
func (m *AclStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AclStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AclStatus proto.InternalMessageInfo

func (m *AclStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AclStatus) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *AclStatus) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AclStatus) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *AclStatus) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *AclStatus) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *AclStatus) GetAcl() *Acl {
	if m != nil {
		return m.Acl
	}
	return nil
}

// Identity authentication request
type IdentityAuth struct {
	Sign                 []byte   `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Pubkey               []byte   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Addr                 string   `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	PeerID               string   `protobuf:"bytes,4,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Timestamp            string   `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityAuth) Reset()         { *m = IdentityAuth{} }
func (m *IdentityAuth) String() string { return proto.CompactTextString(m) }
func (*IdentityAuth) ProtoMessage()    {}
func (*IdentityAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{62}
}
func (m *IdentityAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityAuth.Unmarshal(m, b)
}
func (m *IdentityAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityAuth.Marshal(b, m, deterministic)
}
func (dst *IdentityAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityAuth.Merge(dst, src)
}
func (m *IdentityAuth) XXX_Size() int {
	return xxx_messageInfo_IdentityAuth.Size(m)
}
func (m *IdentityAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityAuth.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityAuth proto.InternalMessageInfo

func (m *IdentityAuth) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *IdentityAuth) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *IdentityAuth) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *IdentityAuth) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *IdentityAuth) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Identity authentication requests
type IdentityAuths struct {
	Auth                 []*IdentityAuth `protobuf:"bytes,1,rep,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IdentityAuths) Reset()         { *m = IdentityAuths{} }
func (m *IdentityAuths) String() string { return proto.CompactTextString(m) }
func (*IdentityAuths) ProtoMessage()    {}
func (*IdentityAuths) Descriptor() ([]byte, []int) {
	return fileDescriptor_xchain_a3e9dc99024c0cb2, []int{63}
}
func (m *IdentityAuths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityAuths.Unmarshal(m, b)
}
func (m *IdentityAuths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityAuths.Marshal(b, m, deterministic)
}
func (dst *IdentityAuths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityAuths.Merge(dst, src)
}
func (m *IdentityAuths) XXX_Size() int {
	return xxx_messageInfo_IdentityAuths.Size(m)
}
func (m *IdentityAuths) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityAuths.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityAuths proto.InternalMessageInfo

func (m *IdentityAuths) GetAuth() []*IdentityAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "pb.Header")
	proto.RegisterType((*TxDataAccount)(nil), "pb.TxDataAccount")
	proto.RegisterType((*TxData)(nil), "pb.TxData")
	proto.RegisterType((*TxStatus)(nil), "pb.TxStatus")
	proto.RegisterType((*BatchTxs)(nil), "pb.BatchTxs")
	proto.RegisterType((*Block)(nil), "pb.Block")
	proto.RegisterType((*BlockID)(nil), "pb.BlockID")
	proto.RegisterType((*CommonReply)(nil), "pb.CommonReply")
	proto.RegisterType((*CommonIn)(nil), "pb.CommonIn")
	proto.RegisterType((*TokenDetail)(nil), "pb.TokenDetail")
	proto.RegisterType((*AddressStatus)(nil), "pb.AddressStatus")
	proto.RegisterType((*TxInput)(nil), "pb.TxInput")
	proto.RegisterType((*TxOutput)(nil), "pb.TxOutput")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*LedgerMeta)(nil), "pb.LedgerMeta")
	proto.RegisterType((*UtxoMeta)(nil), "pb.UtxoMeta")
	proto.RegisterType((*InternalBlock)(nil), "pb.InternalBlock")
	proto.RegisterMapType((map[string]string)(nil), "pb.InternalBlock.FailedTxsEntry")
	proto.RegisterType((*BCStatus)(nil), "pb.BCStatus")
	proto.RegisterType((*BCTipStatus)(nil), "pb.BCTipStatus")
	proto.RegisterType((*BlockChains)(nil), "pb.BlockChains")
	proto.RegisterType((*Speeds)(nil), "pb.Speeds")
	proto.RegisterMapType((map[string]*BCSpeeds)(nil), "pb.Speeds.BcSpeedsEntry")
	proto.RegisterMapType((map[string]float64)(nil), "pb.Speeds.SumSpeedsEntry")
	proto.RegisterType((*BCSpeeds)(nil), "pb.BCSpeeds")
	proto.RegisterMapType((map[string]float64)(nil), "pb.BCSpeeds.BcSpeedEntry")
	proto.RegisterType((*SystemsStatus)(nil), "pb.SystemsStatus")
	proto.RegisterType((*SystemsStatusReply)(nil), "pb.SystemsStatusReply")
	proto.RegisterType((*RawUrl)(nil), "pb.RawUrl")
	proto.RegisterType((*Utxo)(nil), "pb.Utxo")
	proto.RegisterType((*UtxoInput)(nil), "pb.UtxoInput")
	proto.RegisterType((*UtxoOutput)(nil), "pb.UtxoOutput")
	proto.RegisterType((*NativeCodeDesc)(nil), "pb.NativeCodeDesc")
	proto.RegisterType((*WasmCodeDesc)(nil), "pb.WasmCodeDesc")
	proto.RegisterType((*DeployNativeCodeRequest)(nil), "pb.DeployNativeCodeRequest")
	proto.RegisterType((*DeployNativeCodeResponse)(nil), "pb.DeployNativeCodeResponse")
	proto.RegisterType((*NativeCodeStatus)(nil), "pb.NativeCodeStatus")
	proto.RegisterType((*NativeCodeStatusRequest)(nil), "pb.NativeCodeStatusRequest")
	proto.RegisterType((*NativeCodeStatusResponse)(nil), "pb.NativeCodeStatusResponse")
	proto.RegisterType((*DposCandidatesRequest)(nil), "pb.DposCandidatesRequest")
	proto.RegisterType((*DposCandidatesResponse)(nil), "pb.DposCandidatesResponse")
	proto.RegisterType((*DposNominateRecordsRequest)(nil), "pb.DposNominateRecordsRequest")
	proto.RegisterType((*DposNominateInfo)(nil), "pb.DposNominateInfo")
	proto.RegisterType((*DposNominateRecordsResponse)(nil), "pb.DposNominateRecordsResponse")
	proto.RegisterType((*DposNomineeRecordsRequest)(nil), "pb.DposNomineeRecordsRequest")
	proto.RegisterType((*DposNomineeRecordsResponse)(nil), "pb.DposNomineeRecordsResponse")
	proto.RegisterType((*DposVoteRecordsRequest)(nil), "pb.DposVoteRecordsRequest")
	proto.RegisterType((*VoteRecord)(nil), "pb.voteRecord")
	proto.RegisterType((*DposVoteRecordsResponse)(nil), "pb.DposVoteRecordsResponse")
	proto.RegisterType((*DposVotedRecordsRequest)(nil), "pb.DposVotedRecordsRequest")
	proto.RegisterType((*VotedRecord)(nil), "pb.votedRecord")
	proto.RegisterType((*DposVotedRecordsResponse)(nil), "pb.DposVotedRecordsResponse")
	proto.RegisterType((*DposCheckResultsRequest)(nil), "pb.DposCheckResultsRequest")
	proto.RegisterType((*DposCheckResultsResponse)(nil), "pb.DposCheckResultsResponse")
	proto.RegisterType((*InvokeRPCRequest)(nil), "pb.InvokeRPCRequest")
	proto.RegisterType((*InvokeRPCResponse)(nil), "pb.InvokeRPCResponse")
	proto.RegisterType((*InvokeRequest)(nil), "pb.InvokeRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.InvokeRequest.ArgsEntry")
	proto.RegisterType((*InvokeResponse)(nil), "pb.InvokeResponse")
	proto.RegisterType((*TxInputExt)(nil), "pb.TxInputExt")
	proto.RegisterType((*TxOutputExt)(nil), "pb.TxOutputExt")
	proto.RegisterType((*SignatureInfo)(nil), "pb.SignatureInfo")
	proto.RegisterType((*PermissionModel)(nil), "pb.PermissionModel")
	proto.RegisterType((*AkSet)(nil), "pb.AkSet")
	proto.RegisterType((*AkSets)(nil), "pb.AkSets")
	proto.RegisterMapType((map[string]*AkSet)(nil), "pb.AkSets.SetsEntry")
	proto.RegisterType((*Acl)(nil), "pb.Acl")
	proto.RegisterMapType((map[string]float64)(nil), "pb.Acl.AksWeightEntry")
	proto.RegisterType((*AclStatus)(nil), "pb.AclStatus")
}

func init() { proto.RegisterFile("xchain.proto", fileDescriptor_db0991b9525664ca) }

var fileDescriptor_db0991b9525664ca = []byte{
	// 3891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x5d, 0x6f, 0x1b, 0xc7,
	0x76, 0x5e, 0x92, 0xe2, 0xc7, 0xe1, 0x87, 0xa8, 0xb1, 0x2d, 0xaf, 0x28, 0xc5, 0x56, 0x36, 0x69,
	0xae, 0x6e, 0xd2, 0x2b, 0xe3, 0x3a, 0xb7, 0x4d, 0xe0, 0xa6, 0x0e, 0x28, 0x8a, 0xb6, 0x59, 0x53,
	0xa4, 0xb2, 0x5c, 0xca, 0x32, 0x6e, 0x81, 0xed, 0x8a, 0x1c, 0x49, 0x5b, 0x91, 0xbb, 0xcc, 0xee,
	0x50, 0x97, 0xca, 0x2d, 0xfa, 0x71, 0x1f, 0xfb, 0x1a, 0xa0, 0x40, 0x1f, 0x0a, 0x14, 0xfd, 0x1f,
	0xed, 0x43, 0x1f, 0x0a, 0x14, 0xe8, 0x5b, 0xd1, 0xf6, 0xb5, 0x40, 0x8b, 0xfe, 0x83, 0xa2, 0xaf,
	0xc5, 0x99, 0x99, 0xfd, 0x22, 0xa9, 0x58, 0x4a, 0x8c, 0xbc, 0x48, 0x3c, 0x1f, 0x73, 0xe6, 0x7c,
	0xcd, 0xd9, 0x33, 0x67, 0x17, 0x4a, 0xb3, 0xc1, 0xb9, 0x65, 0x3b, 0xbb, 0x13, 0xcf, 0x65, 0x2e,
	0x49, 0x4d, 0x4e, 0x6a, 0x5b, 0x67, 0xae, 0x7b, 0x36, 0xa2, 0x8f, 0xad, 0x89, 0xfd, 0xd8, 0x72,
	0x1c, 0x97, 0x59, 0xcc, 0x76, 0x1d, 0x5f, 0x70, 0x68, 0xa7, 0x90, 0x7d, 0x49, 0xad, 0x21, 0xf5,
	0xc8, 0x3d, 0x58, 0x19, 0xb9, 0x67, 0xf6, 0x50, 0x55, 0xb6, 0x95, 0x9d, 0x82, 0x2e, 0x00, 0xb2,
	0x09, 0x85, 0x53, 0xcf, 0x1d, 0x9b, 0x8e, 0x3b, 0xa4, 0x6a, 0x8a, 0x53, 0xf2, 0x88, 0xe8, 0xb8,
	0x43, 0x4a, 0x7e, 0x0a, 0x2b, 0xd4, 0xf3, 0x5c, 0x4f, 0x4d, 0x6f, 0x2b, 0x3b, 0x95, 0x27, 0x77,
	0x77, 0x27, 0x27, 0xbb, 0xc7, 0x0d, 0xdc, 0xbf, 0x89, 0xe8, 0xa6, 0x33, 0x1d, 0xeb, 0x82, 0x43,
	0x3b, 0x85, 0xb2, 0x31, 0xdb, 0xb7, 0x98, 0x55, 0x1f, 0x0c, 0xdc, 0xa9, 0xc3, 0x88, 0x0a, 0x39,
	0x6b, 0x38, 0xf4, 0xa8, 0xef, 0xcb, 0x0d, 0x03, 0x90, 0xac, 0x43, 0xd6, 0x1a, 0x23, 0x8f, 0xdc,
	0x4f, 0x42, 0xe4, 0x03, 0x28, 0x9f, 0x7a, 0xee, 0x37, 0xd4, 0x31, 0xcf, 0xa9, 0x7d, 0x76, 0xce,
	0xf8, 0xae, 0x69, 0xbd, 0x24, 0x90, 0x2f, 0x39, 0x4e, 0xfb, 0xaf, 0x14, 0x64, 0xc5, 0x46, 0x44,
	0x83, 0xec, 0x39, 0x37, 0x4d, 0x2d, 0x6f, 0x2b, 0x3b, 0xc5, 0x27, 0x80, 0xea, 0x09, 0x63, 0x75,
	0x49, 0x21, 0x04, 0x32, 0x6c, 0x26, 0x6d, 0x2e, 0xe9, 0xfc, 0x37, 0xee, 0x7f, 0x32, 0x70, 0xac,
	0x71, 0x60, 0xaf, 0x84, 0x42, 0x57, 0xa0, 0x9e, 0x7c, 0x6f, 0xe9, 0x8a, 0xfa, 0x70, 0xe8, 0x91,
	0x47, 0x50, 0xe4, 0xc4, 0xc9, 0xf4, 0xe4, 0x82, 0x5e, 0xa9, 0x19, 0x4e, 0x06, 0x44, 0x1d, 0x72,
	0x4c, 0xc8, 0xe0, 0x0f, 0x3c, 0x64, 0x58, 0x89, 0x18, 0x7a, 0x1c, 0x83, 0xe2, 0xa7, 0x3e, 0xf5,
	0x4c, 0xdf, 0x3e, 0x73, 0xd4, 0x0a, 0xd7, 0x27, 0x8f, 0x88, 0x9e, 0x7d, 0xe6, 0x90, 0x4f, 0x20,
	0x67, 0x09, 0xc7, 0xa9, 0xd9, 0xed, 0xf4, 0x4e, 0xf1, 0xc9, 0x1a, 0x1a, 0x93, 0xf0, 0xa8, 0x1e,
	0x70, 0x60, 0x24, 0x1d, 0xd7, 0x19, 0x50, 0x35, 0x2f, 0x22, 0xc9, 0x01, 0xb2, 0x05, 0x05, 0x66,
	0x8f, 0xa9, 0xcf, 0xac, 0xf1, 0x44, 0x2d, 0x70, 0xd7, 0x45, 0x08, 0x74, 0xc4, 0x90, 0xfa, 0x03,
	0xb5, 0x24, 0x1c, 0x81, 0xbf, 0x31, 0x44, 0x97, 0xd4, 0xf3, 0x6d, 0xd7, 0x51, 0x57, 0xb7, 0x95,
	0x9d, 0x15, 0x3d, 0x00, 0xb5, 0x7f, 0x52, 0x20, 0x6f, 0xcc, 0x7a, 0xcc, 0x62, 0x53, 0x3f, 0xe6,
	0x67, 0xe5, 0x5a, 0x3f, 0x5f, 0xe7, 0xd3, 0xc0, 0xff, 0xe9, 0x98, 0xff, 0x7f, 0x06, 0x59, 0x9f,
	0x4b, 0xe6, 0x5e, 0xac, 0x3c, 0xb9, 0xcf, 0x4d, 0xf5, 0x2c, 0xc7, 0xb7, 0x06, 0x98, 0xba, 0x62,
	0x5b, 0x5d, 0x32, 0x91, 0x1a, 0xe4, 0x87, 0xb6, 0xcf, 0x2c, 0x34, 0x78, 0x85, 0x9b, 0x15, 0xc2,
	0xe4, 0x11, 0xa4, 0xd8, 0x4c, 0xcd, 0x71, 0xb5, 0x56, 0xe7, 0xc4, 0xe8, 0x29, 0x36, 0xd3, 0x3a,
	0x90, 0xdf, 0xb3, 0xd8, 0xe0, 0xdc, 0x98, 0xdd, 0xcc, 0x8e, 0x87, 0x90, 0x36, 0x66, 0xbe, 0x9a,
	0xe2, 0x31, 0x28, 0x89, 0x18, 0x48, 0x7d, 0x90, 0xa0, 0xfd, 0xaf, 0x02, 0x2b, 0x7b, 0x23, 0x77,
	0x70, 0xf1, 0x83, 0xbc, 0xa2, 0x42, 0xee, 0x04, 0x85, 0x84, 0x8e, 0x09, 0x40, 0xb2, 0x3b, 0xe7,
	0x9b, 0x75, 0x94, 0xca, 0x37, 0xdc, 0x6d, 0xf2, 0x7f, 0x73, 0xce, 0xf9, 0x09, 0xac, 0xf0, 0xa5,
	0xdc, 0x33, 0x32, 0x6b, 0x5a, 0x0e, 0xa3, 0x9e, 0x63, 0x8d, 0x38, 0xbf, 0x2e, 0xe8, 0xda, 0xef,
	0x43, 0x29, 0x2e, 0x80, 0x14, 0x60, 0xa5, 0xa9, 0xeb, 0x5d, 0xbd, 0x7a, 0x07, 0x7f, 0x1a, 0x7a,
	0xbf, 0xf3, 0xaa, 0xaa, 0x10, 0x80, 0xec, 0x9e, 0x5e, 0xef, 0x34, 0x5e, 0x56, 0x53, 0xa4, 0x08,
	0xb9, 0x4e, 0xb7, 0x79, 0xdc, 0xea, 0x19, 0xd5, 0xb4, 0xf6, 0x1b, 0x05, 0x72, 0x7c, 0x79, 0x6b,
	0x3f, 0x66, 0x79, 0xe6, 0x06, 0x96, 0x2b, 0xd7, 0x59, 0x9e, 0x4a, 0x5a, 0xfe, 0x3e, 0x94, 0x1c,
	0x4a, 0x87, 0xe6, 0xc0, 0x75, 0x18, 0x75, 0xc4, 0xe1, 0xcf, 0xeb, 0x45, 0xc4, 0x35, 0x04, 0x4a,
	0xfb, 0x39, 0x14, 0x1b, 0xee, 0x78, 0xec, 0x3a, 0x3a, 0x9d, 0x8c, 0xae, 0x6e, 0x12, 0x01, 0x6d,
	0x17, 0xf2, 0x62, 0x49, 0xcb, 0xb9, 0x11, 0xff, 0x1f, 0x43, 0xd1, 0x70, 0x2f, 0xa8, 0xb3, 0x4f,
	0x99, 0x65, 0x8f, 0xbe, 0xd3, 0x0c, 0x6b, 0xc4, 0x53, 0x52, 0x44, 0x36, 0x00, 0x6f, 0x53, 0x32,
	0x27, 0x50, 0xae, 0x8b, 0x92, 0x78, 0x8b, 0x83, 0x16, 0x2b, 0xab, 0xa9, 0x64, 0x59, 0x7d, 0x1f,
	0xd2, 0x27, 0x03, 0x5f, 0x4d, 0xf3, 0xd4, 0x15, 0x87, 0x21, 0xb2, 0x44, 0x47, 0x9a, 0xf6, 0x37,
	0x0a, 0xe4, 0x8c, 0x59, 0xcb, 0x99, 0x4c, 0x19, 0xd9, 0x80, 0xbc, 0x47, 0x4f, 0xcd, 0x58, 0x75,
	0xcc, 0x79, 0xf4, 0xd4, 0xc0, 0x03, 0xfa, 0x1e, 0x00, 0x92, 0xdc, 0xd3, 0x53, 0x9f, 0x8a, 0x22,
	0xbd, 0xa2, 0x17, 0x3c, 0x7a, 0xda, 0xe5, 0x88, 0x64, 0x9d, 0x5c, 0x11, 0x85, 0x2c, 0xac, 0x93,
	0x51, 0x71, 0xcf, 0x72, 0xca, 0xb5, 0xc5, 0x3d, 0xb7, 0xa4, 0xb8, 0xff, 0x11, 0x56, 0x9d, 0xee,
	0x94, 0xa1, 0x7e, 0x91, 0x20, 0x25, 0x21, 0xe8, 0x01, 0xe4, 0x98, 0x2b, 0xf6, 0x16, 0x19, 0x94,
	0x65, 0x2e, 0xdf, 0x79, 0x61, 0x87, 0xcc, 0x92, 0x1d, 0xbe, 0x5d, 0x81, 0x62, 0xac, 0x46, 0x2c,
	0x7d, 0x3e, 0x5c, 0x9f, 0xa3, 0x3b, 0x50, 0x60, 0x33, 0xd3, 0x46, 0xff, 0x05, 0x8e, 0x2e, 0x8a,
	0x1a, 0xc1, 0x7d, 0xaa, 0xe7, 0x99, 0xf8, 0xe1, 0x93, 0x4f, 0x00, 0xd8, 0xcc, 0x74, 0xb9, 0x29,
	0x78, 0x96, 0x63, 0xe5, 0x44, 0xd8, 0xa7, 0x17, 0x98, 0xfc, 0xe5, 0x87, 0xb5, 0x39, 0x1b, 0xab,
	0xcd, 0x35, 0xc8, 0x0f, 0x5c, 0xdb, 0x39, 0xb1, 0x7c, 0xca, 0x5d, 0x95, 0xd7, 0x43, 0xf8, 0x7b,
	0xd5, 0xff, 0x58, 0xad, 0x87, 0x44, 0xad, 0xe7, 0x19, 0x35, 0x65, 0xee, 0x19, 0x75, 0xd4, 0x22,
	0xdf, 0x28, 0x00, 0xc9, 0x13, 0x28, 0x87, 0xe6, 0x9a, 0x74, 0xc6, 0xd4, 0x07, 0xdc, 0x8e, 0x4a,
	0xcc, 0xe4, 0xe6, 0x8c, 0xe9, 0xc5, 0xc0, 0xea, 0xe6, 0x8c, 0x91, 0xdf, 0x81, 0x4a, 0x64, 0x38,
	0x5f, 0xa4, 0xc6, 0x12, 0x52, 0x9a, 0x8c, 0xab, 0x4a, 0xa1, 0xfd, 0xb8, 0xec, 0x19, 0xac, 0xe1,
	0xc1, 0xf7, 0xac, 0x01, 0x33, 0x3d, 0xfa, 0xf5, 0x94, 0xfa, 0xcc, 0x57, 0x37, 0xa2, 0x27, 0x61,
	0xcb, 0xb9, 0x74, 0x2f, 0xa8, 0x2e, 0x28, 0x7a, 0x35, 0xe0, 0x95, 0x08, 0x1f, 0x8d, 0xb7, 0x1d,
	0x9b, 0xd9, 0x16, 0x73, 0x3d, 0xb5, 0xc6, 0xdd, 0x12, 0x21, 0xb0, 0xb6, 0x58, 0x53, 0x76, 0xce,
	0x25, 0xdb, 0x1e, 0x55, 0x37, 0xb7, 0xd3, 0x3b, 0x05, 0xbd, 0x88, 0x38, 0x5d, 0xa0, 0xc8, 0x53,
	0x58, 0x0d, 0xf9, 0xf9, 0x23, 0xda, 0x57, 0xb7, 0xa2, 0xed, 0xf1, 0x19, 0x6d, 0xb1, 0xa9, 0x47,
	0x5b, 0xce, 0xa9, 0xab, 0x57, 0x42, 0x4e, 0xc4, 0xfb, 0xe4, 0x4b, 0x20, 0x71, 0xf1, 0x72, 0xf9,
	0x7b, 0xd7, 0x2d, 0xaf, 0xc6, 0xf6, 0xe5, 0x02, 0xb4, 0xbf, 0x56, 0x00, 0xda, 0x74, 0x78, 0x46,
	0xbd, 0x03, 0xca, 0x2c, 0x54, 0xd7, 0x73, 0x5d, 0x66, 0x06, 0x59, 0x28, 0x92, 0xb3, 0x88, 0xb8,
	0x3d, 0x99, 0x89, 0x8f, 0xa0, 0xc8, 0xec, 0x89, 0x99, 0xcc, 0x53, 0x60, 0xf6, 0x64, 0x2f, 0x2a,
	0xa7, 0xcc, 0x9b, 0x3a, 0x17, 0xc9, 0x5e, 0xaa, 0xc8, 0x71, 0xe2, 0x2c, 0x90, 0x0f, 0xa1, 0x32,
	0xb6, 0x66, 0x42, 0x86, 0xe9, 0xdb, 0xdf, 0xd0, 0xe0, 0xc4, 0x8c, 0xad, 0x99, 0x78, 0x54, 0xd8,
	0xdf, 0x50, 0x8d, 0x41, 0xbe, 0xcf, 0x66, 0x2e, 0x57, 0xec, 0xb7, 0xa0, 0x32, 0xb2, 0x18, 0xf5,
	0xe7, 0x55, 0x2b, 0x0b, 0x6c, 0xb0, 0xb7, 0x06, 0x65, 0x2e, 0xf3, 0x82, 0x5e, 0x99, 0x23, 0xdb,
	0x67, 0xfc, 0x71, 0x5a, 0xd0, 0x8b, 0x88, 0x7c, 0x45, 0xaf, 0xda, 0xb6, 0xcf, 0xb0, 0xc6, 0x4c,
	0xd9, 0xcc, 0x35, 0x99, 0xcb, 0xac, 0x91, 0xec, 0xb6, 0x0a, 0x88, 0x31, 0x10, 0xa1, 0xfd, 0x5f,
	0x06, 0xca, 0x89, 0xe7, 0x58, 0x3c, 0x81, 0x95, 0x64, 0x02, 0x87, 0xc7, 0x41, 0x54, 0x2a, 0x79,
	0x1c, 0xae, 0x7f, 0xc6, 0x6e, 0x40, 0x7e, 0xe2, 0x51, 0xf3, 0xdc, 0xf2, 0xcf, 0xb9, 0xc5, 0x25,
	0x3d, 0x37, 0xf1, 0xe8, 0x4b, 0xcb, 0x3f, 0xc7, 0x53, 0x37, 0xf1, 0xdc, 0x89, 0xeb, 0xd3, 0xb0,
	0xb2, 0x05, 0x30, 0x9e, 0x52, 0xde, 0xba, 0xc9, 0x53, 0x8a, 0xbf, 0xb1, 0x48, 0xc9, 0x86, 0x30,
	0x27, 0x6a, 0xd1, 0x24, 0x6c, 0x06, 0xc7, 0xd4, 0xbb, 0x18, 0x51, 0x13, 0x83, 0xc6, 0xcf, 0x69,
	0x49, 0x07, 0x81, 0xd2, 0x5d, 0x97, 0x57, 0x37, 0x19, 0x18, 0x71, 0x52, 0x25, 0x94, 0x3c, 0xc4,
	0x30, 0x7f, 0x88, 0x3f, 0xc5, 0xa0, 0x86, 0xc5, 0xcb, 0x57, 0x8b, 0xb1, 0xa3, 0x15, 0x6b, 0x7c,
	0x12, 0x4c, 0x68, 0x2e, 0x9b, 0x99, 0xa2, 0xb7, 0x2c, 0x09, 0xcf, 0xb1, 0x59, 0x83, 0xd7, 0xd2,
	0x48, 0x4d, 0xe6, 0x51, 0xaa, 0x96, 0xb7, 0xd3, 0x91, 0x9a, 0x86, 0x47, 0xb9, 0x13, 0x07, 0x53,
	0xcf, 0xa0, 0xde, 0x58, 0xad, 0x72, 0x65, 0x02, 0x90, 0x6c, 0x43, 0x71, 0x30, 0xf5, 0x78, 0x68,
	0x3a, 0xd3, 0xb1, 0xba, 0x26, 0xd2, 0x2b, 0x86, 0x22, 0x5f, 0x02, 0x9c, 0x5a, 0xf6, 0x88, 0x0e,
	0x4d, 0x36, 0xf3, 0x55, 0xc2, 0x55, 0xdd, 0x5e, 0xe8, 0x4f, 0x76, 0x9f, 0x73, 0x1e, 0x63, 0xe6,
	0x37, 0x1d, 0xe6, 0x5d, 0xe9, 0x85, 0xd3, 0x00, 0x46, 0xc5, 0x6d, 0xc7, 0xe4, 0x19, 0xcb, 0xfb,
	0xe5, 0xbc, 0x9e, 0xb3, 0x1d, 0x03, 0x41, 0x7c, 0x04, 0x39, 0x74, 0xc6, 0x44, 0x0c, 0x57, 0x45,
	0xa0, 0x10, 0x81, 0x41, 0xac, 0x7d, 0x01, 0x95, 0xa4, 0x50, 0x52, 0x85, 0x34, 0xc6, 0x48, 0x3c,
	0xc3, 0xf1, 0x27, 0xe6, 0xcc, 0xa5, 0x35, 0x9a, 0x06, 0x8f, 0x6f, 0x01, 0x3c, 0x4d, 0x7d, 0xae,
	0x68, 0x7f, 0xaf, 0x40, 0x7e, 0xaf, 0xf1, 0x0e, 0x5a, 0x5f, 0x0d, 0x32, 0x63, 0xca, 0x2c, 0x9e,
	0x7d, 0xb2, 0x68, 0x46, 0x67, 0x5c, 0xe7, 0xb4, 0xa8, 0x7d, 0xcb, 0x7c, 0x77, 0xfb, 0x46, 0x76,
	0x20, 0x3f, 0x95, 0xa7, 0x50, 0xb6, 0x7a, 0xfc, 0x69, 0x12, 0x9c, 0x4c, 0x3d, 0xa4, 0x6a, 0x3d,
	0x28, 0xee, 0x35, 0x0c, 0x7b, 0x72, 0x0b, 0x0b, 0xb6, 0xa1, 0x64, 0xfb, 0xc2, 0xd1, 0x26, 0xb3,
	0x27, 0xdc, 0x8e, 0xbc, 0x0e, 0xb6, 0xcf, 0x9d, 0x6d, 0xd8, 0x13, 0x2e, 0x14, 0xf5, 0xe0, 0x8d,
	0xcc, 0x4d, 0x85, 0x16, 0xb9, 0xea, 0xfc, 0xba, 0xea, 0x07, 0x25, 0x20, 0x86, 0xd2, 0xfe, 0x3c,
	0x05, 0xd9, 0xde, 0x84, 0xd2, 0xa1, 0x4f, 0x3e, 0x83, 0x42, 0x6f, 0x3a, 0x16, 0x80, 0xaa, 0xf0,
	0x54, 0xd9, 0xe0, 0x85, 0x93, 0x63, 0x76, 0x43, 0x9a, 0xcc, 0x91, 0x10, 0x26, 0xbf, 0x80, 0xfc,
	0xde, 0x40, 0xae, 0x13, 0x4d, 0xbb, 0x1a, 0x5b, 0x17, 0x90, 0xc4, 0xb2, 0x90, 0x13, 0x33, 0x24,
	0x29, 0xf2, 0x6d, 0x19, 0xa2, 0xc4, 0x32, 0xa4, 0xd6, 0x82, 0x72, 0x42, 0xf0, 0x92, 0xc5, 0x5a,
	0x7c, 0xb1, 0x8c, 0xd5, 0x5e, 0x43, 0xac, 0x89, 0x27, 0xdb, 0xaf, 0x79, 0xae, 0x09, 0x53, 0x3e,
	0x85, 0x9c, 0x14, 0x1b, 0xf7, 0x40, 0x40, 0x0e, 0x6c, 0x11, 0xa6, 0x04, 0x9c, 0xb5, 0xa7, 0x50,
	0x8a, 0x13, 0x6e, 0x63, 0x87, 0xf6, 0xb7, 0x0a, 0x94, 0x7b, 0x57, 0x3e, 0xa3, 0xe3, 0xdb, 0x34,
	0xa0, 0x9f, 0x00, 0x9c, 0x0c, 0x7c, 0x53, 0xde, 0x52, 0x62, 0x17, 0xa5, 0xe0, 0xd0, 0xe8, 0x85,
	0x93, 0x41, 0x4c, 0xa0, 0x2f, 0x82, 0x93, 0x8e, 0x04, 0x4a, 0x37, 0x48, 0x0a, 0xaf, 0xb9, 0x94,
	0x7a, 0x7d, 0x6f, 0x24, 0x1a, 0xa5, 0x82, 0x1e, 0xc2, 0x9a, 0x07, 0x24, 0xa1, 0xe1, 0x8d, 0x1b,
	0x7f, 0xf2, 0x39, 0x54, 0x7c, 0xb1, 0x32, 0x52, 0x35, 0x3c, 0x62, 0x49, 0x99, 0x65, 0x3f, 0x0e,
	0x6a, 0xfb, 0x90, 0xd5, 0xad, 0x5f, 0xf5, 0xbd, 0xd1, 0x4d, 0x4f, 0xbf, 0xc7, 0xb9, 0x83, 0xd3,
	0x2f, 0x20, 0xed, 0x2f, 0x15, 0xc8, 0xe0, 0xe9, 0xbc, 0xb6, 0x8f, 0x5d, 0x07, 0xd9, 0xb8, 0xce,
	0xb5, 0xb1, 0x35, 0xc8, 0x33, 0x57, 0xcc, 0x14, 0xe4, 0x83, 0x2b, 0x84, 0xb1, 0x1c, 0xcb, 0x1e,
	0x3d, 0x78, 0x70, 0x05, 0x2d, 0xfb, 0x16, 0x44, 0x0d, 0x3a, 0x2f, 0x10, 0xf1, 0x8e, 0x5d, 0xfb,
	0x37, 0x05, 0x0a, 0xa8, 0x8c, 0xe8, 0xfc, 0x7f, 0xe0, 0xcd, 0x35, 0xb8, 0x7e, 0xa4, 0x93, 0xd7,
	0x8f, 0x2d, 0x28, 0x4c, 0xa6, 0x27, 0x23, 0x7b, 0x10, 0x8d, 0x47, 0x22, 0x04, 0x7f, 0xae, 0xe1,
	0x83, 0xbd, 0x83, 0xe9, 0x2d, 0x66, 0x23, 0x11, 0x02, 0x6d, 0x0e, 0x26, 0x21, 0xf2, 0x41, 0x1a,
	0x4d, 0x46, 0x6a, 0x90, 0xc7, 0x3b, 0x60, 0x1b, 0xab, 0x64, 0x5e, 0x34, 0xc2, 0x01, 0xac, 0xfd,
	0x09, 0x00, 0x9a, 0x25, 0x6f, 0x0c, 0x37, 0xb1, 0xeb, 0x43, 0x51, 0x47, 0xdb, 0x41, 0x57, 0x52,
	0x7c, 0x92, 0x0f, 0xea, 0xa8, 0x1e, 0x52, 0xc8, 0x87, 0x50, 0xe6, 0xca, 0xf5, 0xe8, 0x88, 0x0e,
	0x18, 0x1d, 0x4a, 0x5b, 0x93, 0x48, 0xed, 0xef, 0x14, 0xa8, 0x74, 0x2c, 0x66, 0x5f, 0xd2, 0x86,
	0x3b, 0xa4, 0xfb, 0xd8, 0xb5, 0x13, 0xc8, 0xc4, 0x6e, 0x8b, 0x99, 0xc0, 0x65, 0x41, 0xe3, 0x22,
	0x6f, 0x6c, 0x41, 0xe3, 0xb2, 0x0e, 0xd9, 0xa1, 0x7d, 0x46, 0x7d, 0x26, 0x03, 0x2d, 0x21, 0x2c,
	0x9d, 0x13, 0x8f, 0x5e, 0x1e, 0xc9, 0x55, 0xc2, 0x99, 0x71, 0x14, 0xd9, 0x81, 0xd5, 0xd9, 0x74,
	0x42, 0xbd, 0xfa, 0xc4, 0x0e, 0xb8, 0x44, 0xd0, 0xe7, 0xd1, 0xda, 0x1f, 0x42, 0xe9, 0xb5, 0xe5,
	0x8f, 0x43, 0x0d, 0x31, 0x85, 0xa6, 0x0e, 0xb6, 0x14, 0xc1, 0x58, 0x4e, 0x82, 0xe2, 0xc6, 0x31,
	0x9e, 0xd8, 0x23, 0xea, 0x05, 0x83, 0xc0, 0x00, 0xbe, 0x4e, 0x53, 0xed, 0x3f, 0x14, 0x78, 0xb0,
	0x4f, 0x27, 0x23, 0xf7, 0x2a, 0x72, 0x84, 0xec, 0xc9, 0x7f, 0x50, 0x9a, 0x7d, 0x24, 0x6f, 0x44,
	0xa2, 0x6a, 0x10, 0x5c, 0x99, 0xf4, 0xb4, 0xbc, 0x25, 0x11, 0xc8, 0x0c, 0xdc, 0x21, 0x95, 0xa7,
	0x81, 0xff, 0x8e, 0xa7, 0xe8, 0xca, 0xc2, 0xe0, 0x51, 0x76, 0x6b, 0xd9, 0x44, 0xb7, 0x16, 0x74,
	0x76, 0xb9, 0xa8, 0xb3, 0xd3, 0x9e, 0x81, 0xba, 0x68, 0x98, 0x3f, 0x71, 0x1d, 0x9f, 0xde, 0x68,
	0x90, 0x30, 0x82, 0x6a, 0xb4, 0x52, 0x56, 0xc3, 0xc0, 0x2a, 0xe5, 0x2d, 0x56, 0xad, 0x87, 0x43,
	0x20, 0xd1, 0xd1, 0x06, 0xc3, 0x1e, 0x15, 0x72, 0xe7, 0xd4, 0x1a, 0xb1, 0xf3, 0x2b, 0x39, 0x1d,
	0x09, 0x40, 0xad, 0x0f, 0x0f, 0xe6, 0x77, 0x7b, 0x07, 0x61, 0xd0, 0x46, 0xa0, 0x2e, 0x8a, 0xbd,
	0xb9, 0x13, 0xc8, 0x6f, 0xc7, 0x0c, 0xc1, 0xb3, 0x76, 0x2f, 0x69, 0x72, 0x72, 0x96, 0xa5, 0xf5,
	0xe0, 0xfe, 0xfe, 0xc4, 0xf5, 0x1b, 0x96, 0x33, 0xb4, 0x87, 0x78, 0xa1, 0x78, 0x17, 0x26, 0x0c,
	0x61, 0x7d, 0x5e, 0xe8, 0x2d, 0x0c, 0xf8, 0x08, 0x2a, 0x83, 0x70, 0x25, 0x5e, 0xde, 0x64, 0x1f,
	0x33, 0x87, 0xd5, 0x3c, 0xa8, 0xe1, 0x2e, 0x1d, 0x77, 0x6c, 0x3b, 0x16, 0xa3, 0x3a, 0x1d, 0xb8,
	0xde, 0xf0, 0x5d, 0xe8, 0x7f, 0x7d, 0xc1, 0xd5, 0xf6, 0xa1, 0x1a, 0xdf, 0x13, 0xf5, 0xc0, 0x32,
	0x1b, 0x6a, 0x26, 0xcf, 0x77, 0x84, 0x08, 0x87, 0x1d, 0x62, 0x07, 0xfe, 0x5b, 0xfb, 0x0b, 0x05,
	0x36, 0x97, 0xaa, 0x7e, 0x0b, 0x2f, 0x3d, 0x83, 0x55, 0x27, 0xb9, 0x3c, 0x1e, 0xef, 0x79, 0x25,
	0xf5, 0x79, 0x66, 0xed, 0x6b, 0xd8, 0x08, 0x99, 0xe8, 0x8f, 0xe3, 0x3c, 0x23, 0x16, 0x30, 0xfa,
	0xbd, 0x8c, 0x5e, 0xe6, 0x4c, 0x47, 0x24, 0xdb, 0x91, 0xfb, 0x23, 0xa5, 0xc0, 0x33, 0x80, 0xcb,
	0x70, 0xaf, 0xef, 0x11, 0xfc, 0x5f, 0xc1, 0x83, 0x05, 0x7d, 0x6f, 0xe1, 0x82, 0xcf, 0x61, 0x15,
	0xb7, 0xc7, 0x06, 0x24, 0x19, 0x77, 0x7e, 0xd9, 0x89, 0x34, 0xd3, 0xe7, 0xd9, 0x34, 0x37, 0xda,
	0x78, 0xf8, 0xa3, 0x78, 0xea, 0x33, 0x28, 0x5e, 0x46, 0x9b, 0xf1, 0xa6, 0xd8, 0x65, 0x72, 0x0f,
	0xbc, 0xfe, 0x21, 0xb0, 0xd4, 0x45, 0xbf, 0x06, 0x75, 0x51, 0xd3, 0x5b, 0xf8, 0xe8, 0xf7, 0xa0,
	0xca, 0x37, 0x5e, 0x74, 0xd2, 0x6a, 0xe0, 0x24, 0x89, 0xd7, 0x17, 0x18, 0x35, 0x5b, 0xb8, 0xa9,
	0x71, 0x4e, 0x07, 0x17, 0x3a, 0xf5, 0xa7, 0x23, 0xf6, 0x4e, 0xdc, 0x84, 0x76, 0xe2, 0x95, 0x5e,
	0xcc, 0x84, 0xf8, 0x6f, 0x8d, 0x09, 0x3b, 0x93, 0x5b, 0xdd, 0xf2, 0x38, 0xa0, 0xcc, 0x54, 0x24,
	0x93, 0xcf, 0x08, 0x22, 0x79, 0x7c, 0x60, 0x5a, 0xd0, 0xe3, 0x28, 0xed, 0x1f, 0x14, 0xa8, 0xca,
	0xd1, 0xde, 0x61, 0xe3, 0x5d, 0x98, 0xf6, 0x33, 0xc8, 0x87, 0xe3, 0xc3, 0xf4, 0x75, 0xe3, 0xc3,
	0x90, 0x25, 0x39, 0x36, 0xcc, 0xbc, 0x6d, 0x6c, 0xb8, 0xb2, 0x30, 0x36, 0xd4, 0xfe, 0x0c, 0xd6,
	0x62, 0xfa, 0xdf, 0xc2, 0x5f, 0xd7, 0x19, 0xb0, 0x8b, 0x06, 0x08, 0x39, 0xf1, 0xee, 0x27, 0x30,
	0x40, 0x50, 0xf4, 0x90, 0x47, 0xfb, 0x4f, 0x05, 0xca, 0x09, 0xeb, 0xf8, 0x50, 0xc7, 0x1d, 0x4e,
	0x47, 0xd4, 0x8c, 0xb5, 0xa2, 0x20, 0x50, 0x1d, 0xdc, 0xe2, 0x03, 0x28, 0x87, 0xb3, 0xd6, 0x98,
	0x06, 0xa5, 0x00, 0xc9, 0x99, 0xf8, 0x68, 0x88, 0x9d, 0xbb, 0x43, 0xc1, 0x92, 0x96, 0x52, 0x38,
	0x8a, 0x33, 0x3c, 0x86, 0x8c, 0xe5, 0x9d, 0x05, 0xb3, 0xed, 0xcd, 0x05, 0x2f, 0xef, 0xd6, 0xbd,
	0x33, 0x79, 0xf1, 0xe6, 0x8c, 0xb5, 0xcf, 0xa0, 0x10, 0xa2, 0xde, 0x76, 0x4f, 0x2d, 0xc5, 0xef,
	0xa9, 0xff, 0xac, 0x40, 0x25, 0x69, 0x3f, 0xf9, 0x08, 0xb2, 0x72, 0x0a, 0xaf, 0x2c, 0x1d, 0x49,
	0x4b, 0x2a, 0xf9, 0x29, 0xe4, 0x82, 0x19, 0x7c, 0x6a, 0xf9, 0x18, 0x3a, 0xa0, 0x63, 0xfb, 0x1b,
	0x73, 0x7c, 0x1a, 0xef, 0x20, 0x01, 0x4c, 0x36, 0x20, 0x7f, 0x66, 0xf9, 0xe6, 0xd4, 0xa7, 0x43,
	0x39, 0x23, 0xcd, 0x9d, 0x59, 0x7e, 0xdf, 0xa7, 0xc3, 0x44, 0xc2, 0xad, 0xbc, 0x35, 0xe1, 0xb4,
	0x09, 0x40, 0xa4, 0x26, 0x4f, 0x82, 0xe9, 0xe0, 0x82, 0xb2, 0xf0, 0xf5, 0x12, 0x87, 0x02, 0xef,
	0x08, 0x4f, 0x70, 0xef, 0xc4, 0xdf, 0xd6, 0xa4, 0xbf, 0xeb, 0x6d, 0x4d, 0x66, 0xfe, 0xee, 0x77,
	0x00, 0xc5, 0x98, 0xbd, 0xb7, 0xd8, 0x32, 0x0c, 0x48, 0x3a, 0x16, 0x10, 0xad, 0x0e, 0xe5, 0xc4,
	0x34, 0x1b, 0x8f, 0xd0, 0x21, 0xbf, 0xe6, 0xbd, 0x0a, 0xe3, 0x19, 0x21, 0xb0, 0x2c, 0xf0, 0x5b,
	0x9d, 0x90, 0xcb, 0x7f, 0x6b, 0xbf, 0x84, 0xd5, 0x43, 0xea, 0x8d, 0x6d, 0x1f, 0x2f, 0x28, 0x07,
	0xee, 0x90, 0x8e, 0xb0, 0x33, 0xf6, 0xa6, 0x23, 0x91, 0xac, 0x15, 0x91, 0xf1, 0x11, 0x8b, 0x3e,
	0x1d, 0x51, 0x9d, 0xd3, 0xb1, 0xa2, 0x58, 0x83, 0x01, 0x9d, 0xb0, 0xa3, 0xd8, 0x48, 0x23, 0x8e,
	0xd2, 0x36, 0x60, 0xa5, 0x7e, 0xd1, 0x13, 0x06, 0x59, 0x17, 0x22, 0x3f, 0x0a, 0x3a, 0xfe, 0xd4,
	0xfe, 0x4a, 0x81, 0x2c, 0xa7, 0xf9, 0x64, 0x07, 0x32, 0x3e, 0x0d, 0xb3, 0x87, 0xb7, 0x29, 0x82,
	0xb2, 0x8b, 0x7f, 0x64, 0xd6, 0x22, 0x07, 0x79, 0x08, 0x40, 0x67, 0x13, 0x7c, 0x86, 0x44, 0x17,
	0xb8, 0x18, 0xa6, 0xb6, 0x07, 0x85, 0x70, 0xc9, 0x92, 0xac, 0x7e, 0x94, 0x1c, 0x04, 0x15, 0xc2,
	0x9d, 0xe2, 0x09, 0xfe, 0x8f, 0x0a, 0xa4, 0xeb, 0x83, 0x11, 0xf9, 0x00, 0x52, 0x93, 0xb1, 0xac,
	0x19, 0x77, 0x93, 0x3e, 0xe0, 0x6e, 0xd2, 0x53, 0x93, 0x31, 0xf9, 0x05, 0x14, 0xac, 0x0b, 0xff,
	0xb5, 0x18, 0x1e, 0x8b, 0xa4, 0xe6, 0x2f, 0x89, 0xeb, 0x83, 0xd1, 0x6e, 0x3d, 0x20, 0xc8, 0x39,
	0x59, 0xc8, 0x88, 0x25, 0xc9, 0xe2, 0x06, 0xc6, 0x07, 0x31, 0xc2, 0x64, 0x5d, 0x52, 0x6a, 0x5f,
	0x40, 0x25, 0x29, 0xe0, 0x56, 0xd3, 0xa4, 0xff, 0x51, 0xa0, 0x50, 0x1f, 0x8c, 0xde, 0xc1, 0xe0,
	0x54, 0x04, 0xd9, 0x9d, 0x3a, 0xbc, 0x12, 0xc9, 0xd2, 0x13, 0x47, 0x11, 0x0d, 0x12, 0xc5, 0x4a,
	0x56, 0xee, 0x64, 0x01, 0x7b, 0x08, 0xb1, 0x6a, 0x15, 0x7c, 0x8e, 0x11, 0xab, 0x5f, 0xd8, 0x2d,
	0xb9, 0xce, 0xa9, 0xed, 0x8d, 0xe9, 0x90, 0xdf, 0x07, 0xf3, 0x7a, 0x84, 0x20, 0x1b, 0x90, 0xb6,
	0x06, 0x23, 0xf9, 0x65, 0x41, 0x4e, 0xfa, 0x57, 0x47, 0xdc, 0xc7, 0xff, 0xb2, 0x02, 0xab, 0x73,
	0x6f, 0x74, 0x49, 0x11, 0x72, 0xbd, 0x7e, 0xa3, 0xd1, 0xec, 0xf5, 0xaa, 0x77, 0x48, 0x15, 0x4a,
	0xfd, 0xce, 0xab, 0x4e, 0xf7, 0xb5, 0x29, 0xde, 0xb0, 0x2b, 0x84, 0x40, 0xa5, 0xd1, 0xed, 0x74,
	0x9a, 0x0d, 0xc3, 0xd4, 0x9b, 0xcf, 0xfb, 0xbd, 0x66, 0x35, 0x45, 0x36, 0xe0, 0x7e, 0xa7, 0x6b,
	0x98, 0xcd, 0x4e, 0xb7, 0xff, 0xe2, 0xa5, 0xd9, 0x37, 0x8e, 0xbb, 0x92, 0x3d, 0x4d, 0x34, 0x78,
	0x88, 0xf0, 0xd1, 0x81, 0x59, 0x6f, 0xeb, 0xcd, 0xfa, 0xfe, 0x1b, 0xb3, 0xdf, 0x69, 0x74, 0x3b,
	0xcf, 0x5b, 0xfa, 0x81, 0xe4, 0xc9, 0x90, 0x1a, 0xac, 0x4b, 0x1e, 0x94, 0xf2, 0xbc, 0xdb, 0xef,
	0xec, 0x4b, 0xda, 0x0a, 0xd9, 0x86, 0xad, 0x56, 0xe7, 0xb0, 0x6f, 0x98, 0xdd, 0xbe, 0x81, 0xff,
	0xf8, 0x3e, 0x5f, 0xf5, 0xeb, 0x6d, 0xc9, 0x91, 0x25, 0xeb, 0x40, 0x8c, 0xe3, 0x85, 0x95, 0x39,
	0xb2, 0x06, 0x65, 0xe3, 0xd8, 0xec, 0xb5, 0x5e, 0x74, 0x24, 0x2a, 0x4f, 0x1e, 0xc0, 0xdd, 0xbd,
	0x76, 0xb7, 0xf1, 0xaa, 0xf1, 0xb2, 0xde, 0xea, 0xe0, 0x12, 0xf1, 0x49, 0x40, 0x01, 0x8d, 0x3a,
	0xaa, 0xb7, 0x5b, 0xfb, 0x75, 0xa3, 0x29, 0x99, 0x81, 0x6c, 0xc2, 0x83, 0x46, 0xbd, 0x83, 0x72,
	0x7b, 0x6f, 0x3a, 0x0d, 0x93, 0x2f, 0x94, 0xc4, 0x22, 0x4a, 0x0a, 0xac, 0x88, 0x13, 0x4a, 0xe4,
	0x3e, 0xac, 0x49, 0x5b, 0x0e, 0xdb, 0xf5, 0x37, 0x12, 0x5d, 0x26, 0x15, 0x80, 0xd7, 0xf5, 0x76,
	0xc0, 0x56, 0x21, 0x77, 0x61, 0x15, 0x25, 0x0b, 0x8f, 0x08, 0xe4, 0x2a, 0xae, 0x95, 0xc2, 0x50,
	0x2d, 0x89, 0xae, 0xa2, 0x7b, 0xf4, 0x6e, 0xd7, 0x30, 0x17, 0x69, 0x6b, 0xd2, 0xf8, 0xfd, 0xfe,
	0x61, 0xbb, 0xd5, 0x88, 0x94, 0xbf, 0x8b, 0x11, 0xe9, 0x35, 0xf5, 0xa3, 0x56, 0xa3, 0x29, 0xa3,
	0x14, 0xf8, 0xe5, 0x1e, 0xee, 0x62, 0x1c, 0xef, 0xd7, 0x8d, 0x7a, 0xdc, 0x37, 0xf7, 0x31, 0xd2,
	0xe8, 0xae, 0x76, 0x20, 0x63, 0x03, 0x1d, 0x60, 0x1c, 0x9b, 0xcf, 0x9b, 0x4d, 0x33, 0x16, 0x5c,
	0x41, 0xac, 0xa1, 0x01, 0x3c, 0xce, 0x31, 0x19, 0x5b, 0xe4, 0x1e, 0x54, 0xf7, 0x0f, 0xbb, 0x3d,
	0xf3, 0xab, 0x7e, 0x53, 0x0f, 0xcc, 0x7a, 0x84, 0xbe, 0xd2, 0x5f, 0xf7, 0x9a, 0x86, 0xd9, 0xea,
	0x70, 0x27, 0x4b, 0xc2, 0xfb, 0x82, 0x50, 0x6f, 0xb4, 0xe7, 0x08, 0x1a, 0x51, 0xe1, 0xde, 0x8b,
	0x7a, 0x6f, 0x71, 0xdb, 0x0f, 0xc8, 0x16, 0xa8, 0xc6, 0xb1, 0x79, 0xd4, 0xd4, 0x7b, 0xad, 0x6e,
	0x67, 0x6e, 0xdd, 0x87, 0x1f, 0xbf, 0x81, 0xb5, 0x85, 0x6f, 0x6f, 0x48, 0x09, 0xf2, 0xfd, 0xce,
	0x7e, 0xf3, 0x79, 0xab, 0xd3, 0xac, 0xde, 0x89, 0x7f, 0x09, 0xa2, 0x20, 0x20, 0xa3, 0x58, 0x4d,
	0x91, 0x32, 0x14, 0x9e, 0xf7, 0xf5, 0x46, 0xdd, 0x68, 0x75, 0x3b, 0xd5, 0x34, 0x82, 0x61, 0xa6,
	0x56, 0x33, 0x1f, 0xff, 0x29, 0x54, 0x92, 0x55, 0x9c, 0xe4, 0x21, 0xd3, 0xe9, 0xb7, 0xdb, 0xd5,
	0x3b, 0x98, 0x3d, 0xdc, 0x0d, 0xc6, 0x4b, 0xbd, 0xd9, 0x7b, 0xd9, 0x6d, 0xef, 0x57, 0x15, 0x0c,
	0x38, 0xc7, 0xd5, 0x5f, 0xf5, 0x9a, 0x86, 0x90, 0xce, 0x61, 0xbd, 0x6e, 0x34, 0xab, 0x69, 0x54,
	0x8a, 0x83, 0xbd, 0xfe, 0x41, 0x35, 0x83, 0xc4, 0x46, 0xdd, 0xc4, 0x80, 0x35, 0x31, 0xe7, 0xf9,
	0x11, 0x3b, 0x38, 0xe8, 0x77, 0x5a, 0xc6, 0x1b, 0xf3, 0xa8, 0x6b, 0x34, 0xab, 0xd9, 0x27, 0xff,
	0x5e, 0x84, 0xec, 0x31, 0x7f, 0xd9, 0x40, 0xbe, 0x84, 0xec, 0xa1, 0xeb, 0x33, 0x63, 0x46, 0x12,
	0x1f, 0xf5, 0xd4, 0x78, 0x3f, 0x10, 0xfb, 0xa8, 0x44, 0x5b, 0xff, 0xcd, 0xbf, 0xfe, 0xf7, 0xb7,
	0xa9, 0xaa, 0x56, 0x7c, 0x7c, 0xf9, 0xf3, 0xc7, 0x13, 0xd7, 0x67, 0x26, 0x9b, 0x3d, 0x55, 0x3e,
	0x26, 0x7b, 0x90, 0xff, 0x6a, 0x4a, 0xbd, 0xab, 0x7a, 0xa3, 0x4d, 0xca, 0xb2, 0x1e, 0x48, 0x19,
	0x49, 0x50, 0x53, 0xb9, 0x04, 0xa2, 0x95, 0x51, 0xc2, 0xd7, 0xb8, 0xc6, 0xb4, 0x06, 0x23, 0x94,
	0xf1, 0x0c, 0x72, 0x5c, 0xc6, 0x82, 0x16, 0x09, 0x48, 0x7b, 0xc0, 0x05, 0xac, 0x69, 0xa5, 0x48,
	0x80, 0xd0, 0xa1, 0x03, 0xf0, 0x82, 0xb2, 0x3d, 0xf9, 0xa5, 0x09, 0xef, 0x33, 0x12, 0x1f, 0x90,
	0xd4, 0x16, 0x51, 0x5a, 0x8d, 0x0b, 0xbb, 0xa7, 0xad, 0xa2, 0xb0, 0x33, 0xca, 0x4c, 0xf9, 0xa1,
	0x0a, 0xca, 0xfb, 0x25, 0x54, 0x5f, 0x50, 0xf6, 0x9c, 0x7f, 0x1f, 0x71, 0x3b, 0xa9, 0xef, 0x73,
	0xa9, 0x9b, 0xda, 0x7a, 0x20, 0x55, 0x7e, 0x79, 0x11, 0x13, 0xfe, 0x05, 0xe4, 0x51, 0x59, 0xfe,
	0xf6, 0xaa, 0x18, 0x7e, 0xc5, 0xd4, 0xda, 0xaf, 0x15, 0x42, 0x20, 0xe9, 0x2a, 0xae, 0x1c, 0xa2,
	0x85, 0xa9, 0x77, 0x83, 0xd5, 0xbc, 0xd4, 0x06, 0x79, 0x19, 0x7f, 0xd1, 0x50, 0x4b, 0x40, 0xda,
	0x26, 0x17, 0x76, 0x5f, 0xab, 0x86, 0xc2, 0x06, 0x62, 0xb0, 0x84, 0xf2, 0x5a, 0x50, 0x49, 0xc8,
	0x93, 0xa2, 0x82, 0x6f, 0x83, 0x44, 0x1e, 0xc4, 0xc8, 0x81, 0x6a, 0x24, 0x26, 0x4d, 0xbc, 0xb6,
	0x22, 0x7d, 0x58, 0x7d, 0x41, 0x99, 0x78, 0x85, 0x10, 0x57, 0x2b, 0x94, 0xb5, 0xbe, 0xf8, 0x8a,
	0x81, 0xa7, 0xd6, 0x16, 0x17, 0xb9, 0xae, 0xad, 0x05, 0x22, 0xfd, 0x2b, 0x3f, 0xd2, 0xf0, 0x27,
	0x50, 0x78, 0x41, 0x59, 0x87, 0xb2, 0xbe, 0xde, 0x9e, 0x13, 0xc8, 0x1f, 0x9e, 0xe2, 0x9d, 0x84,
	0x76, 0x87, 0xbc, 0x02, 0x10, 0x23, 0x68, 0xac, 0x25, 0x22, 0x17, 0xc3, 0xd9, 0x7e, 0xad, 0x12,
	0x80, 0xa2, 0xe3, 0xd3, 0x1e, 0xf2, 0x3d, 0x55, 0xed, 0x2e, 0xee, 0xe9, 0xf3, 0x65, 0xe6, 0x94,
	0xcd, 0x5c, 0xdf, 0xbc, 0x7c, 0x82, 0xbb, 0x1e, 0x40, 0x75, 0x7e, 0xcc, 0x49, 0x78, 0x2f, 0x7f,
	0xcd, 0x54, 0xb7, 0xb6, 0xb5, 0x9c, 0x28, 0x1b, 0xe5, 0x83, 0x25, 0x53, 0xcf, 0xcd, 0xa5, 0x43,
	0xbf, 0xb8, 0xb8, 0x6b, 0x67, 0x8c, 0x2f, 0xa0, 0x92, 0x1c, 0xde, 0x91, 0x8d, 0x60, 0xa2, 0xb4,
	0x30, 0x25, 0xac, 0xd5, 0x96, 0x91, 0xa4, 0xa0, 0x23, 0xb8, 0xbb, 0x64, 0xc8, 0x45, 0x1e, 0xce,
	0xcf, 0xa7, 0x92, 0xb3, 0x88, 0xda, 0xa3, 0x6b, 0xe9, 0x52, 0x6e, 0x0f, 0xc8, 0xe2, 0x18, 0x89,
	0xbc, 0x97, 0x58, 0x36, 0x3f, 0xd1, 0xaa, 0x3d, 0xbc, 0x8e, 0x2c, 0x85, 0xfe, 0x01, 0xac, 0xce,
	0x4d, 0x65, 0x48, 0x68, 0xdb, 0xe2, 0x68, 0xa9, 0xb6, 0xb9, 0x94, 0x16, 0x05, 0x64, 0x7e, 0x7c,
	0x41, 0x12, 0x0b, 0xe6, 0xc6, 0x2f, 0x32, 0xbe, 0xd7, 0x4d, 0x3c, 0xa4, 0xb8, 0xf8, 0x94, 0x20,
	0x12, 0xb7, 0x64, 0x4c, 0x11, 0x89, 0x5b, 0x3a, 0x58, 0xf8, 0x5d, 0xc8, 0x1d, 0x7a, 0xb4, 0x39,
	0xa3, 0x03, 0x72, 0x2f, 0x76, 0x6b, 0x0a, 0x47, 0x01, 0xb5, 0xfb, 0x73, 0x58, 0xb1, 0xee, 0x24,
	0xcb, 0xbf, 0x6d, 0xfe, 0xf4, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x1f, 0xf4, 0xb7, 0x0d,
	0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XchainClient is the client API for Xchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XchainClient interface {
	// PostTx post Transaction to a node
	PostTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*CommonReply, error)
	QueryACL(ctx context.Context, in *AclStatus, opts ...grpc.CallOption) (*AclStatus, error)
	// QueryTx query Transaction by TxStatus,
	// Bcname and Txid are required for this
	QueryTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxStatus, error)
	// GetBalance get balance of an address,
	// Address is required for this
	GetBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error)
	// GetFrozenBalance get balance that still be frozen of an address,
	// Address is required for this
	GetFrozenBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error)
	// GetBlock get block by blockid and return if the block in trunk or in branch
	GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*Block, error)
	GetBlockChainStatus(ctx context.Context, in *BCStatus, opts ...grpc.CallOption) (*BCStatus, error)
	// Get blockchains query blockchains
	GetBlockChains(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*BlockChains, error)
	// GetSystemStatus query system status
	GetSystemStatus(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*SystemsStatusReply, error)
	// GetNetURL return net url
	GetNetURL(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*RawUrl, error)
	// 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
	SelectUTXO(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error)
	// Native code deploy interface
	DeployNativeCode(ctx context.Context, in *DeployNativeCodeRequest, opts ...grpc.CallOption) (*DeployNativeCodeResponse, error)
	// Native code status
	NativeCodeStatus(ctx context.Context, in *NativeCodeStatusRequest, opts ...grpc.CallOption) (*NativeCodeStatusResponse, error)
	//  DposCandidates get all candidates of the tdpos consensus
	DposCandidates(ctx context.Context, in *DposCandidatesRequest, opts ...grpc.CallOption) (*DposCandidatesResponse, error)
	//  DposNominateRecords get all records nominated by an user
	DposNominateRecords(ctx context.Context, in *DposNominateRecordsRequest, opts ...grpc.CallOption) (*DposNominateRecordsResponse, error)
	//  DposNomineeRecords get nominated record of a candidate
	DposNomineeRecords(ctx context.Context, in *DposNomineeRecordsRequest, opts ...grpc.CallOption) (*DposNomineeRecordsResponse, error)
	//  DposVoteRecords get all vote records voted by an user
	DposVoteRecords(ctx context.Context, in *DposVoteRecordsRequest, opts ...grpc.CallOption) (*DposVoteRecordsResponse, error)
	//  DposVotedRecords get all vote records of a candidate
	DposVotedRecords(ctx context.Context, in *DposVotedRecordsRequest, opts ...grpc.CallOption) (*DposVotedRecordsResponse, error)
	//  DposCheckResults get check results of a specific term
	DposCheckResults(ctx context.Context, in *DposCheckResultsRequest, opts ...grpc.CallOption) (*DposCheckResultsResponse, error)
	// 预执行合约
	PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error)
}

type xchainClient struct {
	cc *grpc.ClientConn
}

func NewXchainClient(cc *grpc.ClientConn) XchainClient {
	return &xchainClient{cc}
}

func (c *xchainClient) PostTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.Xchain/PostTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryACL(ctx context.Context, in *AclStatus, opts ...grpc.CallOption) (*AclStatus, error) {
	out := new(AclStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxStatus, error) {
	out := new(TxStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error) {
	out := new(AddressStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetFrozenBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error) {
	out := new(AddressStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetFrozenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlockChainStatus(ctx context.Context, in *BCStatus, opts ...grpc.CallOption) (*BCStatus, error) {
	out := new(BCStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlockChainStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlockChains(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*BlockChains, error) {
	out := new(BlockChains)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlockChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetSystemStatus(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*SystemsStatusReply, error) {
	out := new(SystemsStatusReply)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetSystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetNetURL(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*RawUrl, error) {
	out := new(RawUrl)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetNetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) SelectUTXO(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error) {
	out := new(UtxoOutput)
	err := c.cc.Invoke(ctx, "/pb.Xchain/SelectUTXO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DeployNativeCode(ctx context.Context, in *DeployNativeCodeRequest, opts ...grpc.CallOption) (*DeployNativeCodeResponse, error) {
	out := new(DeployNativeCodeResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DeployNativeCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) NativeCodeStatus(ctx context.Context, in *NativeCodeStatusRequest, opts ...grpc.CallOption) (*NativeCodeStatusResponse, error) {
	out := new(NativeCodeStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/NativeCodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposCandidates(ctx context.Context, in *DposCandidatesRequest, opts ...grpc.CallOption) (*DposCandidatesResponse, error) {
	out := new(DposCandidatesResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposNominateRecords(ctx context.Context, in *DposNominateRecordsRequest, opts ...grpc.CallOption) (*DposNominateRecordsResponse, error) {
	out := new(DposNominateRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposNominateRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposNomineeRecords(ctx context.Context, in *DposNomineeRecordsRequest, opts ...grpc.CallOption) (*DposNomineeRecordsResponse, error) {
	out := new(DposNomineeRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposNomineeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposVoteRecords(ctx context.Context, in *DposVoteRecordsRequest, opts ...grpc.CallOption) (*DposVoteRecordsResponse, error) {
	out := new(DposVoteRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposVoteRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposVotedRecords(ctx context.Context, in *DposVotedRecordsRequest, opts ...grpc.CallOption) (*DposVotedRecordsResponse, error) {
	out := new(DposVotedRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposVotedRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposCheckResults(ctx context.Context, in *DposCheckResultsRequest, opts ...grpc.CallOption) (*DposCheckResultsResponse, error) {
	out := new(DposCheckResultsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposCheckResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error) {
	out := new(InvokeRPCResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/PreExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XchainServer is the server API for Xchain service.
type XchainServer interface {
	// PostTx post Transaction to a node
	PostTx(context.Context, *TxStatus) (*CommonReply, error)
	QueryACL(context.Context, *AclStatus) (*AclStatus, error)
	// QueryTx query Transaction by TxStatus,
	// Bcname and Txid are required for this
	QueryTx(context.Context, *TxStatus) (*TxStatus, error)
	// GetBalance get balance of an address,
	// Address is required for this
	GetBalance(context.Context, *AddressStatus) (*AddressStatus, error)
	// GetFrozenBalance get balance that still be frozen of an address,
	// Address is required for this
	GetFrozenBalance(context.Context, *AddressStatus) (*AddressStatus, error)
	// GetBlock get block by blockid and return if the block in trunk or in branch
	GetBlock(context.Context, *BlockID) (*Block, error)
	GetBlockChainStatus(context.Context, *BCStatus) (*BCStatus, error)
	// Get blockchains query blockchains
	GetBlockChains(context.Context, *CommonIn) (*BlockChains, error)
	// GetSystemStatus query system status
	GetSystemStatus(context.Context, *CommonIn) (*SystemsStatusReply, error)
	// GetNetURL return net url
	GetNetURL(context.Context, *CommonIn) (*RawUrl, error)
	// 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
	SelectUTXO(context.Context, *UtxoInput) (*UtxoOutput, error)
	// Native code deploy interface
	DeployNativeCode(context.Context, *DeployNativeCodeRequest) (*DeployNativeCodeResponse, error)
	// Native code status
	NativeCodeStatus(context.Context, *NativeCodeStatusRequest) (*NativeCodeStatusResponse, error)
	//  DposCandidates get all candidates of the tdpos consensus
	DposCandidates(context.Context, *DposCandidatesRequest) (*DposCandidatesResponse, error)
	//  DposNominateRecords get all records nominated by an user
	DposNominateRecords(context.Context, *DposNominateRecordsRequest) (*DposNominateRecordsResponse, error)
	//  DposNomineeRecords get nominated record of a candidate
	DposNomineeRecords(context.Context, *DposNomineeRecordsRequest) (*DposNomineeRecordsResponse, error)
	//  DposVoteRecords get all vote records voted by an user
	DposVoteRecords(context.Context, *DposVoteRecordsRequest) (*DposVoteRecordsResponse, error)
	//  DposVotedRecords get all vote records of a candidate
	DposVotedRecords(context.Context, *DposVotedRecordsRequest) (*DposVotedRecordsResponse, error)
	//  DposCheckResults get check results of a specific term
	DposCheckResults(context.Context, *DposCheckResultsRequest) (*DposCheckResultsResponse, error)
	// 预执行合约
	PreExec(context.Context, *InvokeRPCRequest) (*InvokeRPCResponse, error)
}

func RegisterXchainServer(s *grpc.Server, srv XchainServer) {
	s.RegisterService(&_Xchain_serviceDesc, srv)
}

func _Xchain_PostTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).PostTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/PostTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).PostTx(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryACL(ctx, req.(*AclStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryTx(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBalance(ctx, req.(*AddressStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetFrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetFrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetFrozenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetFrozenBalance(ctx, req.(*AddressStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlock(ctx, req.(*BlockID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlockChainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BCStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlockChainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlockChainStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlockChainStatus(ctx, req.(*BCStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlockChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlockChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlockChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlockChains(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetSystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetSystemStatus(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetNetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetNetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetNetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetNetURL(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_SelectUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).SelectUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/SelectUTXO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).SelectUTXO(ctx, req.(*UtxoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DeployNativeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployNativeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DeployNativeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DeployNativeCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DeployNativeCode(ctx, req.(*DeployNativeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_NativeCodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeCodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).NativeCodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/NativeCodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).NativeCodeStatus(ctx, req.(*NativeCodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposCandidates(ctx, req.(*DposCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposNominateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposNominateRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposNominateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposNominateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposNominateRecords(ctx, req.(*DposNominateRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposNomineeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposNomineeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposNomineeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposNomineeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposNomineeRecords(ctx, req.(*DposNomineeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposVoteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposVoteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposVoteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposVoteRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposVoteRecords(ctx, req.(*DposVoteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposVotedRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposVotedRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposVotedRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposVotedRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposVotedRecords(ctx, req.(*DposVotedRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposCheckResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposCheckResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposCheckResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposCheckResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposCheckResults(ctx, req.(*DposCheckResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_PreExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).PreExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/PreExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).PreExec(ctx, req.(*InvokeRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Xchain",
	HandlerType: (*XchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTx",
			Handler:    _Xchain_PostTx_Handler,
		},
		{
			MethodName: "QueryACL",
			Handler:    _Xchain_QueryACL_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _Xchain_QueryTx_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Xchain_GetBalance_Handler,
		},
		{
			MethodName: "GetFrozenBalance",
			Handler:    _Xchain_GetFrozenBalance_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Xchain_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockChainStatus",
			Handler:    _Xchain_GetBlockChainStatus_Handler,
		},
		{
			MethodName: "GetBlockChains",
			Handler:    _Xchain_GetBlockChains_Handler,
		},
		{
			MethodName: "GetSystemStatus",
			Handler:    _Xchain_GetSystemStatus_Handler,
		},
		{
			MethodName: "GetNetURL",
			Handler:    _Xchain_GetNetURL_Handler,
		},
		{
			MethodName: "SelectUTXO",
			Handler:    _Xchain_SelectUTXO_Handler,
		},
		{
			MethodName: "DeployNativeCode",
			Handler:    _Xchain_DeployNativeCode_Handler,
		},
		{
			MethodName: "NativeCodeStatus",
			Handler:    _Xchain_NativeCodeStatus_Handler,
		},
		{
			MethodName: "DposCandidates",
			Handler:    _Xchain_DposCandidates_Handler,
		},
		{
			MethodName: "DposNominateRecords",
			Handler:    _Xchain_DposNominateRecords_Handler,
		},
		{
			MethodName: "DposNomineeRecords",
			Handler:    _Xchain_DposNomineeRecords_Handler,
		},
		{
			MethodName: "DposVoteRecords",
			Handler:    _Xchain_DposVoteRecords_Handler,
		},
		{
			MethodName: "DposVotedRecords",
			Handler:    _Xchain_DposVotedRecords_Handler,
		},
		{
			MethodName: "DposCheckResults",
			Handler:    _Xchain_DposCheckResults_Handler,
		},
		{
			MethodName: "PreExec",
			Handler:    _Xchain_PreExec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xchain.proto",
}

func init() { proto.RegisterFile("xchain.proto", fileDescriptor_xchain_a3e9dc99024c0cb2) }

var fileDescriptor_xchain_a3e9dc99024c0cb2 = []byte{
	// 3937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x5d, 0x6f, 0x1b, 0xc7,
	0x76, 0x5e, 0x92, 0xe2, 0xc7, 0xe1, 0x87, 0xe8, 0xb1, 0x2d, 0xaf, 0x28, 0xc5, 0x56, 0x36, 0x6e,
	0xae, 0x6e, 0xd2, 0xca, 0xb8, 0xce, 0xbd, 0x4d, 0x90, 0xa6, 0x09, 0x28, 0x92, 0xb6, 0x59, 0x53,
	0xa4, 0xb2, 0x5c, 0xca, 0x32, 0x6e, 0x81, 0xed, 0x8a, 0x1c, 0x49, 0x5b, 0x91, 0xbb, 0xcc, 0xee,
	0x50, 0x97, 0x4a, 0x8a, 0x7e, 0x5c, 0xf4, 0xa9, 0x6f, 0x45, 0x81, 0x02, 0x2d, 0x50, 0xa0, 0xe8,
	0xff, 0xe8, 0x4b, 0x1f, 0xfa, 0xd4, 0xb7, 0xa2, 0xed, 0x6b, 0x81, 0x16, 0xfd, 0x07, 0x45, 0x5f,
	0x8b, 0x33, 0x33, 0xfb, 0x45, 0x52, 0x89, 0x94, 0x18, 0x79, 0x91, 0x78, 0x3e, 0xe6, 0x7c, 0xcd,
	0x99, 0xb3, 0x67, 0xce, 0x2e, 0x94, 0xe6, 0xc3, 0x73, 0xcb, 0x76, 0xf6, 0xa6, 0x9e, 0xcb, 0x5c,
	0x92, 0x9a, 0x9e, 0xd4, 0xb6, 0xcf, 0x5c, 0xf7, 0x6c, 0x4c, 0x9f, 0x5a, 0x53, 0xfb, 0xa9, 0xe5,
	0x38, 0x2e, 0xb3, 0x98, 0xed, 0x3a, 0xbe, 0xe0, 0xd0, 0x4e, 0x21, 0xfb, 0x92, 0x5a, 0x23, 0xea,
	0x91, 0xfb, 0xb0, 0x36, 0x76, 0xcf, 0xec, 0x91, 0xaa, 0xec, 0x28, 0xbb, 0x05, 0x5d, 0x00, 0x64,
	0x0b, 0x0a, 0xa7, 0x9e, 0x3b, 0x31, 0x1d, 0x77, 0x44, 0xd5, 0x14, 0xa7, 0xe4, 0x11, 0xd1, 0x75,
	0x47, 0x94, 0xfc, 0x14, 0xd6, 0xa8, 0xe7, 0xb9, 0x9e, 0x9a, 0xde, 0x51, 0x76, 0x2b, 0xcf, 0xee,
	0xed, 0x4d, 0x4f, 0xf6, 0x8e, 0x1b, 0xa8, 0xbf, 0x85, 0xe8, 0x96, 0x33, 0x9b, 0xe8, 0x82, 0x43,
	0x3b, 0x85, 0xb2, 0x31, 0x6f, 0x5a, 0xcc, 0xaa, 0x0f, 0x87, 0xee, 0xcc, 0x61, 0x44, 0x85, 0x9c,
	0x35, 0x1a, 0x79, 0xd4, 0xf7, 0xa5, 0xc2, 0x00, 0x24, 0x1b, 0x90, 0xb5, 0x26, 0xc8, 0x23, 0xf5,
	0x49, 0x88, 0xbc, 0x07, 0xe5, 0x53, 0xcf, 0xfd, 0x9a, 0x3a, 0xe6, 0x39, 0xb5, 0xcf, 0xce, 0x19,
	0xd7, 0x9a, 0xd6, 0x4b, 0x02, 0xf9, 0x92, 0xe3, 0xb4, 0xff, 0x4a, 0x41, 0x56, 0x28, 0x22, 0x1a,
	0x64, 0xcf, 0xb9, 0x6b, 0x6a, 0x79, 0x47, 0xd9, 0x2d, 0x3e, 0x03, 0x34, 0x4f, 0x38, 0xab, 0x4b,
	0x0a, 0x21, 0x90, 0x61, 0x73, 0xe9, 0x73, 0x49, 0xe7, 0xbf, 0x51, 0xff, 0xc9, 0xd0, 0xb1, 0x26,
	0x81, 0xbf, 0x12, 0x0a, 0x43, 0x81, 0x76, 0x72, 0xdd, 0x32, 0x14, 0xf5, 0xd1, 0xc8, 0x23, 0x8f,
	0xa1, 0xc8, 0x89, 0xd3, 0xd9, 0xc9, 0x05, 0xbd, 0x52, 0x33, 0x9c, 0x0c, 0x88, 0x3a, 0xe4, 0x98,
	0x90, 0xc1, 0x1f, 0x7a, 0xc8, 0xb0, 0x16, 0x31, 0xf4, 0x39, 0x06, 0xc5, 0xcf, 0x7c, 0xea, 0x99,
	0xbe, 0x7d, 0xe6, 0xa8, 0x15, 0x6e, 0x4f, 0x1e, 0x11, 0x7d, 0xfb, 0xcc, 0x21, 0x1f, 0x42, 0xce,
	0x12, 0x81, 0x53, 0xb3, 0x3b, 0xe9, 0xdd, 0xe2, 0xb3, 0xbb, 0xe8, 0x4c, 0x22, 0xa2, 0x7a, 0xc0,
	0x81, 0x3b, 0xe9, 0xb8, 0xce, 0x90, 0xaa, 0x79, 0xb1, 0x93, 0x1c, 0x20, 0xdb, 0x50, 0x60, 0xf6,
	0x84, 0xfa, 0xcc, 0x9a, 0x4c, 0xd5, 0x02, 0x0f, 0x5d, 0x84, 0xc0, 0x40, 0x8c, 0xa8, 0x3f, 0x54,
	0x4b, 0x22, 0x10, 0xf8, 0x1b, 0xb7, 0xe8, 0x92, 0x7a, 0xbe, 0xed, 0x3a, 0xea, 0xfa, 0x8e, 0xb2,
	0xbb, 0xa6, 0x07, 0xa0, 0xf6, 0xcf, 0x0a, 0xe4, 0x8d, 0x79, 0x9f, 0x59, 0x6c, 0xe6, 0xc7, 0xe2,
	0xac, 0x5c, 0x1b, 0xe7, 0xeb, 0x62, 0x1a, 0xc4, 0x3f, 0x1d, 0x8b, 0xff, 0x6f, 0x41, 0xd6, 0xe7,
	0x92, 0x79, 0x14, 0x2b, 0xcf, 0x1e, 0x70, 0x57, 0x3d, 0xcb, 0xf1, 0xad, 0x21, 0xa6, 0xae, 0x50,
	0xab, 0x4b, 0x26, 0x52, 0x83, 0xfc, 0xc8, 0xf6, 0x99, 0x85, 0x0e, 0xaf, 0x71, 0xb7, 0x42, 0x98,
	0x3c, 0x86, 0x14, 0x9b, 0xab, 0x39, 0x6e, 0xd6, 0xfa, 0x82, 0x18, 0x3d, 0xc5, 0xe6, 0x5a, 0x17,
	0xf2, 0xfb, 0x16, 0x1b, 0x9e, 0x1b, 0xf3, 0x9b, 0xf9, 0xf1, 0x08, 0xd2, 0xc6, 0xdc, 0x57, 0x53,
	0x7c, 0x0f, 0x4a, 0x62, 0x0f, 0xa4, 0x3d, 0x48, 0xd0, 0xfe, 0x57, 0x81, 0xb5, 0xfd, 0xb1, 0x3b,
	0xbc, 0xf8, 0x41, 0x51, 0x51, 0x21, 0x77, 0x82, 0x42, 0xc2, 0xc0, 0x04, 0x20, 0xd9, 0x5b, 0x88,
	0xcd, 0x06, 0x4a, 0xe5, 0x0a, 0xf7, 0x5a, 0xfc, 0xdf, 0x42, 0x70, 0x7e, 0x02, 0x6b, 0x7c, 0x29,
	0x8f, 0x8c, 0xcc, 0x9a, 0xb6, 0xc3, 0xa8, 0xe7, 0x58, 0x63, 0xce, 0xaf, 0x0b, 0xba, 0xf6, 0xbb,
	0x50, 0x8a, 0x0b, 0x20, 0x05, 0x58, 0x6b, 0xe9, 0x7a, 0x4f, 0xaf, 0xde, 0xc1, 0x9f, 0x86, 0x3e,
	0xe8, 0xbe, 0xaa, 0x2a, 0x04, 0x20, 0xbb, 0xaf, 0xd7, 0xbb, 0x8d, 0x97, 0xd5, 0x14, 0x29, 0x42,
	0xae, 0xdb, 0x6b, 0x1d, 0xb7, 0xfb, 0x46, 0x35, 0xad, 0xfd, 0x5a, 0x81, 0x1c, 0x5f, 0xde, 0x6e,
	0xc6, 0x3c, 0xcf, 0xdc, 0xc0, 0x73, 0xe5, 0x3a, 0xcf, 0x53, 0x49, 0xcf, 0xdf, 0x85, 0x92, 0x43,
	0xe9, 0xc8, 0x1c, 0xba, 0x0e, 0xa3, 0x8e, 0x38, 0xfc, 0x79, 0xbd, 0x88, 0xb8, 0x86, 0x40, 0x69,
	0x3f, 0x83, 0x62, 0xc3, 0x9d, 0x4c, 0x5c, 0x47, 0xa7, 0xd3, 0xf1, 0xd5, 0x4d, 0x76, 0x40, 0xdb,
	0x83, 0xbc, 0x58, 0xd2, 0x76, 0x6e, 0xc4, 0xff, 0x87, 0x50, 0x34, 0xdc, 0x0b, 0xea, 0x34, 0x29,
	0xb3, 0xec, 0xf1, 0xb7, 0xba, 0x61, 0x8d, 0x79, 0x4a, 0x8a, 0x9d, 0x0d, 0xc0, 0xdb, 0x94, 0xcc,
	0x29, 0x94, 0xeb, 0xa2, 0x24, 0xde, 0xe2, 0xa0, 0xc5, 0xca, 0x6a, 0x2a, 0x59, 0x56, 0xdf, 0x85,
	0xf4, 0xc9, 0xd0, 0x57, 0xd3, 0x3c, 0x75, 0xc5, 0x61, 0x88, 0x3c, 0xd1, 0x91, 0xa6, 0xfd, 0x9d,
	0x02, 0x39, 0x63, 0xde, 0x76, 0xa6, 0x33, 0x46, 0x36, 0x21, 0xef, 0xd1, 0x53, 0x33, 0x56, 0x1d,
	0x73, 0x1e, 0x3d, 0x35, 0xf0, 0x80, 0xbe, 0x03, 0x80, 0x24, 0xf7, 0xf4, 0xd4, 0xa7, 0xa2, 0x48,
	0xaf, 0xe9, 0x05, 0x8f, 0x9e, 0xf6, 0x38, 0x22, 0x59, 0x27, 0xd7, 0x44, 0x21, 0x0b, 0xeb, 0x64,
	0x54, 0xdc, 0xb3, 0x9c, 0x72, 0x6d, 0x71, 0xcf, 0xad, 0x28, 0xee, 0x7f, 0x80, 0x55, 0xa7, 0x37,
	0x63, 0x68, 0x5f, 0x24, 0x48, 0x49, 0x08, 0x7a, 0x08, 0x39, 0xe6, 0x0a, 0xdd, 0x22, 0x83, 0xb2,
	0xcc, 0xe5, 0x9a, 0x97, 0x34, 0x64, 0x56, 0x68, 0xf8, 0xcb, 0x35, 0x28, 0xc6, 0x6a, 0xc4, 0xca,
	0xe7, 0xc3, 0xf5, 0x39, 0xba, 0x0b, 0x05, 0x36, 0x37, 0x6d, 0x8c, 0x5f, 0x10, 0xe8, 0xa2, 0xa8,
	0x11, 0x3c, 0xa6, 0x7a, 0x9e, 0x89, 0x1f, 0x3e, 0xf9, 0x10, 0x80, 0xcd, 0x4d, 0x97, 0xbb, 0x82,
	0x67, 0x39, 0x56, 0x4e, 0x84, 0x7f, 0x7a, 0x81, 0xc9, 0x5f, 0x7e, 0x58, 0x9b, 0xb3, 0xb1, 0xda,
	0x5c, 0x83, 0xfc, 0xd0, 0xb5, 0x9d, 0x13, 0xcb, 0xa7, 0x3c, 0x54, 0x79, 0x3d, 0x84, 0xbf, 0x57,
	0xfd, 0x8f, 0xd5, 0x7a, 0x48, 0xd4, 0x7a, 0x9e, 0x51, 0x33, 0xe6, 0x9e, 0x51, 0x47, 0x2d, 0x72,
	0x45, 0x01, 0x48, 0x9e, 0x41, 0x39, 0x74, 0xd7, 0xa4, 0x73, 0xa6, 0x3e, 0xe4, 0x7e, 0x54, 0x62,
	0x2e, 0xb7, 0xe6, 0x4c, 0x2f, 0x06, 0x5e, 0xb7, 0xe6, 0x8c, 0xfc, 0x02, 0x2a, 0x91, 0xe3, 0x7c,
	0x91, 0x1a, 0x4b, 0x48, 0xe9, 0x32, 0xae, 0x2a, 0x85, 0xfe, 0xe3, 0xb2, 0xcf, 0xa0, 0x8a, 0x07,
	0xdf, 0xb3, 0x86, 0xcc, 0xf4, 0xe8, 0x57, 0x33, 0xea, 0x33, 0x75, 0x33, 0x5e, 0xd2, 0x2e, 0xdd,
	0x0b, 0xaa, 0x0b, 0x82, 0xbe, 0x1e, 0xb0, 0x4a, 0x04, 0xba, 0x6e, 0x3b, 0x36, 0xb3, 0x2d, 0xe6,
	0x7a, 0x6a, 0x8d, 0x07, 0x25, 0x42, 0x60, 0x65, 0xb1, 0x66, 0xec, 0x9c, 0xcb, 0xb5, 0x3d, 0xaa,
	0x6e, 0xed, 0xa4, 0x77, 0x0b, 0x7a, 0x11, 0x71, 0xba, 0x40, 0x91, 0x4f, 0x61, 0x3d, 0xe4, 0xe7,
	0x0f, 0x68, 0x5f, 0xdd, 0x8e, 0x1e, 0xc3, 0xf8, 0x84, 0xb6, 0xd8, 0xcc, 0xa3, 0x6d, 0xe7, 0xd4,
	0xd5, 0x2b, 0x21, 0x27, 0xe2, 0x7d, 0xf2, 0x05, 0x90, 0xb8, 0x78, 0xb9, 0xfc, 0x9d, 0xeb, 0x96,
	0x57, 0x63, 0x7a, 0xb9, 0x00, 0xed, 0x6f, 0x14, 0x80, 0x0e, 0x1d, 0x9d, 0x51, 0xef, 0x80, 0x32,
	0x0b, 0xcd, 0xf5, 0x5c, 0x97, 0x99, 0x41, 0x0e, 0x8a, 0xd4, 0x2c, 0x22, 0x6e, 0x5f, 0xe6, 0xe1,
	0x63, 0x28, 0x32, 0x7b, 0x6a, 0x26, 0xb3, 0x14, 0x98, 0x3d, 0xdd, 0x8f, 0x8a, 0x29, 0xf3, 0x66,
	0xce, 0x45, 0xb2, 0x93, 0x2a, 0x72, 0x9c, 0x38, 0x09, 0xe4, 0x09, 0x54, 0x26, 0xd6, 0x5c, 0xc8,
	0x30, 0x7d, 0xfb, 0x6b, 0x1a, 0x9c, 0x97, 0x89, 0x35, 0x17, 0x0f, 0x0a, 0xfb, 0x6b, 0xaa, 0x31,
	0xc8, 0x0f, 0xd8, 0xdc, 0xe5, 0x86, 0xfd, 0x06, 0x54, 0xc6, 0x16, 0xa3, 0xfe, 0xa2, 0x69, 0x65,
	0x81, 0x0d, 0x74, 0x6b, 0x50, 0xe6, 0x32, 0x2f, 0xe8, 0x95, 0x39, 0xb6, 0x7d, 0xc6, 0x1f, 0xa6,
	0x05, 0xbd, 0x88, 0xc8, 0x57, 0xf4, 0xaa, 0x63, 0xfb, 0x0c, 0x2b, 0xcc, 0x8c, 0xcd, 0x5d, 0x93,
	0xb9, 0xcc, 0x1a, 0xcb, 0x5e, 0xab, 0x80, 0x18, 0x03, 0x11, 0xda, 0xff, 0x65, 0xa0, 0x9c, 0x78,
	0x8a, 0xc5, 0xd3, 0x57, 0x49, 0xa6, 0x6f, 0x78, 0x18, 0x44, 0x9d, 0x92, 0x87, 0xe1, 0xfa, 0x27,
	0xec, 0x26, 0xe4, 0xa7, 0x1e, 0x35, 0xcf, 0x2d, 0xff, 0x9c, 0x7b, 0x5c, 0xd2, 0x73, 0x53, 0x8f,
	0xbe, 0xb4, 0xfc, 0x73, 0x3c, 0x73, 0x53, 0xcf, 0x9d, 0xba, 0x3e, 0x0d, 0xeb, 0x5a, 0x00, 0xe3,
	0x19, 0xe5, 0x8d, 0x9b, 0x3c, 0xa3, 0xf8, 0x1b, 0x4b, 0x94, 0x6c, 0x07, 0x73, 0xa2, 0x12, 0x4d,
	0xc3, 0x56, 0x70, 0x42, 0xbd, 0x8b, 0x31, 0x35, 0x71, 0xd3, 0xf8, 0x29, 0x2d, 0xe9, 0x20, 0x50,
	0xba, 0xeb, 0xf2, 0xda, 0x26, 0x37, 0x46, 0x9c, 0x53, 0x09, 0x25, 0x8f, 0x30, 0x2c, 0x1e, 0xe1,
	0x8f, 0x70, 0x53, 0xc3, 0xd2, 0xe5, 0xab, 0xc5, 0xd8, 0xc1, 0x8a, 0xb5, 0x3d, 0x09, 0x26, 0x74,
	0x97, 0xcd, 0x4d, 0xd1, 0x59, 0x96, 0x44, 0xe4, 0xd8, 0xbc, 0xc1, 0x2b, 0x69, 0x64, 0x26, 0xf3,
	0x28, 0x55, 0xcb, 0x3b, 0xe9, 0xc8, 0x4c, 0xc3, 0xa3, 0x3c, 0x88, 0xc3, 0x99, 0x67, 0x50, 0x6f,
	0xa2, 0x56, 0xb9, 0x31, 0x01, 0x48, 0x76, 0xa0, 0x38, 0x9c, 0x79, 0x7c, 0x6b, 0xba, 0xb3, 0x89,
	0x7a, 0x57, 0xa4, 0x57, 0x0c, 0x45, 0xbe, 0x00, 0x38, 0xb5, 0xec, 0x31, 0x1d, 0x99, 0x6c, 0xee,
	0xab, 0x84, 0x9b, 0xba, 0xb3, 0xd4, 0x9d, 0xec, 0x3d, 0xe7, 0x3c, 0xc6, 0xdc, 0x6f, 0x39, 0xcc,
	0xbb, 0xd2, 0x0b, 0xa7, 0x01, 0x8c, 0x86, 0xdb, 0x8e, 0xc9, 0x33, 0x96, 0x77, 0xcb, 0x79, 0x3d,
	0x67, 0x3b, 0x06, 0x82, 0xf8, 0x00, 0x72, 0xe8, 0x9c, 0x89, 0x3d, 0x5c, 0x17, 0x1b, 0x85, 0x08,
	0xdc, 0xc4, 0xda, 0x67, 0x50, 0x49, 0x0a, 0x25, 0x55, 0x48, 0xe3, 0x1e, 0x89, 0x27, 0x38, 0xfe,
	0xc4, 0x9c, 0xb9, 0xb4, 0xc6, 0xb3, 0xe0, 0xe1, 0x2d, 0x80, 0x4f, 0x53, 0x9f, 0x28, 0xda, 0x3f,
	0x2a, 0x90, 0xdf, 0x6f, 0xbc, 0x85, 0xc6, 0x57, 0x83, 0xcc, 0x84, 0x32, 0x8b, 0x67, 0x9f, 0x2c,
	0x99, 0xd1, 0x19, 0xd7, 0x39, 0x2d, 0x6a, 0xde, 0x32, 0xdf, 0xde, 0xbc, 0x91, 0x5d, 0xc8, 0xcf,
	0xe4, 0x29, 0x94, 0x8d, 0x1e, 0x7f, 0x96, 0x04, 0x27, 0x53, 0x0f, 0xa9, 0x5a, 0x1f, 0x8a, 0xfb,
	0x0d, 0xc3, 0x9e, 0xde, 0xc2, 0x83, 0x1d, 0x28, 0xd9, 0xbe, 0x08, 0xb4, 0xc9, 0xec, 0x29, 0xf7,
	0x23, 0xaf, 0x83, 0xed, 0xf3, 0x60, 0x1b, 0xf6, 0x94, 0x0b, 0x45, 0x3b, 0x78, 0x1b, 0x73, 0x53,
	0xa1, 0x45, 0x6e, 0x3a, 0xbf, 0xac, 0xfa, 0x41, 0x09, 0x88, 0xa1, 0xb4, 0x3f, 0x4d, 0x41, 0xb6,
	0x3f, 0xa5, 0x74, 0xe4, 0x93, 0x8f, 0xa1, 0xd0, 0x9f, 0x4d, 0x04, 0xa0, 0x2a, 0x3c, 0x55, 0x36,
	0x79, 0xe1, 0xe4, 0x98, 0xbd, 0x90, 0x26, 0x73, 0x24, 0x84, 0xc9, 0xcf, 0x21, 0xbf, 0x3f, 0x94,
	0xeb, 0x44, 0xcb, 0xae, 0xc6, 0xd6, 0x05, 0x24, 0xb1, 0x2c, 0xe4, 0xc4, 0x0c, 0x49, 0x8a, 0xfc,
	0xae, 0x0c, 0x51, 0x62, 0x19, 0x52, 0x6b, 0x43, 0x39, 0x21, 0x78, 0xc5, 0x62, 0x2d, 0xbe, 0x58,
	0xee, 0xd5, 0x7e, 0x43, 0xac, 0x89, 0x27, 0xdb, 0x37, 0x3c, 0xd7, 0x84, 0x2b, 0x1f, 0x41, 0x4e,
	0x8a, 0x8d, 0x47, 0x20, 0x20, 0x07, 0xbe, 0x08, 0x57, 0x02, 0xce, 0xda, 0xa7, 0x50, 0x8a, 0x13,
	0x6e, 0xe3, 0x87, 0xf6, 0xf7, 0x0a, 0x94, 0xfb, 0x57, 0x3e, 0xa3, 0x93, 0xdb, 0xb4, 0x9f, 0x1f,
	0x02, 0x9c, 0x0c, 0x7d, 0x53, 0xde, 0x51, 0x62, 0xd7, 0xa4, 0xe0, 0xd0, 0xe8, 0x85, 0x93, 0x61,
	0x4c, 0xa0, 0x2f, 0x36, 0x27, 0x1d, 0x09, 0x94, 0x61, 0x90, 0x14, 0x5e, 0x73, 0x29, 0xf5, 0x06,
	0xde, 0x58, 0xb4, 0x49, 0x05, 0x3d, 0x84, 0x35, 0x0f, 0x48, 0xc2, 0xc2, 0x1b, 0xb7, 0xfd, 0xe4,
	0x13, 0xa8, 0xf8, 0x62, 0x65, 0x64, 0x6a, 0x78, 0xc4, 0x92, 0x32, 0xcb, 0x7e, 0x1c, 0xd4, 0x9a,
	0x90, 0xd5, 0xad, 0x5f, 0x0d, 0xbc, 0xf1, 0x4d, 0x4f, 0xbf, 0xc7, 0xb9, 0x83, 0xd3, 0x2f, 0x20,
	0xed, 0x2f, 0x14, 0xc8, 0xe0, 0xe9, 0xbc, 0xb6, 0x8b, 0xdd, 0x00, 0xd9, 0xb6, 0x2e, 0x34, 0xb1,
	0x35, 0xc8, 0x33, 0x57, 0x4c, 0x14, 0xe4, 0x83, 0x2b, 0x84, 0xb1, 0x1c, 0xcb, 0x0e, 0x3d, 0x78,
	0x70, 0x05, 0x0d, 0xfb, 0x36, 0x44, 0xed, 0x39, 0x2f, 0x10, 0xf1, 0x7e, 0x5d, 0xfb, 0x37, 0x05,
	0x0a, 0x68, 0x8c, 0xe8, 0xfb, 0x7f, 0xe0, 0xbd, 0x35, 0xb8, 0x7c, 0xa4, 0x93, 0x97, 0x8f, 0x6d,
	0x28, 0x4c, 0x67, 0x27, 0x63, 0x7b, 0x18, 0x0d, 0x47, 0x22, 0x04, 0x7f, 0xae, 0xe1, 0x83, 0xbd,
	0x8b, 0xe9, 0x2d, 0x26, 0x23, 0x11, 0x02, 0x7d, 0x0e, 0xe6, 0x20, 0xf2, 0x41, 0x1a, 0xcd, 0x45,
	0x6a, 0x90, 0xc7, 0x1b, 0x60, 0x07, 0xab, 0x64, 0x5e, 0xb4, 0xc1, 0x01, 0xac, 0xfd, 0x11, 0x00,
	0xba, 0x25, 0xef, 0x0b, 0x37, 0xf1, 0xeb, 0x89, 0xa8, 0xa3, 0x9d, 0xa0, 0x2b, 0x29, 0x3e, 0xcb,
	0x07, 0x75, 0x54, 0x0f, 0x29, 0xe4, 0x09, 0x94, 0xb9, 0x71, 0x7d, 0x3a, 0xa6, 0x43, 0x46, 0x47,
	0xd2, 0xd7, 0x24, 0x52, 0xfb, 0x07, 0x05, 0x2a, 0x5d, 0x8b, 0xd9, 0x97, 0xb4, 0xe1, 0x8e, 0x68,
	0x13, 0x7b, 0x76, 0x02, 0x99, 0xd8, 0x5d, 0x31, 0x13, 0x84, 0x2c, 0x68, 0x5c, 0xe4, 0x7d, 0x2d,
	0x68, 0x5c, 0x36, 0x20, 0x3b, 0xb2, 0xcf, 0xb0, 0xd1, 0x15, 0x1b, 0x2d, 0x21, 0x2c, 0x9d, 0x53,
	0x8f, 0x5e, 0x1e, 0xc9, 0x55, 0x22, 0x98, 0x71, 0x14, 0xd9, 0x85, 0xf5, 0xf9, 0x6c, 0x4a, 0xbd,
	0xfa, 0xd4, 0x0e, 0xb8, 0xc4, 0xa6, 0x2f, 0xa2, 0xb5, 0xdf, 0x87, 0xd2, 0x6b, 0xcb, 0x9f, 0x84,
	0x16, 0x62, 0x0a, 0xcd, 0x1c, 0x6c, 0x29, 0x82, 0xa1, 0x9c, 0x04, 0xc5, 0x7d, 0x63, 0x32, 0xb5,
	0xc7, 0xd4, 0x0b, 0xc6, 0x80, 0x01, 0x7c, 0x9d, 0xa5, 0xda, 0x7f, 0x28, 0xf0, 0xb0, 0x49, 0xa7,
	0x63, 0xf7, 0x2a, 0x0a, 0x44, 0xd0, 0x92, 0xff, 0x90, 0x34, 0x7b, 0x5f, 0xde, 0x87, 0x44, 0xd5,
	0x20, 0xb8, 0x32, 0x19, 0x69, 0x79, 0x47, 0x22, 0x90, 0x19, 0xba, 0x23, 0x2a, 0x4f, 0x03, 0xff,
	0x1d, 0x4f, 0xd1, 0xb5, 0xa5, 0xb1, 0xa3, 0xec, 0xd6, 0xb2, 0x89, 0x6e, 0x2d, 0xe8, 0xec, 0x72,
	0x51, 0x67, 0xa7, 0x7d, 0x0e, 0xea, 0xb2, 0x63, 0xfe, 0xd4, 0x75, 0x7c, 0x7a, 0xa3, 0x31, 0xc2,
	0x18, 0xaa, 0xd1, 0x4a, 0x59, 0x0d, 0x03, 0xaf, 0x94, 0xef, 0xf0, 0x6a, 0x23, 0x1c, 0x01, 0x89,
	0x8e, 0x36, 0x18, 0xf5, 0xa8, 0x90, 0x3b, 0xa7, 0xd6, 0x98, 0x9d, 0x5f, 0xc9, 0xd9, 0x48, 0x00,
	0x6a, 0x03, 0x78, 0xb8, 0xa8, 0xed, 0x2d, 0x6c, 0x83, 0x36, 0x06, 0x75, 0x59, 0xec, 0xcd, 0x83,
	0x40, 0x7e, 0x33, 0xe6, 0x08, 0x9e, 0xb5, 0xfb, 0x49, 0x97, 0x93, 0x93, 0x2c, 0xad, 0x0f, 0x0f,
	0x9a, 0x53, 0xd7, 0x6f, 0x58, 0xce, 0xc8, 0x1e, 0xe1, 0x85, 0xe2, 0x6d, 0xb8, 0x30, 0x82, 0x8d,
	0x45, 0xa1, 0xb7, 0x70, 0xe0, 0x7d, 0xa8, 0x0c, 0xc3, 0x95, 0x78, 0x79, 0x93, 0x7d, 0xcc, 0x02,
	0x56, 0xf3, 0xa0, 0x86, 0x5a, 0xba, 0xee, 0xc4, 0x76, 0x2c, 0x46, 0x75, 0x3a, 0x74, 0xbd, 0xd1,
	0xdb, 0xb0, 0xff, 0xfa, 0x82, 0xab, 0x35, 0xa1, 0x1a, 0xd7, 0x89, 0x76, 0x60, 0x99, 0x0d, 0x2d,
	0x93, 0xe7, 0x3b, 0x42, 0x84, 0xa3, 0x0e, 0xa1, 0x81, 0xff, 0xd6, 0xfe, 0x4c, 0x81, 0xad, 0x95,
	0xa6, 0xdf, 0x22, 0x4a, 0x9f, 0xc3, 0xba, 0x93, 0x5c, 0x1e, 0xdf, 0xef, 0x45, 0x23, 0xf5, 0x45,
	0x66, 0xed, 0x2b, 0xd8, 0x0c, 0x99, 0xe8, 0x8f, 0x13, 0x3c, 0x23, 0xb6, 0x61, 0xf4, 0x7b, 0x39,
	0xbd, 0x2a, 0x98, 0x8e, 0x48, 0xb6, 0x23, 0xf7, 0x47, 0x4a, 0x81, 0xcf, 0x01, 0x2e, 0x43, 0x5d,
	0xdf, 0x63, 0xf3, 0x7f, 0x05, 0x0f, 0x97, 0xec, 0xbd, 0x45, 0x08, 0x3e, 0x81, 0x75, 0x54, 0x8f,
	0x0d, 0x48, 0x72, 0xdf, 0xf9, 0x65, 0x27, 0xb2, 0x4c, 0x5f, 0x64, 0xd3, 0xdc, 0x48, 0xf1, 0xe8,
	0x47, 0x89, 0xd4, 0xc7, 0x50, 0xbc, 0x8c, 0x94, 0xf1, 0xa6, 0xd8, 0x65, 0x52, 0x07, 0x5e, 0xff,
	0x10, 0x58, 0x19, 0xa2, 0x6f, 0x40, 0x5d, 0xb6, 0xf4, 0x16, 0x31, 0xfa, 0x1d, 0xa8, 0x72, 0xc5,
	0xcb, 0x41, 0x5a, 0x0f, 0x82, 0x24, 0xf1, 0xfa, 0x12, 0xa3, 0x66, 0x8b, 0x30, 0x35, 0xce, 0xe9,
	0xf0, 0x42, 0xa7, 0xfe, 0x6c, 0xcc, 0xde, 0x4a, 0x98, 0xd0, 0x4f, 0xbc, 0xd2, 0x8b, 0x99, 0x10,
	0xff, 0xad, 0x31, 0xe1, 0x67, 0x52, 0xd5, 0x2d, 0x8f, 0x03, 0xca, 0x4c, 0x45, 0x32, 0xf9, 0x8c,
	0x20, 0x92, 0xc7, 0xc7, 0xa5, 0x05, 0x3d, 0x8e, 0xd2, 0xbe, 0x81, 0xaa, 0x1c, 0xec, 0x1d, 0x36,
	0xde, 0x86, 0x67, 0x1f, 0x62, 0x83, 0x2c, 0x66, 0x87, 0xe9, 0xeb, 0x66, 0x87, 0x01, 0x87, 0xf6,
	0x27, 0x70, 0x37, 0xa6, 0xfc, 0x16, 0xbe, 0x5e, 0xa7, 0x7d, 0x0f, 0xf2, 0x9e, 0x94, 0x13, 0xef,
	0x5c, 0x02, 0xf5, 0x82, 0xa2, 0x87, 0x3c, 0xda, 0x7f, 0x2a, 0x50, 0x4e, 0xd8, 0xc6, 0x07, 0x32,
	0xee, 0x68, 0x36, 0xa6, 0x66, 0xac, 0x8d, 0x04, 0x81, 0xea, 0xa2, 0x8a, 0xf7, 0xa0, 0x1c, 0x4e,
	0x49, 0x63, 0x16, 0x94, 0x02, 0x24, 0x67, 0xe2, 0x63, 0x1d, 0x76, 0xee, 0x8e, 0x04, 0x4b, 0x5a,
	0x4a, 0xe1, 0x28, 0xce, 0xf0, 0x14, 0x32, 0x96, 0x77, 0x16, 0x4c, 0xa5, 0xb7, 0x96, 0x62, 0xb4,
	0x57, 0xf7, 0xce, 0xe4, 0xa5, 0x99, 0x33, 0xd6, 0x3e, 0x86, 0x42, 0x88, 0xfa, 0xae, 0x3b, 0x66,
	0x29, 0x7e, 0xc7, 0xfc, 0x5b, 0x05, 0x2a, 0x49, 0xff, 0xc9, 0xfb, 0x90, 0x95, 0xf3, 0x73, 0x65,
	0xe5, 0x30, 0x59, 0x52, 0xc9, 0x4f, 0x21, 0x17, 0x4c, 0xcf, 0x53, 0xab, 0x07, 0xc8, 0x01, 0x1d,
	0x5b, 0xd7, 0x44, 0xe0, 0x4b, 0x51, 0x90, 0xc9, 0x26, 0xe4, 0xcf, 0x2c, 0xdf, 0x9c, 0xf9, 0x74,
	0x24, 0xe7, 0x9b, 0xb9, 0x33, 0xcb, 0x1f, 0xf8, 0x74, 0xa4, 0x4d, 0x01, 0x22, 0xbd, 0x7c, 0x57,
	0x67, 0xc3, 0x0b, 0xca, 0xc2, 0x37, 0x3d, 0x1c, 0x0a, 0xdc, 0x15, 0xae, 0x71, 0x77, 0xe3, 0x2f,
	0x4e, 0xd2, 0xdf, 0xf6, 0xe2, 0x24, 0xb3, 0x78, 0x11, 0x3b, 0x80, 0x62, 0xcc, 0x81, 0x5b, 0xa8,
	0x0c, 0x23, 0x9c, 0x8e, 0x45, 0x58, 0xab, 0x43, 0x39, 0x31, 0x5a, 0xc6, 0x47, 0xc0, 0x21, 0xbf,
	0x73, 0xbd, 0x0a, 0x37, 0x28, 0x42, 0xe0, 0x19, 0xe5, 0x57, 0x2c, 0x21, 0x97, 0xff, 0xd6, 0x7e,
	0x09, 0xeb, 0x87, 0xd4, 0x9b, 0xd8, 0x3e, 0xde, 0x16, 0x0e, 0xdc, 0x11, 0x1d, 0x63, 0x9b, 0xea,
	0xcd, 0xc6, 0x22, 0xfb, 0x2a, 0x22, 0x85, 0x23, 0x16, 0x7d, 0x36, 0xa6, 0x3a, 0xa7, 0xe3, 0xf1,
	0xb6, 0x86, 0x43, 0x3a, 0x65, 0x47, 0xb1, 0xf9, 0x42, 0x1c, 0xa5, 0x6d, 0xc2, 0x5a, 0xfd, 0xa2,
	0x2f, 0x1c, 0xb2, 0x2e, 0xc4, 0x86, 0x17, 0x74, 0xfc, 0xa9, 0xfd, 0xb5, 0x02, 0x59, 0x4e, 0xf3,
	0xc9, 0x2e, 0x64, 0x7c, 0x1a, 0xa6, 0x03, 0xef, 0x19, 0x04, 0x65, 0x0f, 0xff, 0xc8, 0x34, 0x44,
	0x0e, 0xf2, 0x08, 0x80, 0xce, 0xa7, 0x58, 0xd0, 0xa3, 0xdb, 0x54, 0x0c, 0x53, 0xdb, 0x87, 0x42,
	0xb8, 0x64, 0x45, 0x9a, 0x3e, 0x4e, 0x4e, 0x65, 0x0a, 0xa1, 0xa6, 0x78, 0xc6, 0xfe, 0x93, 0x02,
	0xe9, 0xfa, 0x70, 0x4c, 0xde, 0x83, 0xd4, 0x74, 0x22, 0x8b, 0xc0, 0xbd, 0x64, 0x0c, 0x78, 0x98,
	0xf4, 0xd4, 0x74, 0x42, 0x7e, 0x0e, 0x05, 0xeb, 0xc2, 0x7f, 0x2d, 0x26, 0xb9, 0x22, 0x4b, 0xf9,
	0xfb, 0xda, 0xfa, 0x70, 0xbc, 0x57, 0x0f, 0x08, 0x72, 0x68, 0x15, 0x32, 0x62, 0x8d, 0xb1, 0xb8,
	0x83, 0xf1, 0xa9, 0x88, 0x70, 0x59, 0x97, 0x94, 0xda, 0x67, 0x50, 0x49, 0x0a, 0xb8, 0xd5, 0x68,
	0xe7, 0x7f, 0x14, 0x28, 0xd4, 0x87, 0xe3, 0xb7, 0x30, 0xc5, 0x14, 0x9b, 0xec, 0xce, 0x1c, 0x5e,
	0x5a, 0x64, 0x2d, 0x89, 0xa3, 0x88, 0x06, 0x89, 0xea, 0x23, 0xaf, 0xab, 0xc9, 0x8a, 0xf4, 0x08,
	0x62, 0xe5, 0x27, 0xf8, 0x32, 0x22, 0x56, 0x90, 0xb0, 0x75, 0x71, 0x9d, 0x53, 0xdb, 0x9b, 0xd0,
	0x11, 0xbf, 0x9c, 0xe5, 0xf5, 0x08, 0x41, 0x36, 0x21, 0x6d, 0x0d, 0xc7, 0xf2, 0x25, 0x7f, 0x4e,
	0xc6, 0x57, 0x47, 0x9c, 0xf6, 0xe7, 0x0a, 0x94, 0xda, 0x23, 0xea, 0x30, 0x9b, 0x5d, 0xd5, 0x67,
	0xec, 0x3c, 0xbc, 0xcb, 0x29, 0x2b, 0xa7, 0xf4, 0xa9, 0xc5, 0x7b, 0x5f, 0xec, 0x4b, 0x0f, 0xfe,
	0x9b, 0xf3, 0x52, 0xea, 0xb5, 0x9b, 0xd2, 0x0f, 0x09, 0x25, 0x07, 0xf3, 0xc1, 0x00, 0x23, 0x40,
	0x68, 0xbf, 0x80, 0x72, 0xdc, 0x0a, 0x9f, 0x3c, 0x81, 0x8c, 0x35, 0x63, 0xe7, 0x32, 0xa7, 0xab,
	0xbc, 0xc2, 0xc6, 0x18, 0x74, 0x4e, 0xfd, 0xe0, 0x5f, 0xd6, 0x60, 0x7d, 0xe1, 0xd5, 0x30, 0x29,
	0x42, 0xae, 0x3f, 0x68, 0x34, 0x5a, 0xfd, 0x7e, 0xf5, 0x0e, 0xa9, 0x42, 0x69, 0xd0, 0x7d, 0xd5,
	0xed, 0xbd, 0x36, 0xc5, 0xab, 0x7a, 0x85, 0x10, 0xa8, 0x34, 0x7a, 0xdd, 0x6e, 0xab, 0x61, 0x98,
	0x7a, 0xeb, 0xf9, 0xa0, 0xdf, 0xaa, 0xa6, 0xc8, 0x26, 0x3c, 0xe8, 0xf6, 0x0c, 0xb3, 0xd5, 0xed,
	0x0d, 0x5e, 0xbc, 0x34, 0x07, 0xc6, 0x71, 0x4f, 0xb2, 0xa7, 0x89, 0x06, 0x8f, 0x10, 0x3e, 0x3a,
	0x30, 0xeb, 0x1d, 0xbd, 0x55, 0x6f, 0xbe, 0x31, 0x07, 0xdd, 0x46, 0xaf, 0xfb, 0xbc, 0xad, 0x1f,
	0x48, 0x9e, 0x0c, 0xa9, 0xc1, 0x86, 0xe4, 0x41, 0x29, 0xcf, 0x7b, 0x83, 0x6e, 0x53, 0xd2, 0xd6,
	0xc8, 0x0e, 0x6c, 0xb7, 0xbb, 0x87, 0x03, 0xc3, 0xec, 0x0d, 0x0c, 0xfc, 0xc7, 0xf5, 0x7c, 0x39,
	0xa8, 0x77, 0x24, 0x47, 0x96, 0x6c, 0x00, 0x31, 0x8e, 0x97, 0x56, 0xe6, 0xc8, 0x5d, 0x28, 0x1b,
	0xc7, 0x66, 0xbf, 0xfd, 0xa2, 0x2b, 0x51, 0x79, 0xf2, 0x10, 0xee, 0xed, 0x77, 0x7a, 0x8d, 0x57,
	0x8d, 0x97, 0xf5, 0x76, 0x17, 0x97, 0x88, 0x6f, 0x0b, 0x0a, 0xe8, 0xd4, 0x51, 0xbd, 0xd3, 0x6e,
	0xd6, 0x8d, 0x96, 0x64, 0x06, 0xb2, 0x05, 0x0f, 0x1b, 0xf5, 0x2e, 0xca, 0xed, 0xbf, 0xe9, 0x36,
	0x4c, 0xbe, 0x50, 0x12, 0x8b, 0x28, 0x29, 0xf0, 0x22, 0x4e, 0x28, 0x91, 0x07, 0x70, 0x57, 0xfa,
	0x72, 0xd8, 0xa9, 0xbf, 0x91, 0xe8, 0x32, 0xa9, 0x00, 0xbc, 0xae, 0x77, 0x02, 0xb6, 0x0a, 0xb9,
	0x07, 0xeb, 0x28, 0x59, 0x44, 0x44, 0x20, 0xd7, 0x71, 0xad, 0x14, 0x86, 0x66, 0x49, 0x74, 0x15,
	0xc3, 0xa3, 0xf7, 0x7a, 0x86, 0xb9, 0x4c, 0xbb, 0x2b, 0x9d, 0x6f, 0x0e, 0x0e, 0x3b, 0xed, 0x46,
	0x64, 0xfc, 0x3d, 0xdc, 0x91, 0x7e, 0x4b, 0x3f, 0x6a, 0x37, 0x5a, 0x72, 0x97, 0x82, 0xb8, 0xdc,
	0x47, 0x2d, 0xc6, 0x71, 0xb3, 0x6e, 0xd4, 0xe3, 0xb1, 0x79, 0x80, 0x3b, 0x8d, 0xe1, 0xea, 0x04,
	0x32, 0x36, 0x31, 0x00, 0xc6, 0xb1, 0xf9, 0xbc, 0xd5, 0x32, 0x63, 0x9b, 0x2b, 0x88, 0x35, 0x74,
	0x80, 0xef, 0x73, 0x4c, 0xc6, 0x36, 0xb9, 0x0f, 0xd5, 0xe6, 0x61, 0xaf, 0x6f, 0x7e, 0x39, 0x68,
	0xe9, 0x81, 0x5b, 0x8f, 0x31, 0x56, 0xfa, 0xeb, 0x7e, 0xcb, 0x30, 0xdb, 0x5d, 0x1e, 0x64, 0x49,
	0x78, 0x57, 0x10, 0xea, 0x8d, 0xce, 0x02, 0x41, 0x23, 0x2a, 0xdc, 0x7f, 0x51, 0xef, 0x2f, 0xab,
	0x7d, 0x8f, 0x6c, 0x83, 0x6a, 0x1c, 0x9b, 0x47, 0x2d, 0xbd, 0xdf, 0xee, 0x75, 0x17, 0xd6, 0x3d,
	0xf9, 0xe0, 0x0d, 0xdc, 0x5d, 0xfa, 0x88, 0x87, 0x94, 0x20, 0x3f, 0xe8, 0x36, 0x5b, 0xcf, 0xdb,
	0xdd, 0x56, 0xf5, 0x4e, 0xfc, 0x93, 0x12, 0x05, 0x01, 0xb9, 0x8b, 0xd5, 0x14, 0x29, 0x43, 0xe1,
	0xf9, 0x40, 0x6f, 0xd4, 0x8d, 0x76, 0xaf, 0x5b, 0x4d, 0x23, 0x18, 0x66, 0x6a, 0x35, 0xf3, 0xc1,
	0x1f, 0x43, 0x25, 0xf9, 0x0c, 0x22, 0x79, 0xc8, 0x74, 0x07, 0x9d, 0x4e, 0xf5, 0x0e, 0x66, 0x0f,
	0x0f, 0x83, 0xf1, 0x52, 0x6f, 0xf5, 0x5f, 0xf6, 0x3a, 0xcd, 0xaa, 0x82, 0x1b, 0xce, 0x71, 0xf5,
	0x57, 0xfd, 0x96, 0x21, 0xa4, 0x73, 0x58, 0xaf, 0x1b, 0xad, 0x6a, 0x1a, 0x8d, 0xe2, 0x60, 0x7f,
	0x70, 0x50, 0xcd, 0x20, 0xb1, 0x51, 0x37, 0x71, 0xc3, 0x5a, 0x98, 0xf3, 0xfc, 0x88, 0x1d, 0x1c,
	0x0c, 0xba, 0x6d, 0xe3, 0x8d, 0x79, 0xd4, 0x33, 0x5a, 0xd5, 0xec, 0xb3, 0x7f, 0x2f, 0x42, 0xf6,
	0x98, 0xbf, 0xb7, 0x20, 0x5f, 0x40, 0xf6, 0xd0, 0xf5, 0x99, 0x31, 0x27, 0x89, 0xaf, 0x83, 0x6a,
	0xbc, 0x3d, 0x89, 0x7d, 0x9d, 0xa2, 0x6d, 0xfc, 0xfa, 0x5f, 0xff, 0xfb, 0xaf, 0x52, 0x55, 0xad,
	0xf8, 0xf4, 0xf2, 0x67, 0x4f, 0xa7, 0xae, 0xcf, 0x4c, 0x36, 0xff, 0x54, 0xf9, 0x80, 0xec, 0x43,
	0xfe, 0xcb, 0x19, 0xf5, 0xae, 0xea, 0x8d, 0x0e, 0x29, 0xcb, 0x6a, 0x26, 0x65, 0x24, 0x41, 0x4d,
	0xe5, 0x12, 0x88, 0x56, 0x46, 0x09, 0x5f, 0xe1, 0x1a, 0xd3, 0x1a, 0x8e, 0x51, 0xc6, 0xe7, 0x90,
	0xe3, 0x32, 0x96, 0xac, 0x48, 0x40, 0xda, 0x43, 0x2e, 0xe0, 0xae, 0x56, 0x8a, 0x04, 0x08, 0x1b,
	0xba, 0x00, 0x2f, 0x28, 0xdb, 0x97, 0x9f, 0xac, 0xf0, 0x2e, 0x39, 0xf1, 0x25, 0x4a, 0x6d, 0x19,
	0xa5, 0xd5, 0xb8, 0xb0, 0xfb, 0xda, 0x3a, 0x0a, 0x3b, 0xa3, 0xcc, 0x94, 0x5f, 0xbc, 0xa0, 0xbc,
	0x5f, 0x42, 0xf5, 0x05, 0x65, 0xcf, 0xf9, 0x87, 0x16, 0xb7, 0x93, 0xfa, 0x2e, 0x97, 0xba, 0xa5,
	0x6d, 0x04, 0x52, 0xe5, 0x27, 0x1c, 0x31, 0xe1, 0x9f, 0x41, 0x1e, 0x8d, 0xe5, 0x2f, 0xc2, 0x8a,
	0xe1, 0xe7, 0x50, 0xed, 0x66, 0xad, 0x10, 0x02, 0xc9, 0x50, 0x71, 0xe3, 0x10, 0x2d, 0x5c, 0xbd,
	0x17, 0xac, 0xe6, 0xa5, 0x36, 0xc8, 0xcb, 0xf8, 0x3b, 0x8b, 0x5a, 0x02, 0xd2, 0xb6, 0xb8, 0xb0,
	0x07, 0x5a, 0x35, 0x14, 0x36, 0x14, 0x33, 0x2a, 0x94, 0xd7, 0x86, 0x4a, 0x42, 0x9e, 0x14, 0x15,
	0x7c, 0x64, 0x24, 0xf2, 0x20, 0x46, 0x0e, 0x4c, 0x23, 0x31, 0x69, 0xe2, 0x0d, 0x18, 0x19, 0xc0,
	0xfa, 0x0b, 0xca, 0xc4, 0xdb, 0x88, 0xb8, 0x59, 0xa1, 0xac, 0x8d, 0xe5, 0xb7, 0x15, 0x3c, 0xb5,
	0xb6, 0xb9, 0xc8, 0x0d, 0xed, 0x6e, 0x20, 0xd2, 0xbf, 0xf2, 0x23, 0x0b, 0x7f, 0x02, 0x85, 0x17,
	0x94, 0x75, 0x29, 0x1b, 0xe8, 0x9d, 0x05, 0x81, 0xfc, 0xd1, 0x2f, 0x5e, 0x6f, 0x68, 0x77, 0xc8,
	0x2b, 0x00, 0x31, 0xcd, 0xc6, 0x5a, 0x22, 0x72, 0x31, 0x7c, 0x4d, 0x50, 0xab, 0x04, 0xa0, 0xe8,
	0x57, 0xb5, 0x47, 0x5c, 0xa7, 0xaa, 0xdd, 0x43, 0x9d, 0x3e, 0x5f, 0x66, 0xce, 0xd8, 0xdc, 0xf5,
	0xcd, 0xcb, 0x67, 0xa8, 0xf5, 0x00, 0xaa, 0x8b, 0x13, 0x53, 0xc2, 0xaf, 0x16, 0xd7, 0x0c, 0x88,
	0x6b, 0xdb, 0xab, 0x89, 0xb2, 0x6f, 0x3f, 0x58, 0x31, 0x40, 0xdd, 0x5a, 0x39, 0x3f, 0x8c, 0x8b,
	0xbb, 0x76, 0x5c, 0xf9, 0x02, 0x2a, 0xc9, 0x39, 0x20, 0xd9, 0x0c, 0x86, 0x53, 0x4b, 0x03, 0xc7,
	0x5a, 0x6d, 0x15, 0x49, 0x0a, 0x3a, 0x82, 0x7b, 0x2b, 0xe6, 0x65, 0xe4, 0xd1, 0xe2, 0xa8, 0x2b,
	0x39, 0xd6, 0xa8, 0x3d, 0xbe, 0x96, 0x2e, 0xe5, 0xf6, 0x81, 0x2c, 0x4f, 0xa4, 0xc8, 0x3b, 0x89,
	0x65, 0x8b, 0xc3, 0xb1, 0xda, 0xa3, 0xeb, 0xc8, 0x52, 0xe8, 0xef, 0xc1, 0xfa, 0xc2, 0x80, 0x87,
	0x84, 0xbe, 0x2d, 0x4f, 0xa9, 0x6a, 0x5b, 0x2b, 0x69, 0xd1, 0x86, 0x2c, 0x4e, 0x42, 0x48, 0x62,
	0xc1, 0xc2, 0x24, 0x47, 0xee, 0xef, 0x75, 0xc3, 0x13, 0x29, 0x2e, 0x3e, 0x70, 0x88, 0xc4, 0xad,
	0x98, 0x78, 0x44, 0xe2, 0x56, 0xce, 0x28, 0x7e, 0x1b, 0x72, 0x87, 0x1e, 0x6d, 0xcd, 0xe9, 0x90,
	0xdc, 0x8f, 0xdd, 0x67, 0xc3, 0xb1, 0x42, 0xed, 0xc1, 0x02, 0x56, 0xac, 0x3b, 0xc9, 0xf2, 0x8f,
	0xa4, 0x3f, 0xfa, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0xe3, 0xe3, 0xe8, 0x56, 0x2d, 0x00,
	0x00,
}
