syntax = "proto3";
 
import "google/api/annotations.proto";
import "chainedbft.proto";
package pb;


enum XChainErrorEnum {
  SUCCESS = 0;
  UNKNOW_ERROR = 1;
  CONNECT_REFUSE = 2;
  NOT_ENOUGH_UTXO_ERROR = 3;
  UTXOVM_ALREADY_UNCONFIRM_ERROR = 4;
  UTXOVM_NOT_FOUND_ERROR = 5;
  INPUT_OUTPUT_NOT_EQUAL_ERROR = 6;
  TX_NOT_FOUND_ERROR = 7;
  TX_SIGN_ERROR = 8;
  BLOCKCHAIN_NOTEXIST = 9;
  VALIDATE_ERROR = 10;
  CANNOT_SYNC_BLOCK_ERROR = 11;
  CONFIRM_BLOCK_ERROR = 12;
  UTXOVM_PLAY_ERROR = 13;
  WALK_ERROR = 14;
  NOT_READY_ERROR = 15;
  BLOCK_EXIST_ERROR = 16;
  ROOT_BLOCK_EXIST_ERROR = 17;
  TX_DUPLICATE_ERROR = 19;
  SERVICE_REFUSED_ERROR = 20;
  TXDATA_SIGN_ERROR = 21;
  TX_SLE_ERROR = 25;
  TX_FEE_NOT_ENOUGH_ERROR = 26;
  UTXO_SIGN_ERROR = 28;
  DPOS_QUERY_ERROR = 31;
  RWSET_INVALID_ERROR = 33;
  RWACL_INVALID_ERROR = 34;
  GAS_NOT_ENOUGH_ERROR = 35;
  TX_VERSION_INVALID_ERROR = 36;
  COMPLIANCE_CHECK_NOT_APPROVED = 37;
  ACCOUNT_CONTRACT_STATUS_ERROR = 38;
  TX_VERIFICATION_ERROR = 40;
}

// TransactionStatus is the status of transaction
enum TransactionStatus {
  // Undefined status
  UNDEFINE = 0;
  // Transaction not exist
  NOEXIST = 1;
  // Transaction have been confirmed
  CONFIRM = 2;
  // Transaction is on the furcation
  FURCATION = 3;
  // Transaction have not been confirmed
  UNCONFIRM = 4;
}

// Xchain is the main interfaces
service Xchain {

  // PostTx post Transaction to a node
  rpc PostTx(TxStatus) returns (CommonReply) {
    option (google.api.http) = {
      post : "/v1/post_tx"
      body : "*"
    };
  }

  rpc QueryACL(AclStatus) returns (AclStatus) {
    option (google.api.http) = {
      post : "/v1/query_acl"
      body : "*"
    };
  }

  rpc GetAccountContracts(GetAccountContractsRequest)
      returns (GetAccountContractsResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_contracts"
      body : "*"
    };
  }

  // QueryTx query Transaction by TxStatus,
  // Bcname and Txid are required for this
  rpc QueryTx(TxStatus) returns (TxStatus) {
    option (google.api.http) = {
      post : "/v1/query_tx"
      body : "*"
    };
  }

  // GetBalance get balance of an address,
  // Address is required for this
  rpc GetBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_balance"
      body : "*"
    };
  }
  
  // GetFrozenBalance get two kinds of balance
  // 1. Still be frozen of an address
  // 2. Available now of an address
  // Address is required for this
  rpc GetBalanceDetail(AddressBalanceStatus) returns (AddressBalanceStatus) {
  option (google.api.http) = {
    post: "/v1/get_balance_detail"
    body: "*"
    };
  }

  // GetFrozenBalance get balance that still be frozen of an address,
  // Address is required for this
  rpc GetFrozenBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_frozen_balance"
      body : "*"
    };
  }

  // GetBlock get block by blockid and return if the block in trunk or in branch
  rpc GetBlock(BlockID) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block"
      body : "*"
    };
  }

  // GetBlockByHeight get block by height and return if the block in trunk or in
  // branch
  rpc GetBlockByHeight(BlockHeight) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block_by_height"
      body : "*"
    };
  }

  rpc GetBlockChainStatus(BCStatus) returns (BCStatus) {
    option (google.api.http) = {
      post : "/v1/get_bcstatus"
      body : "*"
    };
  }

  // Get blockchains query blockchains
  rpc GetBlockChains(CommonIn) returns (BlockChains) {
    option (google.api.http) = {
      get : "/v1/get_bcchains"
      // body: "*"
    };
  }

  // GetSystemStatus query system status
  rpc GetSystemStatus(CommonIn) returns (SystemsStatusReply) {
    option (google.api.http) = {
      post : "/v1/get_sysstatus"
      body : "*"
    };
  }

  // GetNetURL return net url
  rpc GetNetURL(CommonIn) returns (RawUrl) {}

  // 鏂扮殑Select utxos鎺ュ彛, 涓嶉渶瑕佺鍚嶏紝鍙互鏀寔閫夋嫨璐︽埛鐨剈txo
  rpc SelectUTXO(UtxoInput) returns (UtxoOutput) {
    option (google.api.http) = {
      post : "/v1/select_utxos_v2"
      body : "*"
    };
  }

  // PreExecWithSelectUTXO preExec & selectUtxo
  rpc PreExecWithSelectUTXO(PreExecWithSelectUTXORequest) returns (PreExecWithSelectUTXOResponse);

  // Native code deploy interface
  rpc DeployNativeCode(DeployNativeCodeRequest)
      returns (DeployNativeCodeResponse);
  // Native code status
  rpc NativeCodeStatus(NativeCodeStatusRequest)
      returns (NativeCodeStatusResponse);

  /*
   * DPoS query interface
   */
  //  DposCandidates get all candidates of the tdpos consensus
  rpc DposCandidates(DposCandidatesRequest) returns (DposCandidatesResponse);
  //  DposNominateRecords get all records nominated by an user
  rpc DposNominateRecords(DposNominateRecordsRequest)
      returns (DposNominateRecordsResponse);
  //  DposNomineeRecords get nominated record of a candidate
  rpc DposNomineeRecords(DposNomineeRecordsRequest)
      returns (DposNomineeRecordsResponse);
  //  DposVoteRecords get all vote records voted by an user
  rpc DposVoteRecords(DposVoteRecordsRequest) returns (DposVoteRecordsResponse);
  //  DposVotedRecords get all vote records of a candidate
  rpc DposVotedRecords(DposVotedRecordsRequest)
      returns (DposVotedRecordsResponse);
  //  DposCheckResults get check results of a specific term
  rpc DposCheckResults(DposCheckResultsRequest)
      returns (DposCheckResultsResponse);

  // DposStatus get dpos status
  rpc DposStatus(DposStatusRequest) returns (DposStatusResponse);

  // GetAccountByAK get account sets contain a specific address
  rpc GetAccountByAK(AK2AccountRequest) returns (AK2AccountResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_by_ak"
      body : "*"
    };
  }

  //棰勬墽琛屽悎绾�
  rpc PreExec(InvokeRPCRequest) returns (InvokeRPCResponse);
}

message Header {
  string logid = 1; //濡傛灉logid娌″～鍐欙紝鐢熸垚涓�涓�
  string from_node =
      2; // call rpc client address锛屽鎴风鍙互涓虹┖锛岃妭鐐逛竴瀹氳鍐欒嚜宸辩殑address
  XChainErrorEnum error = 3;
}

message TxDataAccount {
  string address = 1;      //鍦板潃
  string amount = 2;       //閲戦
  int64 frozen_height = 3; //鍐荤粨楂樺害
}

message TxData {
  Header header = 13;
  // Transaction id
  bytes txid = 1;
  // Block name
  string bcname = 2;
  // Account which start the transaction
  string from_addr = 3;
  // The pk of the account which start the transaction
  string from_pubkey = 4;
  // The sk of the account which start the transaction
  string from_scrkey = 5;
  // if user don't want to provide scrkey, he should sign the txdata into
  // user_sign
  bytes user_sign = 14;
  // The account list accept tx
  repeated TxDataAccount account = 6;
  // Random number used to avoid replay attacks
  string nonce = 8;
  // Timestamp to launch the Tx
  int64 timestamp = 9;
  bytes desc = 12;
  // tx version
  int32 version = 15;
}

message TxStatus {
  Header header = 1;
  string bcname = 2;
  bytes txid = 3;
  TransactionStatus status = 4; //褰撳墠鐘舵��
  int64 distance = 5;           //绂讳富骞叉湯绔殑璺濈锛堝鏋滃湪涓诲共涓�)
  Transaction tx = 7;
}

message BatchTxs {
  Header header = 1;
  repeated TxStatus Txs = 2;
}

message Block {
  Header header = 1;
  string bcname = 2;
  bytes blockid = 3;
  enum EBlockStatus {
    ERROR = 0;
    TRUNK = 1;
    BRANCH = 2;
    NOEXIST = 3;
  }
  EBlockStatus status = 4;
  InternalBlock block = 5;
}

message BlockID {
  Header header = 4;
  string bcname = 1;
  bytes blockid = 2;
  // if need content
  bool need_content = 3; //鏄惁闇�瑕佸唴瀹�
}

message BlockHeight {
  Header header = 3;
  string bcname = 1;
  int64 height = 2;
}

message CommonReply { Header header = 1; }

message CommonIn { Header header = 1; }

message TokenDetail {
  string bcname = 1;
  string balance = 2;
  XChainErrorEnum error = 3;
}

message AddressStatus {
  Header header = 1;
  string address = 2;
  repeated TokenDetail bcs = 3;
}

message TokenFrozenDetail
{
  string balance = 1;
  bool isFrozen = 2;
}

message TokenFrozenDetails
{
  string bcname = 1;
  repeated TokenFrozenDetail tfd = 2;
  XChainErrorEnum error  = 3;
}

message AddressBalanceStatus
{
  Header header = 1;
  string address = 2;
  repeated TokenFrozenDetails tfds = 3;
}

// Transaction input
message TxInput {
  // The transaction id referenced to
  bytes ref_txid = 1;
  // The output offset of the transaction referenced to
  int32 ref_offset = 2;
  // The address of the launcher
  bytes from_addr = 5;
  // The amount of the transaction
  bytes amount = 6;
  // Frozen height
  int64 frozen_height = 7;
}

// Transaction output
message TxOutput {
  // The amount of the transaction
  bytes amount = 1;
  // The address of the launcher
  bytes to_addr = 2;
  // Fronzen height
  int64 frozen_height = 4;
}

// Unified Xuper Signature
message XuperSignature {
  repeated bytes public_keys = 1;
  bytes signature = 2;
}

// Transaction is the information of the transaction
message Transaction {
  // txid is the id of this transaction
  bytes txid = 1;
  // the blockid the transaction belong to
  bytes blockid = 2;
  // Transaction input list
  repeated TxInput tx_inputs = 3;
  // Transaction output list
  repeated TxOutput tx_outputs = 4;
  // Transaction description or system contract
  bytes desc = 6;
  // Mining rewards
  bool coinbase = 7;
  // Random number used to avoid replay attacks
  string nonce = 8;
  // Timestamp to launch the transaction
  int64 timestamp = 9;
  // tx format version; tx鏍煎紡鐗堟湰鍙�
  int32 version = 10;
  // auto generated tx
  bool autogen = 11;

  repeated TxInputExt tx_inputs_ext = 23;
  repeated TxOutputExt tx_outputs_ext = 24;
  repeated InvokeRequest contract_requests = 25;

  // 鏉冮檺绯荤粺鏂板瀛楁
  // 浜ゆ槗鍙戣捣鑰�, 鍙互鏄竴涓狝ddress鎴栬�呬竴涓狝ccount
  string initiator = 26;
  // 浜ゆ槗鍙戣捣闇�瑕佽鏀堕泦绛惧悕鐨凙ddressURL闆嗗悎淇℃伅锛屽寘鎷敤浜巙txo杞处鍜岀敤浜庡悎绾﹁皟鐢�
  repeated string auth_require = 27;
  // 浜ゆ槗鍙戣捣鑰呭浜ゆ槗鍏冩暟鎹鍚嶏紝绛惧悕鐨勫唴瀹瑰寘鎷琣uth_require瀛楁
  repeated SignatureInfo initiator_signs = 28;
  // 鏀堕泦鍒扮殑绛惧悕
  repeated SignatureInfo auth_require_signs = 29;
  // 鑺傜偣鏀跺埌tx鐨勬椂闂存埑锛屼笉鍙備笌绛惧悕
  int64 received_timestamp = 30;
  // 缁熶竴绛惧悕(鏀寔澶氶噸绛惧悕/鐜鍚嶇瓑锛屼笌initiator_signs/auth_require_signs涓嶅悓鏃朵娇鐢�)
  XuperSignature xuper_sign = 31;
}

// Ledger metadata
message LedgerMeta {
  // root block id
  bytes root_blockid = 1;
  // tip block id
  bytes tip_blockid = 2;
  // the height of the trunk
  int64 trunk_height = 3;
  // max block size
  int64 max_block_size = 4;
  // preset contracts
  repeated InvokeRequest reserved_contracts = 5;
  // reset forbidden contract configuration
  InvokeRequest forbidden_contract = 6;
}

// Utxo metadata
message UtxoMeta {
  bytes latest_blockid = 1; // utxo vm鐩墠鎵ц鍒扮殑blockid
  repeated string lock_key_list = 2;
  string utxo_total = 3;       //褰撳墠utxo vm涓婄殑鎬昏祫浜�
  int64 avgDelay = 4;          //骞冲潎涓婇摼寤舵椂
  int64 unconfirmTxAmount = 5; //寰呯‘璁や氦鏄撻噺
}

// The internal block struct
message InternalBlock {
  // block version
  int32 version = 1;
  // Random number used to avoid replay attacks
  int32 nonce = 2;
  // blockid generate the hash sign of the block used by sha256
  bytes blockid = 3;
  // pre_hash is the parent blockid of the block
  bytes pre_hash = 4;
  // The miner id
  bytes proposer = 5;
  // The sign which miner signed: blockid + nonce + timestamp
  bytes sign = 6;
  // The pk of the miner
  bytes pubkey = 7;
  // The Merkle Tree root
  bytes merkle_root = 8;
  // The height of the blockchain
  int64 height = 9;
  // Timestamp of the block
  int64 timestamp = 10;
  // Transactions of the block, only txid stored on kv, the detail information
  // stored in another table
  repeated Transaction transactions = 11;
  // The transaction count of the block
  int32 tx_count = 12;
  //鎵�鏈変氦鏄揾ash鐨刴erkle tree
  repeated bytes merkle_tree = 13;
  int64 curTerm = 16;
  int64 curBlockNum = 17;
  map<string, string> failed_txs = 18; // txid -> failed reason
  int32 targetBits = 19;

  // Justify used in chained-bft
  QuorumCert Justify = 20;
  
  //涓嬮潰鐨勫睘鎬т細鍔ㄦ�佸彉鍖�
  // If the block is on the trunk
  bool in_trunk = 14;
  // Next next block which on trunk
  bytes next_hash = 15;
}

// BlockChain status
message BCStatus {
  Header header = 1;
  // block name
  string bcname = 2;
  // ledger metadata
  LedgerMeta meta = 3;
  // The information of the longest block
  InternalBlock block = 4;
  // Utox information
  UtxoMeta utxoMeta = 5;
}

message BCTipStatus {
  Header header = 1;
  bool is_trunk_tip = 2;
}

message BlockChains {
  Header header = 1;
  repeated string blockchains = 2;
}

message Speeds {
  map<string, double> SumSpeeds = 1;
  map<string, BCSpeeds> BcSpeeds = 2;
}

message BCSpeeds { map<string, double> BcSpeed = 1; }

message SystemsStatus {
  Header header = 1;
  repeated BCStatus bcs_status = 2;
  Speeds speeds = 3;
  repeated string peerUrls = 4;
}

message SystemsStatusReply {
  Header header = 1;
  SystemsStatus systems_status = 2;
}

// RawUrl return the node's  connect url
message RawUrl {
  Header header = 1;
  string rawUrl = 2;
}

message Utxo {
  bytes amount = 1;
  bytes toAddr = 2;
  bytes toPubkey = 3;
  bytes refTxid = 4;
  int32 refOffset = 5;
}

// UtxoInput query info to query utxos
message UtxoInput {
  Header header = 1;
  // which bcname to select
  string bcname = 2;
  // address to select
  string address = 3;
  // publickey of the address
  string publickey = 4;
  // totalNeed refer the total need utxos to select
  string totalNeed = 5;
  // userSign of input
  bytes userSign = 7;
  // need lock
  bool needLock = 8;
}

// UtxoOutput query results
message UtxoOutput {
  Header header = 1;
  // outSign return the output
  // bytes outSign = 2;
  // utxo list
  repeated Utxo utxoList = 2;
  // total selected amount
  string totalSelected = 3;
}

message NativeCodeDesc {
  // native code name
  string name = 1;
  // code version
  string version = 2;
  // digest of binary
  bytes digest = 3;
  // the previous verion
  string prevVersion = 4;
  // xuper api version
  int32 xuperApiVersion = 5;
}

message WasmCodeDesc {
  string runtime = 1;
  string compiler = 2;
  bytes digest = 3;
  string vm_compiler = 4;
}

message DeployNativeCodeRequest {
  Header header = 1;
  // chain name
  string bcname = 2;
  // native code desc
  NativeCodeDesc desc = 3;
  // code is the bytes of binary code
  bytes code = 4;
  // the address of deployer
  string address = 5;
  // the public key of deployer
  bytes pubkey = 6;
  // the sign of desc
  bytes sign = 7;
}

message DeployNativeCodeResponse { Header header = 1; }

message NativeCodeStatus {
  NativeCodeDesc desc = 1;
  int32 status = 2;
  bool healthy = 3;
}

message NativeCodeStatusRequest {
  Header header = 1;
  string bcname = 2;
}

message NativeCodeStatusResponse {
  Header header = 1;
  repeated NativeCodeStatus status = 2;
}

/*
 * DPoS query interface
 */
// 鍊欓�変汉鍒楄〃鎺ュ彛
message DposCandidatesRequest {
  Header header = 1;
  string bcname = 2;
}

// 鍊欓�変汉鍒楄〃杩斿洖
message DposCandidatesResponse {
  Header header = 1;
  repeated string candidatesInfo = 2;
}

// 鎻愬悕鑰呮彁鍚嶈褰曡姹�
message DposNominateRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 鍊欓�変汉淇℃伅
message DposNominateInfo {
  string candidate = 1;
  string txid = 2;
}

// 鎻愬悕鑰呮彁鍚嶈褰曡繑鍥�
message DposNominateRecordsResponse {
  Header header = 1;
  repeated DposNominateInfo nominateRecords = 2;
}

// 鍊欓�変汉琚彁鍚嶈褰曡姹�
message DposNomineeRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 鍊欓�変汉琚彁鍚嶈褰曡繑鍥�
message DposNomineeRecordsResponse {
  Header header = 1;
  string txid = 2;
}

// 閫夋皯鎶曠エ璁板綍璇锋眰
message DposVoteRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 閫夋皯鎶曠エ璁板綍
message voteRecord {
  string candidate = 1;
  string txid = 2;
}

// 閫夋皯鎶曠エ璁板綍杩斿洖
message DposVoteRecordsResponse {
  Header header = 1;
  // 閫夋皯鎶曠エtxid璁板綍
  repeated voteRecord voteTxidRecords = 2;
}

// 鍊欓�変汉琚姇绁ㄨ褰曡姹�
message DposVotedRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}
// 鍊欓�変汉琚姇绁ㄨ褰�
message votedRecord {
  string voter = 1;
  string txid = 2;
}

// 鍊欓�変汉琚姇绁ㄨ褰曡繑鍥�
message DposVotedRecordsResponse {
  Header header = 1;
  // 鍊欓�変汉琚姇绁ㄧ殑txid璁板綍
  repeated votedRecord votedTxidRecords = 2;
}

// 鏌ヨ妫�绁ㄧ粨鏋滆褰曡姹�
message DposCheckResultsRequest {
  Header header = 1;
  string bcname = 2;
  int64 term = 3;
}

// 鏌ヨ妫�绁ㄧ粨鏋滆褰曡繑鍥�
message DposCheckResultsResponse {
  Header header = 1;
  int64 term = 2;
  repeated string checkResult = 3;
}

// query dpos consensus current status request
message DposStatusRequest {
  Header header = 1;
  string bcname = 2;
}

// query dpos consensus current status reply
message DposStatusResponse {
  Header header = 1;
  DposStatus status = 2;
}

message DposStatus {
  int64 term = 1;
  int64 block_num = 2;
  string proposer = 3;
  int64 proposer_num = 4;
  repeated string checkResult = 5;
}

message InvokeRPCRequest {
  Header header = 1;
  string bcname = 2;
  repeated InvokeRequest requests = 3;
  string initiator = 4;
  repeated string auth_require = 5;
}

message InvokeRPCResponse {
  Header header = 1;
  string bcname = 2;
  InvokeResponse response = 3;
}

//棰勬墽琛岀殑璇锋眰缁撴瀯
message InvokeRequest {
  string module_name = 1;
  string contract_name = 2;
  string method_name = 3;
  map<string, bytes> args = 4;
  repeated ResourceLimit resource_limits = 5;
}

//棰勬墽琛岀殑杩斿洖缁撴瀯
message InvokeResponse {
  repeated TxInputExt inputs = 1;
  repeated TxOutputExt outputs = 2;
  repeated bytes response = 3;
  int64 gas_used = 4;
  repeated InvokeRequest requests = 5;
  repeated ContractResponse responses = 6;
}

//鎵╁睍杈撳叆
message TxInputExt {
  string bucket = 1;
  bytes key = 2;
  bytes ref_txid = 3;
  int32 ref_offset = 4;
}

//鎵╁睍杈撳嚭
message TxOutputExt {
  string bucket = 1;
  bytes key = 2;
  bytes value = 3;
}

// 绛惧悕璇︽儏
message SignatureInfo {
  string PublicKey = 1;
  bytes Sign = 2;
}

// --------   Account and Permission Section --------
enum PermissionRule {
  NULL = 0;           // 鏃犳潈闄愭帶鍒�
  SIGN_THRESHOLD = 1; // 绛惧悕闃堝�肩瓥鐣�
  SIGN_AKSET = 2;     // AKSet绛惧悕绛栫暐
  SIGN_RATE = 3;      // 绛惧悕鐜囩瓥鐣�
  SIGN_SUM = 4;       // 绛惧悕涓暟绛栫暐
  CA_SERVER = 5;      // CA鏈嶅姟鍣ㄩ壌鏉�
  COMMUNITY_VOTE = 6; // 绀惧尯娌荤悊
}

message PermissionModel {
  PermissionRule rule = 1;
  double acceptValue = 2; // 鍙栧喅浜庣敤鍝rule, 鍙互琛ㄧず绛惧悕鐜囷紝绛惧悕鏁版垨鏉冮噸闃堝��
}

// AK闆嗙殑琛ㄧず鏂规硶
message AkSet {
  repeated string aks = 1; //涓�鍫嗗叕閽�
}
message AkSets {
  map<string, AkSet> sets = 1; // 鍏挜or璐︽埛鍚嶉泦
  string expression =
      2; // 琛ㄨ揪寮忥紝涓�鏈熶笉鏀寔琛ㄨ揪寮忥紝榛樿闆嗗悎鍐呮槸and锛岄泦鍚堥棿鏄痮r
}

// Acl瀹為檯浣跨敤鐨勭粨鏋�
message Acl {
  PermissionModel pm = 1;            // 閲囩敤鐨勬潈闄愭ā鍨�
  map<string, double> aksWeight = 2; // 鍏挜or璐︽埛鍚�  -> 鏉冮噸
  AkSets akSets = 3;
}

// 鏌ヨAcl
message AclStatus {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  string contractName = 4;
  string methodName = 5;
  bool confirmed = 6;
  Acl acl = 7;
}

// Identity authentication request
message IdentityAuth {
  bytes sign = 1;
  bytes pubkey = 2;
  string addr = 3;
  string peerID = 4;
  string timestamp = 5;
}

// Identity authentication requests
message IdentityAuths { repeated IdentityAuth auth = 1; }

enum ResourceType {
  CPU = 0;
  MEMORY = 1;
  DISK = 2;
  XFEE = 3; // the fee used in kernel contract
}

message ResourceLimit {
  ResourceType type = 1;
  int64 limit = 2;
}

message AK2AccountRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

message AK2AccountResponse {
  Header header = 1;
  string bcname = 2;
  repeated string account = 3;
}

// Query account contracts request
message GetAccountContractsRequest {
  Header header = 1;
  string bcname = 2;
  string account = 3;
}

// Query account contracts response
message GetAccountContractsResponse {
  Header header = 1;
  repeated ContractStatus contracts_status = 2;
}

// Status of a contract
message ContractStatus {
  string contract_name = 1;
  string txid = 2;
  bytes desc = 3;
  bool is_banned = 4;
}

// PreExecWithSelectUTXORequest preExec + selectUtxo for request
message PreExecWithSelectUTXORequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
  int64 totalAmount = 4;
  SignatureInfo signInfo = 6;
  bool needLock = 7;
  InvokeRPCRequest request = 5;
}

// PreExecWithSelectUTXOResponse preExec + selectUtxo for response
message PreExecWithSelectUTXOResponse {
  Header header = 1;
  string bcname = 2;
  InvokeResponse response = 3;
  // for preExec & selectUTXO
  UtxoOutput utxoOutput = 4;
}

// ContractResponse is the response returnd by contract
message ContractResponse {
  int32  status = 1;
  string message = 2;
  bytes  body = 3;
}