syntax = "proto3";
 
package pb;

enum XChainErrorEnum {
	SUCCESS = 0;
	UNKNOW_ERROR = 1;
	CONNECT_REFUSE = 2;
	NOT_ENOUGH_UTXO_ERROR = 3;
	UTXOVM_ALREADY_UNCONFIRM_ERROR = 4;
	UTXOVM_NOT_FOUND_ERROR = 5;
	INPUT_OUTPUT_NOT_EQUAL_ERROR = 6;
	TX_NOT_FOUND_ERROR = 7;
	TX_SIGN_ERROR = 8;
	BLOCKCHAIN_NOTEXIST = 9;
	VALIDATE_ERROR = 10;
	CANNOT_SYNC_BLOCK_ERROR = 11;
	CONFIRM_BLOCK_ERROR = 12;
	UTXOVM_PLAY_ERROR = 13;
	WALK_ERROR = 14;
	NOT_READY_ERROR = 15;
	BLOCK_EXIST_ERROR = 16;
	ROOT_BLOCK_EXIST_ERROR = 17;
	TX_DUPLICATE_ERROR = 19;
	SERVICE_REFUSED_ERROR = 20;
	TXDATA_SIGN_ERROR = 21;
	TX_SLE_ERROR = 25;
	TX_FEE_NOT_ENOUGH_ERROR = 26;
	UTXO_SIGN_ERROR = 28;
	DPOS_QUERY_ERROR = 31;
	RWSET_INVALID_ERROR = 33;
    RWACL_INVALID_ERROR = 34;
    GAS_NOT_ENOUGH_ERROR = 35;
    TX_VERSION_INVALID_ERROR = 36;
    COMPLIANCE_CHECK_NOT_APPROVED = 37;
}

// TransactionStatus is the status of transaction
enum TransactionStatus {
// Undefined status
	UNDEFINE = 0;
// Transaction not exist
	NOEXIST = 1;
// Transaction have been confirmed
	CONFIRM = 2;
// Transaction is on the furcation
	FURCATION = 3;
// Transaction have not been confirmed
	UNCONFIRM = 4;
}

message Header
{
	string logid = 1;	//如果logid没填写，生成一个
	string from_node = 2;	//call rpc client address，客户端可以为空，节点一定要写自己的address
	XChainErrorEnum error = 3;
}

message TxDataAccount
{
	string address = 1;	//地址
	string amount = 2;	//金额
	int64 frozen_height = 3; //冻结高度
}

message TxData {
    Header header = 13;
    // Transaction id
    bytes txid = 1;
    // Block name
    string bcname = 2;
    // Account which start the transaction
    string from_addr = 3;
    // The pk of the account which start the transaction
    string from_pubkey = 4;
    // The sk of the account which start the transaction
    string from_scrkey = 5;
    // if user don't want to provide scrkey, he should sign the txdata into user_sign
    bytes user_sign = 14;
    // The account list accept tx
    repeated TxDataAccount account = 6;
    // Random number used to avoid replay attacks
    string nonce = 8;
    // Timestamp to launch the Tx
    int64 timestamp = 9;
    bytes desc = 12;
    // tx version
    int32 version = 15;
}

message TxStatus
{
	Header header = 1;
	string bcname = 2;
	bytes txid = 3;
	TransactionStatus status = 4;	//当前状态
	int64 distance = 5;	//离主干末端的距离（如果在主干上)
	Transaction tx = 7;
}

message BatchTxs
{
	Header header = 1;
	repeated TxStatus Txs = 2;
}

message Block 
{
	Header header = 1;
	string bcname = 2;
	bytes blockid = 3;
	enum EBlockStatus {
		ERROR = 0;
		TRUNK = 1;
		BRANCH = 2;
		NOEXIST = 3;
	}
	EBlockStatus status = 4;	
	InternalBlock block = 5;
}

message BlockID
{
	Header header = 4;
	string bcname = 1;
	bytes blockid = 2;
	// if need content
	bool need_content = 3;	//是否需要内容
}

message BlockHeight
{
	Header header = 3;
	string bcname = 1;
	int64  height = 2;
}

message CommonReply
{
	Header header = 1;
}

message CommonIn
{
    Header header = 1;
}

message TokenDetail
{
	string bcname = 1;
	string balance = 2;
	XChainErrorEnum error  = 3;
}

message AddressStatus
{
	Header header = 1;
	string address = 2;
	repeated TokenDetail bcs = 3;
}

// Transaction input
message TxInput
{
    // The transaction id referenced to
    bytes ref_txid = 1;
    // The output offset of the transaction referenced to
    int32 ref_offset = 2;
    // The address of the launcher
    bytes from_addr = 5;
    // The amount of the transaction
    bytes amount = 6;
    // Frozen height
    int64 frozen_height = 7;
}

// Transaction output
message TxOutput
{
    // The amount of the transaction
    bytes amount = 1;
    // The address of the launcher
    bytes to_addr = 2;
    // Fronzen height
    int64 frozen_height = 4;
}

// Transaction is the information of the transaction
message Transaction
{
    // txid is the id of this transaction
    bytes txid = 1;
    // the blockid the transaction belong to
    bytes blockid = 2;
    // Transaction input list
    repeated TxInput tx_inputs = 3;
    // Transaction output list
    repeated TxOutput tx_outputs = 4;
    // Transaction description or system contract
    bytes desc = 6;
    // Mining rewards
    bool coinbase = 7;
    // Random number used to avoid replay attacks
    string nonce = 8;
    // Timestamp to launch the transaction
    int64 timestamp = 9;
    // tx format version; tx格式版本号
    int32  version = 10;
    // auto generated tx
    bool autogen = 11;

    repeated TxInputExt tx_inputs_ext = 23;
    repeated TxOutputExt tx_outputs_ext = 24;
    repeated InvokeRequest contract_requests = 25;

    // 权限系统新增字段
    // 交易发起者, 可以是一个Address或者一个Account
    string initiator = 26;
    // 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
    repeated string auth_require = 27;
    // 交易发起者对交易元数据签名，签名的内容包括auth_require字段
    repeated SignatureInfo initiator_signs = 28;
    // 收集到的签名
    repeated SignatureInfo auth_require_signs = 29;
    // 节点收到tx的时间戳，不参与签名
    int64 received_timestamp = 30;
}

// Ledger metadata
message LedgerMeta
{
    // root block id
    bytes root_blockid = 1;
    // tip block id
    bytes tip_blockid = 2;
    // the height of the trunk
    int64 trunk_height = 3;
    // max block size
    int64 max_block_size = 4;
}

// Utxo metadata
message UtxoMeta
{
    bytes latest_blockid = 1; // utxo vm目前执行到的blockid
    repeated string lock_key_list = 2;
    string utxo_total = 3; //当前utxo vm上的总资产
    int64 avgDelay = 4; //平均上链延时
    int64 unconfirmTxAmount = 5; //待确认交易量
}

// The internal block struct
message InternalBlock
{
    // block version
    int32 version = 1;
    // Random number used to avoid replay attacks
    int32 nonce = 2;
    // blockid generate the hash sign of the block used by sha256
    bytes blockid = 3;
    // pre_hash is the parent blockid of the block
    bytes pre_hash = 4;
    // The miner id
    bytes proposer = 5;
    // The sign which miner signed: blockid + nonce + timestamp
    bytes sign = 6;
    // The pk of the miner
    bytes pubkey =  7;
    // The Merkle Tree root
    bytes merkle_root = 8;
    // The height of the blockchain
    int64 height = 9;
    // Timestamp of the block
    int64 timestamp = 10;
    // Transactions of the block, only txid stored on kv, the detail information stored in another table
    repeated Transaction transactions = 11; 
    // The transaction count of the block
    int32 tx_count = 12;
    //所有交易hash的merkle tree
    repeated bytes merkle_tree = 13;
    int64 curTerm = 16;
    int64 curBlockNum = 17;
    map<string, string> failed_txs = 18;  //txid -> failed reason
    
    //下面的属性会动态变化
    // If the block is on the trunk
    bool in_trunk = 14;
    // Next next block which on trunk
    bytes next_hash = 15;
}

//BlockChain status
message BCStatus
{
	Header header = 1;
	// block name
	string bcname = 2;
	// ledger metadata
	LedgerMeta meta = 3;
	// The information of the longest block
	InternalBlock block = 4;
	// Utox information
	UtxoMeta utxoMeta = 5;
}

message Speeds
{
    map<string, double> SumSpeeds = 1;
    map<string, BCSpeeds> BcSpeeds = 2;
}

message BCSpeeds
{
    map<string, double> BcSpeed = 1;
}

message SystemsStatus
{
    Header header = 1;
    repeated BCStatus bcs_status = 2;
    Speeds speeds = 3;
    repeated string peerUrls = 4;
}

//预执行的请求结构
message InvokeRequest {
    string module_name = 1;
    string contract_name = 2;
    string method_name = 3;
    map<string, bytes> args = 4;
    repeated ResourceLimit resource_limits = 5;
}

//扩展输入
message TxInputExt {
    string bucket = 1;
    bytes key = 2;
    bytes ref_txid = 3;
    int32 ref_offset = 4;
}

//扩展输出
message TxOutputExt{
     string bucket = 1;
     bytes key = 2;
     bytes value = 3;
}

// 签名详情
message SignatureInfo {
     string PublicKey = 1;
     bytes  Sign = 2;
}

enum ResourceType {
    CPU = 0;
    MEMORY = 1;
    DISK = 2;
    XFEE = 3; // the fee used in kernel contract
}

message ResourceLimit {
    ResourceType type = 1;
    int64 limit = 2;
}
