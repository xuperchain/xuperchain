// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract.proto

#ifndef PROTOBUF_INCLUDED_contract_2eproto
#define PROTOBUF_INCLUDED_contract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace pb {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class CallArgs;
class CallArgsDefaultTypeInternal;
extern CallArgsDefaultTypeInternal _CallArgs_default_instance_;
class CallArgs_ArgsEntry_DoNotUse;
class CallArgs_ArgsEntry_DoNotUseDefaultTypeInternal;
extern CallArgs_ArgsEntry_DoNotUseDefaultTypeInternal _CallArgs_ArgsEntry_DoNotUse_default_instance_;
class ContractCallRequest;
class ContractCallRequestDefaultTypeInternal;
extern ContractCallRequestDefaultTypeInternal _ContractCallRequest_default_instance_;
class ContractCallRequest_ArgsEntry_DoNotUse;
class ContractCallRequest_ArgsEntry_DoNotUseDefaultTypeInternal;
extern ContractCallRequest_ArgsEntry_DoNotUseDefaultTypeInternal _ContractCallRequest_ArgsEntry_DoNotUse_default_instance_;
class ContractCallResponse;
class ContractCallResponseDefaultTypeInternal;
extern ContractCallResponseDefaultTypeInternal _ContractCallResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class GetCallArgsRequest;
class GetCallArgsRequestDefaultTypeInternal;
extern GetCallArgsRequestDefaultTypeInternal _GetCallArgsRequest_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IteratorItem;
class IteratorItemDefaultTypeInternal;
extern IteratorItemDefaultTypeInternal _IteratorItem_default_instance_;
class IteratorRequest;
class IteratorRequestDefaultTypeInternal;
extern IteratorRequestDefaultTypeInternal _IteratorRequest_default_instance_;
class IteratorResponse;
class IteratorResponseDefaultTypeInternal;
extern IteratorResponseDefaultTypeInternal _IteratorResponse_default_instance_;
class NativeCallRequest;
class NativeCallRequestDefaultTypeInternal;
extern NativeCallRequestDefaultTypeInternal _NativeCallRequest_default_instance_;
class NativeCallResponse;
class NativeCallResponseDefaultTypeInternal;
extern NativeCallResponseDefaultTypeInternal _NativeCallResponse_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
class PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class QueryBlockRequest;
class QueryBlockRequestDefaultTypeInternal;
extern QueryBlockRequestDefaultTypeInternal _QueryBlockRequest_default_instance_;
class QueryBlockResponse;
class QueryBlockResponseDefaultTypeInternal;
extern QueryBlockResponseDefaultTypeInternal _QueryBlockResponse_default_instance_;
class QueryTxRequest;
class QueryTxRequestDefaultTypeInternal;
extern QueryTxRequestDefaultTypeInternal _QueryTxRequest_default_instance_;
class QueryTxResponse;
class QueryTxResponseDefaultTypeInternal;
extern QueryTxResponseDefaultTypeInternal _QueryTxResponse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetOutputRequest;
class SetOutputRequestDefaultTypeInternal;
extern SetOutputRequestDefaultTypeInternal _SetOutputRequest_default_instance_;
class SetOutputResponse;
class SetOutputResponseDefaultTypeInternal;
extern SetOutputResponseDefaultTypeInternal _SetOutputResponse_default_instance_;
class SyscallHeader;
class SyscallHeaderDefaultTypeInternal;
extern SyscallHeaderDefaultTypeInternal _SyscallHeader_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
class TransferResponse;
class TransferResponseDefaultTypeInternal;
extern TransferResponseDefaultTypeInternal _TransferResponse_default_instance_;
class TxInput;
class TxInputDefaultTypeInternal;
extern TxInputDefaultTypeInternal _TxInput_default_instance_;
class TxOutput;
class TxOutputDefaultTypeInternal;
extern TxOutputDefaultTypeInternal _TxOutput_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Block* Arena::CreateMaybeMessage<::pb::Block>(Arena*);
template<> ::pb::CallArgs* Arena::CreateMaybeMessage<::pb::CallArgs>(Arena*);
template<> ::pb::CallArgs_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::CallArgs_ArgsEntry_DoNotUse>(Arena*);
template<> ::pb::ContractCallRequest* Arena::CreateMaybeMessage<::pb::ContractCallRequest>(Arena*);
template<> ::pb::ContractCallRequest_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::ContractCallRequest_ArgsEntry_DoNotUse>(Arena*);
template<> ::pb::ContractCallResponse* Arena::CreateMaybeMessage<::pb::ContractCallResponse>(Arena*);
template<> ::pb::DeleteRequest* Arena::CreateMaybeMessage<::pb::DeleteRequest>(Arena*);
template<> ::pb::DeleteResponse* Arena::CreateMaybeMessage<::pb::DeleteResponse>(Arena*);
template<> ::pb::GetCallArgsRequest* Arena::CreateMaybeMessage<::pb::GetCallArgsRequest>(Arena*);
template<> ::pb::GetRequest* Arena::CreateMaybeMessage<::pb::GetRequest>(Arena*);
template<> ::pb::GetResponse* Arena::CreateMaybeMessage<::pb::GetResponse>(Arena*);
template<> ::pb::IteratorItem* Arena::CreateMaybeMessage<::pb::IteratorItem>(Arena*);
template<> ::pb::IteratorRequest* Arena::CreateMaybeMessage<::pb::IteratorRequest>(Arena*);
template<> ::pb::IteratorResponse* Arena::CreateMaybeMessage<::pb::IteratorResponse>(Arena*);
template<> ::pb::NativeCallRequest* Arena::CreateMaybeMessage<::pb::NativeCallRequest>(Arena*);
template<> ::pb::NativeCallResponse* Arena::CreateMaybeMessage<::pb::NativeCallResponse>(Arena*);
template<> ::pb::PingRequest* Arena::CreateMaybeMessage<::pb::PingRequest>(Arena*);
template<> ::pb::PingResponse* Arena::CreateMaybeMessage<::pb::PingResponse>(Arena*);
template<> ::pb::PutRequest* Arena::CreateMaybeMessage<::pb::PutRequest>(Arena*);
template<> ::pb::PutResponse* Arena::CreateMaybeMessage<::pb::PutResponse>(Arena*);
template<> ::pb::QueryBlockRequest* Arena::CreateMaybeMessage<::pb::QueryBlockRequest>(Arena*);
template<> ::pb::QueryBlockResponse* Arena::CreateMaybeMessage<::pb::QueryBlockResponse>(Arena*);
template<> ::pb::QueryTxRequest* Arena::CreateMaybeMessage<::pb::QueryTxRequest>(Arena*);
template<> ::pb::QueryTxResponse* Arena::CreateMaybeMessage<::pb::QueryTxResponse>(Arena*);
template<> ::pb::Response* Arena::CreateMaybeMessage<::pb::Response>(Arena*);
template<> ::pb::SetOutputRequest* Arena::CreateMaybeMessage<::pb::SetOutputRequest>(Arena*);
template<> ::pb::SetOutputResponse* Arena::CreateMaybeMessage<::pb::SetOutputResponse>(Arena*);
template<> ::pb::SyscallHeader* Arena::CreateMaybeMessage<::pb::SyscallHeader>(Arena*);
template<> ::pb::Transaction* Arena::CreateMaybeMessage<::pb::Transaction>(Arena*);
template<> ::pb::TransferRequest* Arena::CreateMaybeMessage<::pb::TransferRequest>(Arena*);
template<> ::pb::TransferResponse* Arena::CreateMaybeMessage<::pb::TransferResponse>(Arena*);
template<> ::pb::TxInput* Arena::CreateMaybeMessage<::pb::TxInput>(Arena*);
template<> ::pb::TxOutput* Arena::CreateMaybeMessage<::pb::TxOutput>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class PingRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(nullptr);
  }

  PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.PingRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class PingResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.PingResponse) */ {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PingResponse* other);
  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const final {
    return CreateMaybeMessage<PingResponse>(nullptr);
  }

  PingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.PingResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class NativeCallRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.NativeCallRequest) */ {
 public:
  NativeCallRequest();
  virtual ~NativeCallRequest();

  NativeCallRequest(const NativeCallRequest& from);

  inline NativeCallRequest& operator=(const NativeCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NativeCallRequest(NativeCallRequest&& from) noexcept
    : NativeCallRequest() {
    *this = ::std::move(from);
  }

  inline NativeCallRequest& operator=(NativeCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NativeCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NativeCallRequest* internal_default_instance() {
    return reinterpret_cast<const NativeCallRequest*>(
               &_NativeCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NativeCallRequest* other);
  friend void swap(NativeCallRequest& a, NativeCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NativeCallRequest* New() const final {
    return CreateMaybeMessage<NativeCallRequest>(nullptr);
  }

  NativeCallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NativeCallRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NativeCallRequest& from);
  void MergeFrom(const NativeCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NativeCallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ctxid = 1;
  void clear_ctxid();
  static const int kCtxidFieldNumber = 1;
  ::google::protobuf::int64 ctxid() const;
  void set_ctxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.NativeCallRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 ctxid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class NativeCallResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.NativeCallResponse) */ {
 public:
  NativeCallResponse();
  virtual ~NativeCallResponse();

  NativeCallResponse(const NativeCallResponse& from);

  inline NativeCallResponse& operator=(const NativeCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NativeCallResponse(NativeCallResponse&& from) noexcept
    : NativeCallResponse() {
    *this = ::std::move(from);
  }

  inline NativeCallResponse& operator=(NativeCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NativeCallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NativeCallResponse* internal_default_instance() {
    return reinterpret_cast<const NativeCallResponse*>(
               &_NativeCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NativeCallResponse* other);
  friend void swap(NativeCallResponse& a, NativeCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NativeCallResponse* New() const final {
    return CreateMaybeMessage<NativeCallResponse>(nullptr);
  }

  NativeCallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NativeCallResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NativeCallResponse& from);
  void MergeFrom(const NativeCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NativeCallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.NativeCallResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class CallArgs_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<CallArgs_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntryLite<CallArgs_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  CallArgs_ArgsEntry_DoNotUse();
  CallArgs_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CallArgs_ArgsEntry_DoNotUse& other);
  static const CallArgs_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CallArgs_ArgsEntry_DoNotUse*>(&_CallArgs_ArgsEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class CallArgs :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.CallArgs) */ {
 public:
  CallArgs();
  virtual ~CallArgs();

  CallArgs(const CallArgs& from);

  inline CallArgs& operator=(const CallArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallArgs(CallArgs&& from) noexcept
    : CallArgs() {
    *this = ::std::move(from);
  }

  inline CallArgs& operator=(CallArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CallArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallArgs* internal_default_instance() {
    return reinterpret_cast<const CallArgs*>(
               &_CallArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CallArgs* other);
  friend void swap(CallArgs& a, CallArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallArgs* New() const final {
    return CreateMaybeMessage<CallArgs>(nullptr);
  }

  CallArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallArgs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CallArgs& from);
  void MergeFrom(const CallArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // repeated string auth_require = 4;
  int auth_require_size() const;
  void clear_auth_require();
  static const int kAuthRequireFieldNumber = 4;
  const ::std::string& auth_require(int index) const;
  ::std::string* mutable_auth_require(int index);
  void set_auth_require(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_auth_require(int index, ::std::string&& value);
  #endif
  void set_auth_require(int index, const char* value);
  void set_auth_require(int index, const char* value, size_t size);
  ::std::string* add_auth_require();
  void add_auth_require(const ::std::string& value);
  #if LANG_CXX11
  void add_auth_require(::std::string&& value);
  #endif
  void add_auth_require(const char* value);
  void add_auth_require(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& auth_require() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_auth_require();

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string initiator = 3;
  void clear_initiator();
  static const int kInitiatorFieldNumber = 3;
  const ::std::string& initiator() const;
  void set_initiator(const ::std::string& value);
  #if LANG_CXX11
  void set_initiator(::std::string&& value);
  #endif
  void set_initiator(const char* value);
  void set_initiator(const char* value, size_t size);
  ::std::string* mutable_initiator();
  ::std::string* release_initiator();
  void set_allocated_initiator(::std::string* initiator);

  // @@protoc_insertion_point(class_scope:pb.CallArgs)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      CallArgs_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > args_;
  ::google::protobuf::RepeatedPtrField<::std::string> auth_require_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr initiator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class SyscallHeader :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.SyscallHeader) */ {
 public:
  SyscallHeader();
  virtual ~SyscallHeader();

  SyscallHeader(const SyscallHeader& from);

  inline SyscallHeader& operator=(const SyscallHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyscallHeader(SyscallHeader&& from) noexcept
    : SyscallHeader() {
    *this = ::std::move(from);
  }

  inline SyscallHeader& operator=(SyscallHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SyscallHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyscallHeader* internal_default_instance() {
    return reinterpret_cast<const SyscallHeader*>(
               &_SyscallHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SyscallHeader* other);
  friend void swap(SyscallHeader& a, SyscallHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyscallHeader* New() const final {
    return CreateMaybeMessage<SyscallHeader>(nullptr);
  }

  SyscallHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyscallHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SyscallHeader& from);
  void MergeFrom(const SyscallHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyscallHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ctxid = 1;
  void clear_ctxid();
  static const int kCtxidFieldNumber = 1;
  ::google::protobuf::int64 ctxid() const;
  void set_ctxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.SyscallHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 ctxid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class PutRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.PutRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class PutResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(nullptr);
  }

  PutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.PutResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class GetRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.GetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class GetResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.GetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.DeleteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(nullptr);
  }

  DeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.DeleteResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class IteratorRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.IteratorRequest) */ {
 public:
  IteratorRequest();
  virtual ~IteratorRequest();

  IteratorRequest(const IteratorRequest& from);

  inline IteratorRequest& operator=(const IteratorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IteratorRequest(IteratorRequest&& from) noexcept
    : IteratorRequest() {
    *this = ::std::move(from);
  }

  inline IteratorRequest& operator=(IteratorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IteratorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IteratorRequest* internal_default_instance() {
    return reinterpret_cast<const IteratorRequest*>(
               &_IteratorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(IteratorRequest* other);
  friend void swap(IteratorRequest& a, IteratorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IteratorRequest* New() const final {
    return CreateMaybeMessage<IteratorRequest>(nullptr);
  }

  IteratorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IteratorRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IteratorRequest& from);
  void MergeFrom(const IteratorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IteratorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  #if LANG_CXX11
  void set_start(::std::string&& value);
  #endif
  void set_start(const char* value);
  void set_start(const void* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // bytes limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  const ::std::string& limit() const;
  void set_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_limit(::std::string&& value);
  #endif
  void set_limit(const char* value);
  void set_limit(const void* value, size_t size);
  ::std::string* mutable_limit();
  ::std::string* release_limit();
  void set_allocated_limit(::std::string* limit);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // int32 cap = 4;
  void clear_cap();
  static const int kCapFieldNumber = 4;
  ::google::protobuf::int32 cap() const;
  void set_cap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.IteratorRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr limit_;
  ::pb::SyscallHeader* header_;
  ::google::protobuf::int32 cap_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class IteratorItem :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.IteratorItem) */ {
 public:
  IteratorItem();
  virtual ~IteratorItem();

  IteratorItem(const IteratorItem& from);

  inline IteratorItem& operator=(const IteratorItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IteratorItem(IteratorItem&& from) noexcept
    : IteratorItem() {
    *this = ::std::move(from);
  }

  inline IteratorItem& operator=(IteratorItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IteratorItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IteratorItem* internal_default_instance() {
    return reinterpret_cast<const IteratorItem*>(
               &_IteratorItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(IteratorItem* other);
  friend void swap(IteratorItem& a, IteratorItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IteratorItem* New() const final {
    return CreateMaybeMessage<IteratorItem>(nullptr);
  }

  IteratorItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IteratorItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IteratorItem& from);
  void MergeFrom(const IteratorItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IteratorItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.IteratorItem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class IteratorResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.IteratorResponse) */ {
 public:
  IteratorResponse();
  virtual ~IteratorResponse();

  IteratorResponse(const IteratorResponse& from);

  inline IteratorResponse& operator=(const IteratorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IteratorResponse(IteratorResponse&& from) noexcept
    : IteratorResponse() {
    *this = ::std::move(from);
  }

  inline IteratorResponse& operator=(IteratorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IteratorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IteratorResponse* internal_default_instance() {
    return reinterpret_cast<const IteratorResponse*>(
               &_IteratorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(IteratorResponse* other);
  friend void swap(IteratorResponse& a, IteratorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IteratorResponse* New() const final {
    return CreateMaybeMessage<IteratorResponse>(nullptr);
  }

  IteratorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IteratorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IteratorResponse& from);
  void MergeFrom(const IteratorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IteratorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.IteratorItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::pb::IteratorItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::IteratorItem >*
      mutable_items();
  const ::pb::IteratorItem& items(int index) const;
  ::pb::IteratorItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::pb::IteratorItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:pb.IteratorResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::IteratorItem > items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class QueryTxRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.QueryTxRequest) */ {
 public:
  QueryTxRequest();
  virtual ~QueryTxRequest();

  QueryTxRequest(const QueryTxRequest& from);

  inline QueryTxRequest& operator=(const QueryTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTxRequest(QueryTxRequest&& from) noexcept
    : QueryTxRequest() {
    *this = ::std::move(from);
  }

  inline QueryTxRequest& operator=(QueryTxRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTxRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTxRequest*>(
               &_QueryTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(QueryTxRequest* other);
  friend void swap(QueryTxRequest& a, QueryTxRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTxRequest* New() const final {
    return CreateMaybeMessage<QueryTxRequest>(nullptr);
  }

  QueryTxRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTxRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryTxRequest& from);
  void MergeFrom(const QueryTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes txid = 2;
  void clear_txid();
  static const int kTxidFieldNumber = 2;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.QueryTxRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class QueryTxResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.QueryTxResponse) */ {
 public:
  QueryTxResponse();
  virtual ~QueryTxResponse();

  QueryTxResponse(const QueryTxResponse& from);

  inline QueryTxResponse& operator=(const QueryTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTxResponse(QueryTxResponse&& from) noexcept
    : QueryTxResponse() {
    *this = ::std::move(from);
  }

  inline QueryTxResponse& operator=(QueryTxResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTxResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTxResponse*>(
               &_QueryTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(QueryTxResponse* other);
  friend void swap(QueryTxResponse& a, QueryTxResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTxResponse* New() const final {
    return CreateMaybeMessage<QueryTxResponse>(nullptr);
  }

  QueryTxResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTxResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryTxResponse& from);
  void MergeFrom(const QueryTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Transaction tx = 1;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::pb::Transaction& tx() const;
  ::pb::Transaction* release_tx();
  ::pb::Transaction* mutable_tx();
  void set_allocated_tx(::pb::Transaction* tx);

  // @@protoc_insertion_point(class_scope:pb.QueryTxResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::Transaction* tx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class QueryBlockRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.QueryBlockRequest) */ {
 public:
  QueryBlockRequest();
  virtual ~QueryBlockRequest();

  QueryBlockRequest(const QueryBlockRequest& from);

  inline QueryBlockRequest& operator=(const QueryBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryBlockRequest(QueryBlockRequest&& from) noexcept
    : QueryBlockRequest() {
    *this = ::std::move(from);
  }

  inline QueryBlockRequest& operator=(QueryBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBlockRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBlockRequest*>(
               &_QueryBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(QueryBlockRequest* other);
  friend void swap(QueryBlockRequest& a, QueryBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryBlockRequest* New() const final {
    return CreateMaybeMessage<QueryBlockRequest>(nullptr);
  }

  QueryBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryBlockRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryBlockRequest& from);
  void MergeFrom(const QueryBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes blockid = 2;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.QueryBlockRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class QueryBlockResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.QueryBlockResponse) */ {
 public:
  QueryBlockResponse();
  virtual ~QueryBlockResponse();

  QueryBlockResponse(const QueryBlockResponse& from);

  inline QueryBlockResponse& operator=(const QueryBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryBlockResponse(QueryBlockResponse&& from) noexcept
    : QueryBlockResponse() {
    *this = ::std::move(from);
  }

  inline QueryBlockResponse& operator=(QueryBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const QueryBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBlockResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBlockResponse*>(
               &_QueryBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(QueryBlockResponse* other);
  friend void swap(QueryBlockResponse& a, QueryBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryBlockResponse* New() const final {
    return CreateMaybeMessage<QueryBlockResponse>(nullptr);
  }

  QueryBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryBlockResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const QueryBlockResponse& from);
  void MergeFrom(const QueryBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Block block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::pb::Block& block() const;
  ::pb::Block* release_block();
  ::pb::Block* mutable_block();
  void set_allocated_block(::pb::Block* block);

  // @@protoc_insertion_point(class_scope:pb.QueryBlockResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::Block* block_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.TransferRequest) */ {
 public:
  TransferRequest();
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TransferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TransferRequest* other);
  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.TransferRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class TransferResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.TransferResponse) */ {
 public:
  TransferResponse();
  virtual ~TransferResponse();

  TransferResponse(const TransferResponse& from);

  inline TransferResponse& operator=(const TransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferResponse(TransferResponse&& from) noexcept
    : TransferResponse() {
    *this = ::std::move(from);
  }

  inline TransferResponse& operator=(TransferResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TransferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferResponse* internal_default_instance() {
    return reinterpret_cast<const TransferResponse*>(
               &_TransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TransferResponse* other);
  friend void swap(TransferResponse& a, TransferResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferResponse* New() const final {
    return CreateMaybeMessage<TransferResponse>(nullptr);
  }

  TransferResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TransferResponse& from);
  void MergeFrom(const TransferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TransferResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class ContractCallRequest_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<ContractCallRequest_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntryLite<ContractCallRequest_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  ContractCallRequest_ArgsEntry_DoNotUse();
  ContractCallRequest_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ContractCallRequest_ArgsEntry_DoNotUse& other);
  static const ContractCallRequest_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContractCallRequest_ArgsEntry_DoNotUse*>(&_ContractCallRequest_ArgsEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class ContractCallRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.ContractCallRequest) */ {
 public:
  ContractCallRequest();
  virtual ~ContractCallRequest();

  ContractCallRequest(const ContractCallRequest& from);

  inline ContractCallRequest& operator=(const ContractCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContractCallRequest(ContractCallRequest&& from) noexcept
    : ContractCallRequest() {
    *this = ::std::move(from);
  }

  inline ContractCallRequest& operator=(ContractCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ContractCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractCallRequest* internal_default_instance() {
    return reinterpret_cast<const ContractCallRequest*>(
               &_ContractCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ContractCallRequest* other);
  friend void swap(ContractCallRequest& a, ContractCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContractCallRequest* New() const final {
    return CreateMaybeMessage<ContractCallRequest>(nullptr);
  }

  ContractCallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContractCallRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ContractCallRequest& from);
  void MergeFrom(const ContractCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContractCallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> args = 5;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // string module = 2;
  void clear_module();
  static const int kModuleFieldNumber = 2;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // string contract = 3;
  void clear_contract();
  static const int kContractFieldNumber = 3;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  #if LANG_CXX11
  void set_contract(::std::string&& value);
  #endif
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // string method = 4;
  void clear_method();
  static const int kMethodFieldNumber = 4;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.ContractCallRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      ContractCallRequest_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > args_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class ContractCallResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.ContractCallResponse) */ {
 public:
  ContractCallResponse();
  virtual ~ContractCallResponse();

  ContractCallResponse(const ContractCallResponse& from);

  inline ContractCallResponse& operator=(const ContractCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContractCallResponse(ContractCallResponse&& from) noexcept
    : ContractCallResponse() {
    *this = ::std::move(from);
  }

  inline ContractCallResponse& operator=(ContractCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ContractCallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractCallResponse* internal_default_instance() {
    return reinterpret_cast<const ContractCallResponse*>(
               &_ContractCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ContractCallResponse* other);
  friend void swap(ContractCallResponse& a, ContractCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContractCallResponse* New() const final {
    return CreateMaybeMessage<ContractCallResponse>(nullptr);
  }

  ContractCallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContractCallResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ContractCallResponse& from);
  void MergeFrom(const ContractCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContractCallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Response response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::pb::Response& response() const;
  ::pb::Response* release_response();
  ::pb::Response* mutable_response();
  void set_allocated_response(::pb::Response* response);

  // @@protoc_insertion_point(class_scope:pb.ContractCallResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::Response* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bytes body = 3;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class SetOutputRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.SetOutputRequest) */ {
 public:
  SetOutputRequest();
  virtual ~SetOutputRequest();

  SetOutputRequest(const SetOutputRequest& from);

  inline SetOutputRequest& operator=(const SetOutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetOutputRequest(SetOutputRequest&& from) noexcept
    : SetOutputRequest() {
    *this = ::std::move(from);
  }

  inline SetOutputRequest& operator=(SetOutputRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SetOutputRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOutputRequest* internal_default_instance() {
    return reinterpret_cast<const SetOutputRequest*>(
               &_SetOutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SetOutputRequest* other);
  friend void swap(SetOutputRequest& a, SetOutputRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetOutputRequest* New() const final {
    return CreateMaybeMessage<SetOutputRequest>(nullptr);
  }

  SetOutputRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetOutputRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SetOutputRequest& from);
  void MergeFrom(const SetOutputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetOutputRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // .pb.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::pb::Response& response() const;
  ::pb::Response* release_response();
  ::pb::Response* mutable_response();
  void set_allocated_response(::pb::Response* response);

  // @@protoc_insertion_point(class_scope:pb.SetOutputRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::SyscallHeader* header_;
  ::pb::Response* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class SetOutputResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.SetOutputResponse) */ {
 public:
  SetOutputResponse();
  virtual ~SetOutputResponse();

  SetOutputResponse(const SetOutputResponse& from);

  inline SetOutputResponse& operator=(const SetOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetOutputResponse(SetOutputResponse&& from) noexcept
    : SetOutputResponse() {
    *this = ::std::move(from);
  }

  inline SetOutputResponse& operator=(SetOutputResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SetOutputResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOutputResponse* internal_default_instance() {
    return reinterpret_cast<const SetOutputResponse*>(
               &_SetOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SetOutputResponse* other);
  friend void swap(SetOutputResponse& a, SetOutputResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetOutputResponse* New() const final {
    return CreateMaybeMessage<SetOutputResponse>(nullptr);
  }

  SetOutputResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetOutputResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SetOutputResponse& from);
  void MergeFrom(const SetOutputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetOutputResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.SetOutputResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class GetCallArgsRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.GetCallArgsRequest) */ {
 public:
  GetCallArgsRequest();
  virtual ~GetCallArgsRequest();

  GetCallArgsRequest(const GetCallArgsRequest& from);

  inline GetCallArgsRequest& operator=(const GetCallArgsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCallArgsRequest(GetCallArgsRequest&& from) noexcept
    : GetCallArgsRequest() {
    *this = ::std::move(from);
  }

  inline GetCallArgsRequest& operator=(GetCallArgsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GetCallArgsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCallArgsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCallArgsRequest*>(
               &_GetCallArgsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(GetCallArgsRequest* other);
  friend void swap(GetCallArgsRequest& a, GetCallArgsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCallArgsRequest* New() const final {
    return CreateMaybeMessage<GetCallArgsRequest>(nullptr);
  }

  GetCallArgsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCallArgsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GetCallArgsRequest& from);
  void MergeFrom(const GetCallArgsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCallArgsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::SyscallHeader& header() const;
  ::pb::SyscallHeader* release_header();
  ::pb::SyscallHeader* mutable_header();
  void set_allocated_header(::pb::SyscallHeader* header);

  // @@protoc_insertion_point(class_scope:pb.GetCallArgsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::SyscallHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class TxInput :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.TxInput) */ {
 public:
  TxInput();
  virtual ~TxInput();

  TxInput(const TxInput& from);

  inline TxInput& operator=(const TxInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInput(TxInput&& from) noexcept
    : TxInput() {
    *this = ::std::move(from);
  }

  inline TxInput& operator=(TxInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TxInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInput* internal_default_instance() {
    return reinterpret_cast<const TxInput*>(
               &_TxInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(TxInput* other);
  friend void swap(TxInput& a, TxInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInput* New() const final {
    return CreateMaybeMessage<TxInput>(nullptr);
  }

  TxInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TxInput& from);
  void MergeFrom(const TxInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ref_txid = 1;
  void clear_ref_txid();
  static const int kRefTxidFieldNumber = 1;
  const ::std::string& ref_txid() const;
  void set_ref_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_txid(::std::string&& value);
  #endif
  void set_ref_txid(const char* value);
  void set_ref_txid(const void* value, size_t size);
  ::std::string* mutable_ref_txid();
  ::std::string* release_ref_txid();
  void set_allocated_ref_txid(::std::string* ref_txid);

  // bytes from_addr = 5;
  void clear_from_addr();
  static const int kFromAddrFieldNumber = 5;
  const ::std::string& from_addr() const;
  void set_from_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_addr(::std::string&& value);
  #endif
  void set_from_addr(const char* value);
  void set_from_addr(const void* value, size_t size);
  ::std::string* mutable_from_addr();
  ::std::string* release_from_addr();
  void set_allocated_from_addr(::std::string* from_addr);

  // bytes amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // int32 ref_offset = 2;
  void clear_ref_offset();
  static const int kRefOffsetFieldNumber = 2;
  ::google::protobuf::int32 ref_offset() const;
  void set_ref_offset(::google::protobuf::int32 value);

  // int64 frozen_height = 7;
  void clear_frozen_height();
  static const int kFrozenHeightFieldNumber = 7;
  ::google::protobuf::int64 frozen_height() const;
  void set_frozen_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TxInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ref_txid_;
  ::google::protobuf::internal::ArenaStringPtr from_addr_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::int32 ref_offset_;
  ::google::protobuf::int64 frozen_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class TxOutput :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.TxOutput) */ {
 public:
  TxOutput();
  virtual ~TxOutput();

  TxOutput(const TxOutput& from);

  inline TxOutput& operator=(const TxOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxOutput(TxOutput&& from) noexcept
    : TxOutput() {
    *this = ::std::move(from);
  }

  inline TxOutput& operator=(TxOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TxOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxOutput* internal_default_instance() {
    return reinterpret_cast<const TxOutput*>(
               &_TxOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(TxOutput* other);
  friend void swap(TxOutput& a, TxOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxOutput* New() const final {
    return CreateMaybeMessage<TxOutput>(nullptr);
  }

  TxOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TxOutput& from);
  void MergeFrom(const TxOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // bytes to_addr = 2;
  void clear_to_addr();
  static const int kToAddrFieldNumber = 2;
  const ::std::string& to_addr() const;
  void set_to_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_to_addr(::std::string&& value);
  #endif
  void set_to_addr(const char* value);
  void set_to_addr(const void* value, size_t size);
  ::std::string* mutable_to_addr();
  ::std::string* release_to_addr();
  void set_allocated_to_addr(::std::string* to_addr);

  // int64 frozen_height = 4;
  void clear_frozen_height();
  static const int kFrozenHeightFieldNumber = 4;
  ::google::protobuf::int64 frozen_height() const;
  void set_frozen_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TxOutput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr to_addr_;
  ::google::protobuf::int64 frozen_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TxInput tx_inputs = 3;
  int tx_inputs_size() const;
  void clear_tx_inputs();
  static const int kTxInputsFieldNumber = 3;
  ::pb::TxInput* mutable_tx_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxInput >*
      mutable_tx_inputs();
  const ::pb::TxInput& tx_inputs(int index) const;
  ::pb::TxInput* add_tx_inputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxInput >&
      tx_inputs() const;

  // repeated .pb.TxOutput tx_outputs = 4;
  int tx_outputs_size() const;
  void clear_tx_outputs();
  static const int kTxOutputsFieldNumber = 4;
  ::pb::TxOutput* mutable_tx_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >*
      mutable_tx_outputs();
  const ::pb::TxOutput& tx_outputs(int index) const;
  ::pb::TxOutput* add_tx_outputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >&
      tx_outputs() const;

  // repeated string auth_require = 27;
  int auth_require_size() const;
  void clear_auth_require();
  static const int kAuthRequireFieldNumber = 27;
  const ::std::string& auth_require(int index) const;
  ::std::string* mutable_auth_require(int index);
  void set_auth_require(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_auth_require(int index, ::std::string&& value);
  #endif
  void set_auth_require(int index, const char* value);
  void set_auth_require(int index, const char* value, size_t size);
  ::std::string* add_auth_require();
  void add_auth_require(const ::std::string& value);
  #if LANG_CXX11
  void add_auth_require(::std::string&& value);
  #endif
  void add_auth_require(const char* value);
  void add_auth_require(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& auth_require() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_auth_require();

  // bytes txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // bytes blockid = 2;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // bytes desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string initiator = 26;
  void clear_initiator();
  static const int kInitiatorFieldNumber = 26;
  const ::std::string& initiator() const;
  void set_initiator(const ::std::string& value);
  #if LANG_CXX11
  void set_initiator(::std::string&& value);
  #endif
  void set_initiator(const char* value);
  void set_initiator(const char* value, size_t size);
  ::std::string* mutable_initiator();
  ::std::string* release_initiator();
  void set_allocated_initiator(::std::string* initiator);

  // @@protoc_insertion_point(class_scope:pb.Transaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxInput > tx_inputs_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutput > tx_outputs_;
  ::google::protobuf::RepeatedPtrField<::std::string> auth_require_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr initiator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Transaction transactions = 11;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 11;
  ::pb::Transaction* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Transaction >*
      mutable_transactions();
  const ::pb::Transaction& transactions(int index) const;
  ::pb::Transaction* add_transactions();
  const ::google::protobuf::RepeatedPtrField< ::pb::Transaction >&
      transactions() const;

  // bytes blockid = 3;
  void clear_blockid();
  static const int kBlockidFieldNumber = 3;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // bytes pre_hash = 4;
  void clear_pre_hash();
  static const int kPreHashFieldNumber = 4;
  const ::std::string& pre_hash() const;
  void set_pre_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_hash(::std::string&& value);
  #endif
  void set_pre_hash(const char* value);
  void set_pre_hash(const void* value, size_t size);
  ::std::string* mutable_pre_hash();
  ::std::string* release_pre_hash();
  void set_allocated_pre_hash(::std::string* pre_hash);

  // bytes proposer = 5;
  void clear_proposer();
  static const int kProposerFieldNumber = 5;
  const ::std::string& proposer() const;
  void set_proposer(const ::std::string& value);
  #if LANG_CXX11
  void set_proposer(::std::string&& value);
  #endif
  void set_proposer(const char* value);
  void set_proposer(const void* value, size_t size);
  ::std::string* mutable_proposer();
  ::std::string* release_proposer();
  void set_allocated_proposer(::std::string* proposer);

  // bytes sign = 6;
  void clear_sign();
  static const int kSignFieldNumber = 6;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // bytes pubkey = 7;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 7;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // bytes next_hash = 15;
  void clear_next_hash();
  static const int kNextHashFieldNumber = 15;
  const ::std::string& next_hash() const;
  void set_next_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_next_hash(::std::string&& value);
  #endif
  void set_next_hash(const char* value);
  void set_next_hash(const void* value, size_t size);
  ::std::string* mutable_next_hash();
  ::std::string* release_next_hash();
  void set_allocated_next_hash(::std::string* next_hash);

  // int64 height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // int32 tx_count = 12;
  void clear_tx_count();
  static const int kTxCountFieldNumber = 12;
  ::google::protobuf::int32 tx_count() const;
  void set_tx_count(::google::protobuf::int32 value);

  // bool in_trunk = 14;
  void clear_in_trunk();
  static const int kInTrunkFieldNumber = 14;
  bool in_trunk() const;
  void set_in_trunk(bool value);

  // @@protoc_insertion_point(class_scope:pb.Block)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Transaction > transactions_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::google::protobuf::internal::ArenaStringPtr pre_hash_;
  ::google::protobuf::internal::ArenaStringPtr proposer_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr next_hash_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int32 tx_count_;
  bool in_trunk_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingRequest

// -------------------------------------------------------------------

// PingResponse

// -------------------------------------------------------------------

// NativeCallRequest

// int64 ctxid = 1;
inline void NativeCallRequest::clear_ctxid() {
  ctxid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 NativeCallRequest::ctxid() const {
  // @@protoc_insertion_point(field_get:pb.NativeCallRequest.ctxid)
  return ctxid_;
}
inline void NativeCallRequest::set_ctxid(::google::protobuf::int64 value) {
  
  ctxid_ = value;
  // @@protoc_insertion_point(field_set:pb.NativeCallRequest.ctxid)
}

// -------------------------------------------------------------------

// NativeCallResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CallArgs

// string method = 1;
inline void CallArgs::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallArgs::method() const {
  // @@protoc_insertion_point(field_get:pb.CallArgs.method)
  return method_.GetNoArena();
}
inline void CallArgs::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CallArgs.method)
}
#if LANG_CXX11
inline void CallArgs::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CallArgs.method)
}
#endif
inline void CallArgs::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CallArgs.method)
}
inline void CallArgs::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CallArgs.method)
}
inline ::std::string* CallArgs::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:pb.CallArgs.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallArgs::release_method() {
  // @@protoc_insertion_point(field_release:pb.CallArgs.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallArgs::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:pb.CallArgs.method)
}

// map<string, bytes> args = 2;
inline int CallArgs::args_size() const {
  return args_.size();
}
inline void CallArgs::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CallArgs::args() const {
  // @@protoc_insertion_point(field_map:pb.CallArgs.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CallArgs::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:pb.CallArgs.args)
  return args_.MutableMap();
}

// string initiator = 3;
inline void CallArgs::clear_initiator() {
  initiator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallArgs::initiator() const {
  // @@protoc_insertion_point(field_get:pb.CallArgs.initiator)
  return initiator_.GetNoArena();
}
inline void CallArgs::set_initiator(const ::std::string& value) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CallArgs.initiator)
}
#if LANG_CXX11
inline void CallArgs::set_initiator(::std::string&& value) {
  
  initiator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CallArgs.initiator)
}
#endif
inline void CallArgs::set_initiator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CallArgs.initiator)
}
inline void CallArgs::set_initiator(const char* value, size_t size) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CallArgs.initiator)
}
inline ::std::string* CallArgs::mutable_initiator() {
  
  // @@protoc_insertion_point(field_mutable:pb.CallArgs.initiator)
  return initiator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallArgs::release_initiator() {
  // @@protoc_insertion_point(field_release:pb.CallArgs.initiator)
  
  return initiator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallArgs::set_allocated_initiator(::std::string* initiator) {
  if (initiator != nullptr) {
    
  } else {
    
  }
  initiator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initiator);
  // @@protoc_insertion_point(field_set_allocated:pb.CallArgs.initiator)
}

// repeated string auth_require = 4;
inline int CallArgs::auth_require_size() const {
  return auth_require_.size();
}
inline void CallArgs::clear_auth_require() {
  auth_require_.Clear();
}
inline const ::std::string& CallArgs::auth_require(int index) const {
  // @@protoc_insertion_point(field_get:pb.CallArgs.auth_require)
  return auth_require_.Get(index);
}
inline ::std::string* CallArgs::mutable_auth_require(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CallArgs.auth_require)
  return auth_require_.Mutable(index);
}
inline void CallArgs::set_auth_require(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CallArgs.auth_require)
  auth_require_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CallArgs::set_auth_require(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CallArgs.auth_require)
  auth_require_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CallArgs::set_auth_require(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CallArgs.auth_require)
}
inline void CallArgs::set_auth_require(int index, const char* value, size_t size) {
  auth_require_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CallArgs.auth_require)
}
inline ::std::string* CallArgs::add_auth_require() {
  // @@protoc_insertion_point(field_add_mutable:pb.CallArgs.auth_require)
  return auth_require_.Add();
}
inline void CallArgs::add_auth_require(const ::std::string& value) {
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CallArgs.auth_require)
}
#if LANG_CXX11
inline void CallArgs::add_auth_require(::std::string&& value) {
  auth_require_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CallArgs.auth_require)
}
#endif
inline void CallArgs::add_auth_require(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CallArgs.auth_require)
}
inline void CallArgs::add_auth_require(const char* value, size_t size) {
  auth_require_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CallArgs.auth_require)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CallArgs::auth_require() const {
  // @@protoc_insertion_point(field_list:pb.CallArgs.auth_require)
  return auth_require_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CallArgs::mutable_auth_require() {
  // @@protoc_insertion_point(field_mutable_list:pb.CallArgs.auth_require)
  return &auth_require_;
}

// -------------------------------------------------------------------

// SyscallHeader

// int64 ctxid = 1;
inline void SyscallHeader::clear_ctxid() {
  ctxid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SyscallHeader::ctxid() const {
  // @@protoc_insertion_point(field_get:pb.SyscallHeader.ctxid)
  return ctxid_;
}
inline void SyscallHeader::set_ctxid(::google::protobuf::int64 value) {
  
  ctxid_ = value;
  // @@protoc_insertion_point(field_set:pb.SyscallHeader.ctxid)
}

// -------------------------------------------------------------------

// PutRequest

// .pb.SyscallHeader header = 1;
inline bool PutRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void PutRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& PutRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.PutRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* PutRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.PutRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* PutRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PutRequest.header)
  return header_;
}
inline void PutRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.PutRequest.header)
}

// bytes key = 2;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:pb.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PutRequest.key)
}
#if LANG_CXX11
inline void PutRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PutRequest.key)
}
#endif
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:pb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.PutRequest.key)
}

// bytes value = 3;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:pb.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PutRequest.value)
}
#if LANG_CXX11
inline void PutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PutRequest.value)
}
#endif
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:pb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// -------------------------------------------------------------------

// GetRequest

// .pb.SyscallHeader header = 1;
inline bool GetRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void GetRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& GetRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.GetRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* GetRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.GetRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* GetRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GetRequest.header)
  return header_;
}
inline void GetRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.GetRequest.header)
}

// bytes key = 2;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:pb.GetRequest.key)
  return key_.GetNoArena();
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GetRequest.key)
}
#if LANG_CXX11
inline void GetRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRequest.key)
}
#endif
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:pb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// bytes value = 1;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:pb.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GetResponse.value)
}
#if LANG_CXX11
inline void GetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetResponse.value)
}
#endif
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:pb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.GetResponse.value)
}

// -------------------------------------------------------------------

// DeleteRequest

// .pb.SyscallHeader header = 1;
inline bool DeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void DeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& DeleteRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.DeleteRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* DeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.DeleteRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* DeleteRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.DeleteRequest.header)
  return header_;
}
inline void DeleteRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.DeleteRequest.header)
}

// bytes key = 2;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:pb.DeleteRequest.key)
  return key_.GetNoArena();
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeleteRequest.key)
}
#if LANG_CXX11
inline void DeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeleteRequest.key)
}
#endif
inline void DeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeleteRequest.key)
}
inline ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:pb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// -------------------------------------------------------------------

// IteratorRequest

// .pb.SyscallHeader header = 1;
inline bool IteratorRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void IteratorRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& IteratorRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.IteratorRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* IteratorRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.IteratorRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* IteratorRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.IteratorRequest.header)
  return header_;
}
inline void IteratorRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.IteratorRequest.header)
}

// bytes start = 2;
inline void IteratorRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IteratorRequest::start() const {
  // @@protoc_insertion_point(field_get:pb.IteratorRequest.start)
  return start_.GetNoArena();
}
inline void IteratorRequest::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IteratorRequest.start)
}
#if LANG_CXX11
inline void IteratorRequest::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IteratorRequest.start)
}
#endif
inline void IteratorRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IteratorRequest.start)
}
inline void IteratorRequest::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IteratorRequest.start)
}
inline ::std::string* IteratorRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:pb.IteratorRequest.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IteratorRequest::release_start() {
  // @@protoc_insertion_point(field_release:pb.IteratorRequest.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IteratorRequest::set_allocated_start(::std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:pb.IteratorRequest.start)
}

// bytes limit = 3;
inline void IteratorRequest::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IteratorRequest::limit() const {
  // @@protoc_insertion_point(field_get:pb.IteratorRequest.limit)
  return limit_.GetNoArena();
}
inline void IteratorRequest::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IteratorRequest.limit)
}
#if LANG_CXX11
inline void IteratorRequest::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IteratorRequest.limit)
}
#endif
inline void IteratorRequest::set_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IteratorRequest.limit)
}
inline void IteratorRequest::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IteratorRequest.limit)
}
inline ::std::string* IteratorRequest::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:pb.IteratorRequest.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IteratorRequest::release_limit() {
  // @@protoc_insertion_point(field_release:pb.IteratorRequest.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IteratorRequest::set_allocated_limit(::std::string* limit) {
  if (limit != nullptr) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:pb.IteratorRequest.limit)
}

// int32 cap = 4;
inline void IteratorRequest::clear_cap() {
  cap_ = 0;
}
inline ::google::protobuf::int32 IteratorRequest::cap() const {
  // @@protoc_insertion_point(field_get:pb.IteratorRequest.cap)
  return cap_;
}
inline void IteratorRequest::set_cap(::google::protobuf::int32 value) {
  
  cap_ = value;
  // @@protoc_insertion_point(field_set:pb.IteratorRequest.cap)
}

// -------------------------------------------------------------------

// IteratorItem

// bytes key = 1;
inline void IteratorItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IteratorItem::key() const {
  // @@protoc_insertion_point(field_get:pb.IteratorItem.key)
  return key_.GetNoArena();
}
inline void IteratorItem::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IteratorItem.key)
}
#if LANG_CXX11
inline void IteratorItem::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IteratorItem.key)
}
#endif
inline void IteratorItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IteratorItem.key)
}
inline void IteratorItem::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IteratorItem.key)
}
inline ::std::string* IteratorItem::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.IteratorItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IteratorItem::release_key() {
  // @@protoc_insertion_point(field_release:pb.IteratorItem.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IteratorItem::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.IteratorItem.key)
}

// bytes value = 2;
inline void IteratorItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IteratorItem::value() const {
  // @@protoc_insertion_point(field_get:pb.IteratorItem.value)
  return value_.GetNoArena();
}
inline void IteratorItem::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IteratorItem.value)
}
#if LANG_CXX11
inline void IteratorItem::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IteratorItem.value)
}
#endif
inline void IteratorItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IteratorItem.value)
}
inline void IteratorItem::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IteratorItem.value)
}
inline ::std::string* IteratorItem::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.IteratorItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IteratorItem::release_value() {
  // @@protoc_insertion_point(field_release:pb.IteratorItem.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IteratorItem::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.IteratorItem.value)
}

// -------------------------------------------------------------------

// IteratorResponse

// repeated .pb.IteratorItem items = 1;
inline int IteratorResponse::items_size() const {
  return items_.size();
}
inline void IteratorResponse::clear_items() {
  items_.Clear();
}
inline ::pb::IteratorItem* IteratorResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IteratorResponse.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::IteratorItem >*
IteratorResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pb.IteratorResponse.items)
  return &items_;
}
inline const ::pb::IteratorItem& IteratorResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:pb.IteratorResponse.items)
  return items_.Get(index);
}
inline ::pb::IteratorItem* IteratorResponse::add_items() {
  // @@protoc_insertion_point(field_add:pb.IteratorResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::IteratorItem >&
IteratorResponse::items() const {
  // @@protoc_insertion_point(field_list:pb.IteratorResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// QueryTxRequest

// .pb.SyscallHeader header = 1;
inline bool QueryTxRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void QueryTxRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& QueryTxRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.QueryTxRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* QueryTxRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.QueryTxRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* QueryTxRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.QueryTxRequest.header)
  return header_;
}
inline void QueryTxRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.QueryTxRequest.header)
}

// bytes txid = 2;
inline void QueryTxRequest::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:pb.QueryTxRequest.txid)
  return txid_.GetNoArena();
}
inline void QueryTxRequest::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.QueryTxRequest.txid)
}
#if LANG_CXX11
inline void QueryTxRequest::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.QueryTxRequest.txid)
}
#endif
inline void QueryTxRequest::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.QueryTxRequest.txid)
}
inline void QueryTxRequest::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.QueryTxRequest.txid)
}
inline ::std::string* QueryTxRequest::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.QueryTxRequest.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:pb.QueryTxRequest.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryTxRequest::set_allocated_txid(::std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:pb.QueryTxRequest.txid)
}

// -------------------------------------------------------------------

// QueryTxResponse

// .pb.Transaction tx = 1;
inline bool QueryTxResponse::has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline void QueryTxResponse::clear_tx() {
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
inline const ::pb::Transaction& QueryTxResponse::tx() const {
  const ::pb::Transaction* p = tx_;
  // @@protoc_insertion_point(field_get:pb.QueryTxResponse.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction*>(
      &::pb::_Transaction_default_instance_);
}
inline ::pb::Transaction* QueryTxResponse::release_tx() {
  // @@protoc_insertion_point(field_release:pb.QueryTxResponse.tx)
  
  ::pb::Transaction* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::pb::Transaction* QueryTxResponse::mutable_tx() {
  
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.QueryTxResponse.tx)
  return tx_;
}
inline void QueryTxResponse::set_allocated_tx(::pb::Transaction* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:pb.QueryTxResponse.tx)
}

// -------------------------------------------------------------------

// QueryBlockRequest

// .pb.SyscallHeader header = 1;
inline bool QueryBlockRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void QueryBlockRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& QueryBlockRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.QueryBlockRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* QueryBlockRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.QueryBlockRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* QueryBlockRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.QueryBlockRequest.header)
  return header_;
}
inline void QueryBlockRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.QueryBlockRequest.header)
}

// bytes blockid = 2;
inline void QueryBlockRequest::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryBlockRequest::blockid() const {
  // @@protoc_insertion_point(field_get:pb.QueryBlockRequest.blockid)
  return blockid_.GetNoArena();
}
inline void QueryBlockRequest::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.QueryBlockRequest.blockid)
}
#if LANG_CXX11
inline void QueryBlockRequest::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.QueryBlockRequest.blockid)
}
#endif
inline void QueryBlockRequest::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.QueryBlockRequest.blockid)
}
inline void QueryBlockRequest::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.QueryBlockRequest.blockid)
}
inline ::std::string* QueryBlockRequest::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.QueryBlockRequest.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryBlockRequest::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.QueryBlockRequest.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBlockRequest::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.QueryBlockRequest.blockid)
}

// -------------------------------------------------------------------

// QueryBlockResponse

// .pb.Block block = 1;
inline bool QueryBlockResponse::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void QueryBlockResponse::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::pb::Block& QueryBlockResponse::block() const {
  const ::pb::Block* p = block_;
  // @@protoc_insertion_point(field_get:pb.QueryBlockResponse.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Block*>(
      &::pb::_Block_default_instance_);
}
inline ::pb::Block* QueryBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:pb.QueryBlockResponse.block)
  
  ::pb::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::pb::Block* QueryBlockResponse::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.QueryBlockResponse.block)
  return block_;
}
inline void QueryBlockResponse::set_allocated_block(::pb::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:pb.QueryBlockResponse.block)
}

// -------------------------------------------------------------------

// TransferRequest

// .pb.SyscallHeader header = 1;
inline bool TransferRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void TransferRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& TransferRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.TransferRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* TransferRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.TransferRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* TransferRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TransferRequest.header)
  return header_;
}
inline void TransferRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.TransferRequest.header)
}

// string to = 2;
inline void TransferRequest::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRequest::to() const {
  // @@protoc_insertion_point(field_get:pb.TransferRequest.to)
  return to_.GetNoArena();
}
inline void TransferRequest::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferRequest.to)
}
#if LANG_CXX11
inline void TransferRequest::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferRequest.to)
}
#endif
inline void TransferRequest::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferRequest.to)
}
inline void TransferRequest::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferRequest.to)
}
inline ::std::string* TransferRequest::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferRequest.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRequest::release_to() {
  // @@protoc_insertion_point(field_release:pb.TransferRequest.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRequest::set_allocated_to(::std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferRequest.to)
}

// string amount = 3;
inline void TransferRequest::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:pb.TransferRequest.amount)
  return amount_.GetNoArena();
}
inline void TransferRequest::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferRequest.amount)
}
#if LANG_CXX11
inline void TransferRequest::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferRequest.amount)
}
#endif
inline void TransferRequest::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferRequest.amount)
}
inline void TransferRequest::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferRequest.amount)
}
inline ::std::string* TransferRequest::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferRequest.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRequest::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TransferRequest.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRequest::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferRequest.amount)
}

// -------------------------------------------------------------------

// TransferResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContractCallRequest

// .pb.SyscallHeader header = 1;
inline bool ContractCallRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void ContractCallRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& ContractCallRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.ContractCallRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* ContractCallRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.ContractCallRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* ContractCallRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ContractCallRequest.header)
  return header_;
}
inline void ContractCallRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.ContractCallRequest.header)
}

// string module = 2;
inline void ContractCallRequest::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContractCallRequest::module() const {
  // @@protoc_insertion_point(field_get:pb.ContractCallRequest.module)
  return module_.GetNoArena();
}
inline void ContractCallRequest::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ContractCallRequest.module)
}
#if LANG_CXX11
inline void ContractCallRequest::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ContractCallRequest.module)
}
#endif
inline void ContractCallRequest::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ContractCallRequest.module)
}
inline void ContractCallRequest::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ContractCallRequest.module)
}
inline ::std::string* ContractCallRequest::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:pb.ContractCallRequest.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContractCallRequest::release_module() {
  // @@protoc_insertion_point(field_release:pb.ContractCallRequest.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContractCallRequest::set_allocated_module(::std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:pb.ContractCallRequest.module)
}

// string contract = 3;
inline void ContractCallRequest::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContractCallRequest::contract() const {
  // @@protoc_insertion_point(field_get:pb.ContractCallRequest.contract)
  return contract_.GetNoArena();
}
inline void ContractCallRequest::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ContractCallRequest.contract)
}
#if LANG_CXX11
inline void ContractCallRequest::set_contract(::std::string&& value) {
  
  contract_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ContractCallRequest.contract)
}
#endif
inline void ContractCallRequest::set_contract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ContractCallRequest.contract)
}
inline void ContractCallRequest::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ContractCallRequest.contract)
}
inline ::std::string* ContractCallRequest::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:pb.ContractCallRequest.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContractCallRequest::release_contract() {
  // @@protoc_insertion_point(field_release:pb.ContractCallRequest.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContractCallRequest::set_allocated_contract(::std::string* contract) {
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:pb.ContractCallRequest.contract)
}

// string method = 4;
inline void ContractCallRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContractCallRequest::method() const {
  // @@protoc_insertion_point(field_get:pb.ContractCallRequest.method)
  return method_.GetNoArena();
}
inline void ContractCallRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ContractCallRequest.method)
}
#if LANG_CXX11
inline void ContractCallRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ContractCallRequest.method)
}
#endif
inline void ContractCallRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ContractCallRequest.method)
}
inline void ContractCallRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ContractCallRequest.method)
}
inline ::std::string* ContractCallRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:pb.ContractCallRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContractCallRequest::release_method() {
  // @@protoc_insertion_point(field_release:pb.ContractCallRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContractCallRequest::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:pb.ContractCallRequest.method)
}

// map<string, bytes> args = 5;
inline int ContractCallRequest::args_size() const {
  return args_.size();
}
inline void ContractCallRequest::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ContractCallRequest::args() const {
  // @@protoc_insertion_point(field_map:pb.ContractCallRequest.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ContractCallRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:pb.ContractCallRequest.args)
  return args_.MutableMap();
}

// -------------------------------------------------------------------

// ContractCallResponse

// .pb.Response response = 1;
inline bool ContractCallResponse::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline void ContractCallResponse::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::pb::Response& ContractCallResponse::response() const {
  const ::pb::Response* p = response_;
  // @@protoc_insertion_point(field_get:pb.ContractCallResponse.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Response*>(
      &::pb::_Response_default_instance_);
}
inline ::pb::Response* ContractCallResponse::release_response() {
  // @@protoc_insertion_point(field_release:pb.ContractCallResponse.response)
  
  ::pb::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::pb::Response* ContractCallResponse::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ContractCallResponse.response)
  return response_;
}
inline void ContractCallResponse::set_allocated_response(::pb::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:pb.ContractCallResponse.response)
}

// -------------------------------------------------------------------

// Response

// int32 status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:pb.Response.status)
  return status_;
}
inline void Response::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.Response.status)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:pb.Response.message)
  return message_.GetNoArena();
}
inline void Response::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Response.message)
}
#if LANG_CXX11
inline void Response::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Response.message)
}
#endif
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Response.message)
}
inline void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Response.message)
}
inline ::std::string* Response::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.Response.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:pb.Response.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.Response.message)
}

// bytes body = 3;
inline void Response::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::body() const {
  // @@protoc_insertion_point(field_get:pb.Response.body)
  return body_.GetNoArena();
}
inline void Response::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Response.body)
}
#if LANG_CXX11
inline void Response::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Response.body)
}
#endif
inline void Response::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Response.body)
}
inline void Response::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Response.body)
}
inline ::std::string* Response::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:pb.Response.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_body() {
  // @@protoc_insertion_point(field_release:pb.Response.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_body(::std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:pb.Response.body)
}

// -------------------------------------------------------------------

// SetOutputRequest

// .pb.SyscallHeader header = 1;
inline bool SetOutputRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void SetOutputRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& SetOutputRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.SetOutputRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* SetOutputRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.SetOutputRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* SetOutputRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SetOutputRequest.header)
  return header_;
}
inline void SetOutputRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.SetOutputRequest.header)
}

// .pb.Response response = 2;
inline bool SetOutputRequest::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline void SetOutputRequest::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::pb::Response& SetOutputRequest::response() const {
  const ::pb::Response* p = response_;
  // @@protoc_insertion_point(field_get:pb.SetOutputRequest.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Response*>(
      &::pb::_Response_default_instance_);
}
inline ::pb::Response* SetOutputRequest::release_response() {
  // @@protoc_insertion_point(field_release:pb.SetOutputRequest.response)
  
  ::pb::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::pb::Response* SetOutputRequest::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SetOutputRequest.response)
  return response_;
}
inline void SetOutputRequest::set_allocated_response(::pb::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:pb.SetOutputRequest.response)
}

// -------------------------------------------------------------------

// SetOutputResponse

// -------------------------------------------------------------------

// GetCallArgsRequest

// .pb.SyscallHeader header = 1;
inline bool GetCallArgsRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void GetCallArgsRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::SyscallHeader& GetCallArgsRequest::header() const {
  const ::pb::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.GetCallArgsRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SyscallHeader*>(
      &::pb::_SyscallHeader_default_instance_);
}
inline ::pb::SyscallHeader* GetCallArgsRequest::release_header() {
  // @@protoc_insertion_point(field_release:pb.GetCallArgsRequest.header)
  
  ::pb::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::SyscallHeader* GetCallArgsRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GetCallArgsRequest.header)
  return header_;
}
inline void GetCallArgsRequest::set_allocated_header(::pb::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.GetCallArgsRequest.header)
}

// -------------------------------------------------------------------

// TxInput

// bytes ref_txid = 1;
inline void TxInput::clear_ref_txid() {
  ref_txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::ref_txid() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.ref_txid)
  return ref_txid_.GetNoArena();
}
inline void TxInput::set_ref_txid(const ::std::string& value) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.ref_txid)
}
#if LANG_CXX11
inline void TxInput::set_ref_txid(::std::string&& value) {
  
  ref_txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.ref_txid)
}
#endif
inline void TxInput::set_ref_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.ref_txid)
}
inline void TxInput::set_ref_txid(const void* value, size_t size) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.ref_txid)
}
inline ::std::string* TxInput::mutable_ref_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.ref_txid)
  return ref_txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_ref_txid() {
  // @@protoc_insertion_point(field_release:pb.TxInput.ref_txid)
  
  return ref_txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_ref_txid(::std::string* ref_txid) {
  if (ref_txid != nullptr) {
    
  } else {
    
  }
  ref_txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_txid);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.ref_txid)
}

// int32 ref_offset = 2;
inline void TxInput::clear_ref_offset() {
  ref_offset_ = 0;
}
inline ::google::protobuf::int32 TxInput::ref_offset() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.ref_offset)
  return ref_offset_;
}
inline void TxInput::set_ref_offset(::google::protobuf::int32 value) {
  
  ref_offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TxInput.ref_offset)
}

// bytes from_addr = 5;
inline void TxInput::clear_from_addr() {
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::from_addr() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.from_addr)
  return from_addr_.GetNoArena();
}
inline void TxInput::set_from_addr(const ::std::string& value) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.from_addr)
}
#if LANG_CXX11
inline void TxInput::set_from_addr(::std::string&& value) {
  
  from_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.from_addr)
}
#endif
inline void TxInput::set_from_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.from_addr)
}
inline void TxInput::set_from_addr(const void* value, size_t size) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.from_addr)
}
inline ::std::string* TxInput::mutable_from_addr() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.from_addr)
  return from_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_from_addr() {
  // @@protoc_insertion_point(field_release:pb.TxInput.from_addr)
  
  return from_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_from_addr(::std::string* from_addr) {
  if (from_addr != nullptr) {
    
  } else {
    
  }
  from_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_addr);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.from_addr)
}

// bytes amount = 6;
inline void TxInput::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::amount() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.amount)
  return amount_.GetNoArena();
}
inline void TxInput::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.amount)
}
#if LANG_CXX11
inline void TxInput::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.amount)
}
#endif
inline void TxInput::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.amount)
}
inline void TxInput::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.amount)
}
inline ::std::string* TxInput::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TxInput.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.amount)
}

// int64 frozen_height = 7;
inline void TxInput::clear_frozen_height() {
  frozen_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxInput::frozen_height() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.frozen_height)
  return frozen_height_;
}
inline void TxInput::set_frozen_height(::google::protobuf::int64 value) {
  
  frozen_height_ = value;
  // @@protoc_insertion_point(field_set:pb.TxInput.frozen_height)
}

// -------------------------------------------------------------------

// TxOutput

// bytes amount = 1;
inline void TxOutput::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutput::amount() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.amount)
  return amount_.GetNoArena();
}
inline void TxOutput::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutput.amount)
}
#if LANG_CXX11
inline void TxOutput::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutput.amount)
}
#endif
inline void TxOutput::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutput.amount)
}
inline void TxOutput::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutput.amount)
}
inline ::std::string* TxOutput::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutput.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutput::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TxOutput.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutput::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutput.amount)
}

// bytes to_addr = 2;
inline void TxOutput::clear_to_addr() {
  to_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutput::to_addr() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.to_addr)
  return to_addr_.GetNoArena();
}
inline void TxOutput::set_to_addr(const ::std::string& value) {
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutput.to_addr)
}
#if LANG_CXX11
inline void TxOutput::set_to_addr(::std::string&& value) {
  
  to_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutput.to_addr)
}
#endif
inline void TxOutput::set_to_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutput.to_addr)
}
inline void TxOutput::set_to_addr(const void* value, size_t size) {
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutput.to_addr)
}
inline ::std::string* TxOutput::mutable_to_addr() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutput.to_addr)
  return to_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutput::release_to_addr() {
  // @@protoc_insertion_point(field_release:pb.TxOutput.to_addr)
  
  return to_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutput::set_allocated_to_addr(::std::string* to_addr) {
  if (to_addr != nullptr) {
    
  } else {
    
  }
  to_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_addr);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutput.to_addr)
}

// int64 frozen_height = 4;
inline void TxOutput::clear_frozen_height() {
  frozen_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxOutput::frozen_height() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.frozen_height)
  return frozen_height_;
}
inline void TxOutput::set_frozen_height(::google::protobuf::int64 value) {
  
  frozen_height_ = value;
  // @@protoc_insertion_point(field_set:pb.TxOutput.frozen_height)
}

// -------------------------------------------------------------------

// Transaction

// bytes txid = 1;
inline void Transaction::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::txid() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.txid)
  return txid_.GetNoArena();
}
inline void Transaction::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.txid)
}
#if LANG_CXX11
inline void Transaction::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.txid)
}
#endif
inline void Transaction::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.txid)
}
inline void Transaction::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.txid)
}
inline ::std::string* Transaction::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_txid() {
  // @@protoc_insertion_point(field_release:pb.Transaction.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_txid(::std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.txid)
}

// bytes blockid = 2;
inline void Transaction::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::blockid() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.blockid)
  return blockid_.GetNoArena();
}
inline void Transaction::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.blockid)
}
#if LANG_CXX11
inline void Transaction::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.blockid)
}
#endif
inline void Transaction::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.blockid)
}
inline void Transaction::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.blockid)
}
inline ::std::string* Transaction::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.Transaction.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.blockid)
}

// repeated .pb.TxInput tx_inputs = 3;
inline int Transaction::tx_inputs_size() const {
  return tx_inputs_.size();
}
inline void Transaction::clear_tx_inputs() {
  tx_inputs_.Clear();
}
inline ::pb::TxInput* Transaction::mutable_tx_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_inputs)
  return tx_inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxInput >*
Transaction::mutable_tx_inputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_inputs)
  return &tx_inputs_;
}
inline const ::pb::TxInput& Transaction::tx_inputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_inputs)
  return tx_inputs_.Get(index);
}
inline ::pb::TxInput* Transaction::add_tx_inputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_inputs)
  return tx_inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxInput >&
Transaction::tx_inputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_inputs)
  return tx_inputs_;
}

// repeated .pb.TxOutput tx_outputs = 4;
inline int Transaction::tx_outputs_size() const {
  return tx_outputs_.size();
}
inline void Transaction::clear_tx_outputs() {
  tx_outputs_.Clear();
}
inline ::pb::TxOutput* Transaction::mutable_tx_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_outputs)
  return tx_outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >*
Transaction::mutable_tx_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_outputs)
  return &tx_outputs_;
}
inline const ::pb::TxOutput& Transaction::tx_outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_outputs)
  return tx_outputs_.Get(index);
}
inline ::pb::TxOutput* Transaction::add_tx_outputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_outputs)
  return tx_outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >&
Transaction::tx_outputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_outputs)
  return tx_outputs_;
}

// bytes desc = 6;
inline void Transaction::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::desc() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.desc)
  return desc_.GetNoArena();
}
inline void Transaction::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.desc)
}
#if LANG_CXX11
inline void Transaction::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.desc)
}
#endif
inline void Transaction::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.desc)
}
inline void Transaction::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.desc)
}
inline ::std::string* Transaction::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_desc() {
  // @@protoc_insertion_point(field_release:pb.Transaction.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.desc)
}

// string initiator = 26;
inline void Transaction::clear_initiator() {
  initiator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::initiator() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.initiator)
  return initiator_.GetNoArena();
}
inline void Transaction::set_initiator(const ::std::string& value) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.initiator)
}
#if LANG_CXX11
inline void Transaction::set_initiator(::std::string&& value) {
  
  initiator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.initiator)
}
#endif
inline void Transaction::set_initiator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.initiator)
}
inline void Transaction::set_initiator(const char* value, size_t size) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.initiator)
}
inline ::std::string* Transaction::mutable_initiator() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.initiator)
  return initiator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_initiator() {
  // @@protoc_insertion_point(field_release:pb.Transaction.initiator)
  
  return initiator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_initiator(::std::string* initiator) {
  if (initiator != nullptr) {
    
  } else {
    
  }
  initiator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initiator);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.initiator)
}

// repeated string auth_require = 27;
inline int Transaction::auth_require_size() const {
  return auth_require_.size();
}
inline void Transaction::clear_auth_require() {
  auth_require_.Clear();
}
inline const ::std::string& Transaction::auth_require(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.auth_require)
  return auth_require_.Get(index);
}
inline ::std::string* Transaction::mutable_auth_require(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.auth_require)
  return auth_require_.Mutable(index);
}
inline void Transaction::set_auth_require(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Transaction.auth_require)
  auth_require_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Transaction::set_auth_require(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Transaction.auth_require)
  auth_require_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Transaction::set_auth_require(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Transaction.auth_require)
}
inline void Transaction::set_auth_require(int index, const char* value, size_t size) {
  auth_require_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.auth_require)
}
inline ::std::string* Transaction::add_auth_require() {
  // @@protoc_insertion_point(field_add_mutable:pb.Transaction.auth_require)
  return auth_require_.Add();
}
inline void Transaction::add_auth_require(const ::std::string& value) {
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Transaction.auth_require)
}
#if LANG_CXX11
inline void Transaction::add_auth_require(::std::string&& value) {
  auth_require_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Transaction.auth_require)
}
#endif
inline void Transaction::add_auth_require(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Transaction.auth_require)
}
inline void Transaction::add_auth_require(const char* value, size_t size) {
  auth_require_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Transaction.auth_require)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Transaction::auth_require() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.auth_require)
  return auth_require_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Transaction::mutable_auth_require() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.auth_require)
  return &auth_require_;
}

// -------------------------------------------------------------------

// Block

// bytes blockid = 3;
inline void Block::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::blockid() const {
  // @@protoc_insertion_point(field_get:pb.Block.blockid)
  return blockid_.GetNoArena();
}
inline void Block::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.blockid)
}
#if LANG_CXX11
inline void Block::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.blockid)
}
#endif
inline void Block::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.blockid)
}
inline void Block::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.blockid)
}
inline ::std::string* Block::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.Block.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.blockid)
}

// bytes pre_hash = 4;
inline void Block::clear_pre_hash() {
  pre_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::pre_hash() const {
  // @@protoc_insertion_point(field_get:pb.Block.pre_hash)
  return pre_hash_.GetNoArena();
}
inline void Block::set_pre_hash(const ::std::string& value) {
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.pre_hash)
}
#if LANG_CXX11
inline void Block::set_pre_hash(::std::string&& value) {
  
  pre_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.pre_hash)
}
#endif
inline void Block::set_pre_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.pre_hash)
}
inline void Block::set_pre_hash(const void* value, size_t size) {
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.pre_hash)
}
inline ::std::string* Block::mutable_pre_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.pre_hash)
  return pre_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_pre_hash() {
  // @@protoc_insertion_point(field_release:pb.Block.pre_hash)
  
  return pre_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_pre_hash(::std::string* pre_hash) {
  if (pre_hash != nullptr) {
    
  } else {
    
  }
  pre_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.pre_hash)
}

// bytes proposer = 5;
inline void Block::clear_proposer() {
  proposer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::proposer() const {
  // @@protoc_insertion_point(field_get:pb.Block.proposer)
  return proposer_.GetNoArena();
}
inline void Block::set_proposer(const ::std::string& value) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.proposer)
}
#if LANG_CXX11
inline void Block::set_proposer(::std::string&& value) {
  
  proposer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.proposer)
}
#endif
inline void Block::set_proposer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.proposer)
}
inline void Block::set_proposer(const void* value, size_t size) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.proposer)
}
inline ::std::string* Block::mutable_proposer() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.proposer)
  return proposer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_proposer() {
  // @@protoc_insertion_point(field_release:pb.Block.proposer)
  
  return proposer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_proposer(::std::string* proposer) {
  if (proposer != nullptr) {
    
  } else {
    
  }
  proposer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.proposer)
}

// bytes sign = 6;
inline void Block::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::sign() const {
  // @@protoc_insertion_point(field_get:pb.Block.sign)
  return sign_.GetNoArena();
}
inline void Block::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.sign)
}
#if LANG_CXX11
inline void Block::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.sign)
}
#endif
inline void Block::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.sign)
}
inline void Block::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.sign)
}
inline ::std::string* Block::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_sign() {
  // @@protoc_insertion_point(field_release:pb.Block.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_sign(::std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.sign)
}

// bytes pubkey = 7;
inline void Block::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::pubkey() const {
  // @@protoc_insertion_point(field_get:pb.Block.pubkey)
  return pubkey_.GetNoArena();
}
inline void Block::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.pubkey)
}
#if LANG_CXX11
inline void Block::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.pubkey)
}
#endif
inline void Block::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.pubkey)
}
inline void Block::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.pubkey)
}
inline ::std::string* Block::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_pubkey() {
  // @@protoc_insertion_point(field_release:pb.Block.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.pubkey)
}

// int64 height = 9;
inline void Block::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Block::height() const {
  // @@protoc_insertion_point(field_get:pb.Block.height)
  return height_;
}
inline void Block::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.Block.height)
}

// repeated .pb.Transaction transactions = 11;
inline int Block::transactions_size() const {
  return transactions_.size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline ::pb::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Block.transactions)
  return transactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.Block.transactions)
  return &transactions_;
}
inline const ::pb::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.Block.transactions)
  return transactions_.Get(index);
}
inline ::pb::Transaction* Block::add_transactions() {
  // @@protoc_insertion_point(field_add:pb.Block.transactions)
  return transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:pb.Block.transactions)
  return transactions_;
}

// int32 tx_count = 12;
inline void Block::clear_tx_count() {
  tx_count_ = 0;
}
inline ::google::protobuf::int32 Block::tx_count() const {
  // @@protoc_insertion_point(field_get:pb.Block.tx_count)
  return tx_count_;
}
inline void Block::set_tx_count(::google::protobuf::int32 value) {
  
  tx_count_ = value;
  // @@protoc_insertion_point(field_set:pb.Block.tx_count)
}

// bool in_trunk = 14;
inline void Block::clear_in_trunk() {
  in_trunk_ = false;
}
inline bool Block::in_trunk() const {
  // @@protoc_insertion_point(field_get:pb.Block.in_trunk)
  return in_trunk_;
}
inline void Block::set_in_trunk(bool value) {
  
  in_trunk_ = value;
  // @@protoc_insertion_point(field_set:pb.Block.in_trunk)
}

// bytes next_hash = 15;
inline void Block::clear_next_hash() {
  next_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::next_hash() const {
  // @@protoc_insertion_point(field_get:pb.Block.next_hash)
  return next_hash_.GetNoArena();
}
inline void Block::set_next_hash(const ::std::string& value) {
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.next_hash)
}
#if LANG_CXX11
inline void Block::set_next_hash(::std::string&& value) {
  
  next_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.next_hash)
}
#endif
inline void Block::set_next_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.next_hash)
}
inline void Block::set_next_hash(const void* value, size_t size) {
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.next_hash)
}
inline ::std::string* Block::mutable_next_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.next_hash)
  return next_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_next_hash() {
  // @@protoc_insertion_point(field_release:pb.Block.next_hash)
  
  return next_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_next_hash(::std::string* next_hash) {
  if (next_hash != nullptr) {
    
  } else {
    
  }
  next_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.next_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_contract_2eproto
