// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xchain.proto

#include "xchain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LedgerMeta_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResourceLimit_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignatureInfo_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Speeds_SumSpeedsEntry_DoNotUse_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TokenDetail_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxDataAccount_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxInputExt_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxInput_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxOutputExt_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxOutput_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UtxoMeta_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BCSpeeds_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Speeds_BcSpeedsEntry_DoNotUse_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InternalBlock_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InvokeRequest_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Speeds_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TxStatus_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_BCStatus_xchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xchain_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Transaction_xchain_2eproto;
namespace pb {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class TxDataAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxDataAccount> _instance;
} _TxDataAccount_default_instance_;
class TxDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxData> _instance;
} _TxData_default_instance_;
class TxStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxStatus> _instance;
} _TxStatus_default_instance_;
class BatchTxsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchTxs> _instance;
} _BatchTxs_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class BlockIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockID> _instance;
} _BlockID_default_instance_;
class BlockHeightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockHeight> _instance;
} _BlockHeight_default_instance_;
class CommonReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonReply> _instance;
} _CommonReply_default_instance_;
class CommonInDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonIn> _instance;
} _CommonIn_default_instance_;
class TokenDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TokenDetail> _instance;
} _TokenDetail_default_instance_;
class AddressStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddressStatus> _instance;
} _AddressStatus_default_instance_;
class TxInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxInput> _instance;
} _TxInput_default_instance_;
class TxOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxOutput> _instance;
} _TxOutput_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class LedgerMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LedgerMeta> _instance;
} _LedgerMeta_default_instance_;
class UtxoMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UtxoMeta> _instance;
} _UtxoMeta_default_instance_;
class InternalBlock_FailedTxsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalBlock_FailedTxsEntry_DoNotUse> _instance;
} _InternalBlock_FailedTxsEntry_DoNotUse_default_instance_;
class InternalBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalBlock> _instance;
} _InternalBlock_default_instance_;
class BCStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BCStatus> _instance;
} _BCStatus_default_instance_;
class Speeds_SumSpeedsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Speeds_SumSpeedsEntry_DoNotUse> _instance;
} _Speeds_SumSpeedsEntry_DoNotUse_default_instance_;
class Speeds_BcSpeedsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Speeds_BcSpeedsEntry_DoNotUse> _instance;
} _Speeds_BcSpeedsEntry_DoNotUse_default_instance_;
class SpeedsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Speeds> _instance;
} _Speeds_default_instance_;
class BCSpeeds_BcSpeedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BCSpeeds_BcSpeedEntry_DoNotUse> _instance;
} _BCSpeeds_BcSpeedEntry_DoNotUse_default_instance_;
class BCSpeedsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BCSpeeds> _instance;
} _BCSpeeds_default_instance_;
class SystemsStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemsStatus> _instance;
} _SystemsStatus_default_instance_;
class InvokeRequest_ArgsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InvokeRequest_ArgsEntry_DoNotUse> _instance;
} _InvokeRequest_ArgsEntry_DoNotUse_default_instance_;
class InvokeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InvokeRequest> _instance;
} _InvokeRequest_default_instance_;
class TxInputExtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxInputExt> _instance;
} _TxInputExt_default_instance_;
class TxOutputExtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxOutputExt> _instance;
} _TxOutputExt_default_instance_;
class SignatureInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignatureInfo> _instance;
} _SignatureInfo_default_instance_;
class ResourceLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResourceLimit> _instance;
} _ResourceLimit_default_instance_;
}  // namespace pb
static void InitDefaultsHeader_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Header_default_instance_;
    new (ptr) ::pb::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader_xchain_2eproto}, {}};

static void InitDefaultsTxDataAccount_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxDataAccount_default_instance_;
    new (ptr) ::pb::TxDataAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxDataAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxDataAccount_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxDataAccount_xchain_2eproto}, {}};

static void InitDefaultsTxData_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxData_default_instance_;
    new (ptr) ::pb::TxData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TxData_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTxData_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_TxDataAccount_xchain_2eproto.base,}};

static void InitDefaultsTxStatus_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxStatus_default_instance_;
    new (ptr) ::pb::TxStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TxStatus_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTxStatus_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_Transaction_xchain_2eproto.base,}};

static void InitDefaultsBatchTxs_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BatchTxs_default_instance_;
    new (ptr) ::pb::BatchTxs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BatchTxs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BatchTxs_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBatchTxs_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_TxStatus_xchain_2eproto.base,}};

static void InitDefaultsBlock_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Block_default_instance_;
    new (ptr) ::pb::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Block_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBlock_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_InternalBlock_xchain_2eproto.base,}};

static void InitDefaultsBlockID_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockID_default_instance_;
    new (ptr) ::pb::BlockID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlockID_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlockID_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,}};

static void InitDefaultsBlockHeight_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockHeight_default_instance_;
    new (ptr) ::pb::BlockHeight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockHeight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlockHeight_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlockHeight_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,}};

static void InitDefaultsCommonReply_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CommonReply_default_instance_;
    new (ptr) ::pb::CommonReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CommonReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommonReply_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommonReply_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,}};

static void InitDefaultsCommonIn_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CommonIn_default_instance_;
    new (ptr) ::pb::CommonIn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CommonIn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommonIn_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommonIn_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,}};

static void InitDefaultsTokenDetail_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TokenDetail_default_instance_;
    new (ptr) ::pb::TokenDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TokenDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TokenDetail_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTokenDetail_xchain_2eproto}, {}};

static void InitDefaultsAddressStatus_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_AddressStatus_default_instance_;
    new (ptr) ::pb::AddressStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::AddressStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddressStatus_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddressStatus_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_TokenDetail_xchain_2eproto.base,}};

static void InitDefaultsTxInput_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxInput_default_instance_;
    new (ptr) ::pb::TxInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxInput_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxInput_xchain_2eproto}, {}};

static void InitDefaultsTxOutput_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxOutput_default_instance_;
    new (ptr) ::pb::TxOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxOutput_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxOutput_xchain_2eproto}, {}};

static void InitDefaultsTransaction_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transaction_default_instance_;
    new (ptr) ::pb::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Transaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Transaction_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsTransaction_xchain_2eproto}, {
      &scc_info_TxInput_xchain_2eproto.base,
      &scc_info_TxOutput_xchain_2eproto.base,
      &scc_info_TxInputExt_xchain_2eproto.base,
      &scc_info_TxOutputExt_xchain_2eproto.base,
      &scc_info_InvokeRequest_xchain_2eproto.base,
      &scc_info_SignatureInfo_xchain_2eproto.base,}};

static void InitDefaultsLedgerMeta_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LedgerMeta_default_instance_;
    new (ptr) ::pb::LedgerMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::LedgerMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LedgerMeta_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLedgerMeta_xchain_2eproto}, {}};

static void InitDefaultsUtxoMeta_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_UtxoMeta_default_instance_;
    new (ptr) ::pb::UtxoMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::UtxoMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UtxoMeta_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUtxoMeta_xchain_2eproto}, {}};

static void InitDefaultsInternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InternalBlock_FailedTxsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::InternalBlock_FailedTxsEntry_DoNotUse();
  }
  ::pb::InternalBlock_FailedTxsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto}, {}};

static void InitDefaultsInternalBlock_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InternalBlock_default_instance_;
    new (ptr) ::pb::InternalBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::InternalBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InternalBlock_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInternalBlock_xchain_2eproto}, {
      &scc_info_Transaction_xchain_2eproto.base,
      &scc_info_InternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto.base,}};

static void InitDefaultsBCStatus_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BCStatus_default_instance_;
    new (ptr) ::pb::BCStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BCStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_BCStatus_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsBCStatus_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_LedgerMeta_xchain_2eproto.base,
      &scc_info_InternalBlock_xchain_2eproto.base,
      &scc_info_UtxoMeta_xchain_2eproto.base,}};

static void InitDefaultsSpeeds_SumSpeedsEntry_DoNotUse_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Speeds_SumSpeedsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::Speeds_SumSpeedsEntry_DoNotUse();
  }
  ::pb::Speeds_SumSpeedsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Speeds_SumSpeedsEntry_DoNotUse_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeeds_SumSpeedsEntry_DoNotUse_xchain_2eproto}, {}};

static void InitDefaultsSpeeds_BcSpeedsEntry_DoNotUse_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Speeds_BcSpeedsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::Speeds_BcSpeedsEntry_DoNotUse();
  }
  ::pb::Speeds_BcSpeedsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Speeds_BcSpeedsEntry_DoNotUse_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeeds_BcSpeedsEntry_DoNotUse_xchain_2eproto}, {
      &scc_info_BCSpeeds_xchain_2eproto.base,}};

static void InitDefaultsSpeeds_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Speeds_default_instance_;
    new (ptr) ::pb::Speeds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Speeds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Speeds_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSpeeds_xchain_2eproto}, {
      &scc_info_Speeds_SumSpeedsEntry_DoNotUse_xchain_2eproto.base,
      &scc_info_Speeds_BcSpeedsEntry_DoNotUse_xchain_2eproto.base,}};

static void InitDefaultsBCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BCSpeeds_BcSpeedEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::BCSpeeds_BcSpeedEntry_DoNotUse();
  }
  ::pb::BCSpeeds_BcSpeedEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto}, {}};

static void InitDefaultsBCSpeeds_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BCSpeeds_default_instance_;
    new (ptr) ::pb::BCSpeeds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BCSpeeds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BCSpeeds_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBCSpeeds_xchain_2eproto}, {
      &scc_info_BCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto.base,}};

static void InitDefaultsSystemsStatus_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SystemsStatus_default_instance_;
    new (ptr) ::pb::SystemsStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SystemsStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SystemsStatus_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSystemsStatus_xchain_2eproto}, {
      &scc_info_Header_xchain_2eproto.base,
      &scc_info_BCStatus_xchain_2eproto.base,
      &scc_info_Speeds_xchain_2eproto.base,}};

static void InitDefaultsInvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InvokeRequest_ArgsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::InvokeRequest_ArgsEntry_DoNotUse();
  }
  ::pb::InvokeRequest_ArgsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto}, {}};

static void InitDefaultsInvokeRequest_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InvokeRequest_default_instance_;
    new (ptr) ::pb::InvokeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::InvokeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InvokeRequest_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInvokeRequest_xchain_2eproto}, {
      &scc_info_InvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto.base,
      &scc_info_ResourceLimit_xchain_2eproto.base,}};

static void InitDefaultsTxInputExt_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxInputExt_default_instance_;
    new (ptr) ::pb::TxInputExt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxInputExt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxInputExt_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxInputExt_xchain_2eproto}, {}};

static void InitDefaultsTxOutputExt_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TxOutputExt_default_instance_;
    new (ptr) ::pb::TxOutputExt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TxOutputExt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxOutputExt_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxOutputExt_xchain_2eproto}, {}};

static void InitDefaultsSignatureInfo_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SignatureInfo_default_instance_;
    new (ptr) ::pb::SignatureInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SignatureInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignatureInfo_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignatureInfo_xchain_2eproto}, {}};

static void InitDefaultsResourceLimit_xchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ResourceLimit_default_instance_;
    new (ptr) ::pb::ResourceLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ResourceLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResourceLimit_xchain_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResourceLimit_xchain_2eproto}, {}};

void InitDefaults_xchain_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxDataAccount_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxData_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxStatus_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchTxs_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Block_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockID_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockHeight_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonReply_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonIn_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TokenDetail_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddressStatus_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxInput_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxOutput_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transaction_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LedgerMeta_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UtxoMeta_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InternalBlock_FailedTxsEntry_DoNotUse_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InternalBlock_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BCStatus_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Speeds_SumSpeedsEntry_DoNotUse_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Speeds_BcSpeedsEntry_DoNotUse_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Speeds_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BCSpeeds_BcSpeedEntry_DoNotUse_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BCSpeeds_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemsStatus_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InvokeRequest_ArgsEntry_DoNotUse_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InvokeRequest_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxInputExt_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxOutputExt_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignatureInfo_xchain_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResourceLimit_xchain_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_xchain_2eproto[32];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_xchain_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_xchain_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_xchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Header, logid_),
  PROTOBUF_FIELD_OFFSET(::pb::Header, from_node_),
  PROTOBUF_FIELD_OFFSET(::pb::Header, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxDataAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxDataAccount, address_),
  PROTOBUF_FIELD_OFFSET(::pb::TxDataAccount, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::TxDataAccount, frozen_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxData, header_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, txid_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, from_addr_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, from_pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, from_scrkey_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, user_sign_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, account_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::TxData, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, header_),
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, txid_),
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, status_),
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, distance_),
  PROTOBUF_FIELD_OFFSET(::pb::TxStatus, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BatchTxs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BatchTxs, header_),
  PROTOBUF_FIELD_OFFSET(::pb::BatchTxs, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Block, header_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, status_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockID, header_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockID, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockID, blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockID, need_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockHeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockHeight, header_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockHeight, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockHeight, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CommonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CommonReply, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CommonIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CommonIn, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TokenDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TokenDetail, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::TokenDetail, balance_),
  PROTOBUF_FIELD_OFFSET(::pb::TokenDetail, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::AddressStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::AddressStatus, header_),
  PROTOBUF_FIELD_OFFSET(::pb::AddressStatus, address_),
  PROTOBUF_FIELD_OFFSET(::pb::AddressStatus, bcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, ref_txid_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, ref_offset_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, from_addr_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInput, frozen_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::TxOutput, to_addr_),
  PROTOBUF_FIELD_OFFSET(::pb::TxOutput, frozen_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, txid_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, tx_inputs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, tx_outputs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, coinbase_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, autogen_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, tx_inputs_ext_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, tx_outputs_ext_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, contract_requests_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, initiator_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, auth_require_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, initiator_signs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, auth_require_signs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, received_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LedgerMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LedgerMeta, root_blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::LedgerMeta, tip_blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::LedgerMeta, trunk_height_),
  PROTOBUF_FIELD_OFFSET(::pb::LedgerMeta, max_block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, latest_blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, lock_key_list_),
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, utxo_total_),
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, avgdelay_),
  PROTOBUF_FIELD_OFFSET(::pb::UtxoMeta, unconfirmtxamount_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock_FailedTxsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock_FailedTxsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock_FailedTxsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock_FailedTxsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, version_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, blockid_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, pre_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, proposer_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, sign_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, merkle_root_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, height_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, transactions_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, tx_count_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, curterm_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, curblocknum_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, failed_txs_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, in_trunk_),
  PROTOBUF_FIELD_OFFSET(::pb::InternalBlock, next_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, header_),
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, bcname_),
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, meta_),
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, block_),
  PROTOBUF_FIELD_OFFSET(::pb::BCStatus, utxometa_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_SumSpeedsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_SumSpeedsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_SumSpeedsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_SumSpeedsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_BcSpeedsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_BcSpeedsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_BcSpeedsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds_BcSpeedsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Speeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Speeds, sumspeeds_),
  PROTOBUF_FIELD_OFFSET(::pb::Speeds, bcspeeds_),
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds_BcSpeedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds_BcSpeedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds_BcSpeedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds_BcSpeedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BCSpeeds, bcspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SystemsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SystemsStatus, header_),
  PROTOBUF_FIELD_OFFSET(::pb::SystemsStatus, bcs_status_),
  PROTOBUF_FIELD_OFFSET(::pb::SystemsStatus, speeds_),
  PROTOBUF_FIELD_OFFSET(::pb::SystemsStatus, peerurls_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest_ArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest_ArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, module_name_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, contract_name_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, method_name_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, args_),
  PROTOBUF_FIELD_OFFSET(::pb::InvokeRequest, resource_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxInputExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxInputExt, bucket_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInputExt, key_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInputExt, ref_txid_),
  PROTOBUF_FIELD_OFFSET(::pb::TxInputExt, ref_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TxOutputExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TxOutputExt, bucket_),
  PROTOBUF_FIELD_OFFSET(::pb::TxOutputExt, key_),
  PROTOBUF_FIELD_OFFSET(::pb::TxOutputExt, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureInfo, publickey_),
  PROTOBUF_FIELD_OFFSET(::pb::SignatureInfo, sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ResourceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ResourceLimit, type_),
  PROTOBUF_FIELD_OFFSET(::pb::ResourceLimit, limit_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Header)},
  { 8, -1, sizeof(::pb::TxDataAccount)},
  { 16, -1, sizeof(::pb::TxData)},
  { 33, -1, sizeof(::pb::TxStatus)},
  { 44, -1, sizeof(::pb::BatchTxs)},
  { 51, -1, sizeof(::pb::Block)},
  { 61, -1, sizeof(::pb::BlockID)},
  { 70, -1, sizeof(::pb::BlockHeight)},
  { 78, -1, sizeof(::pb::CommonReply)},
  { 84, -1, sizeof(::pb::CommonIn)},
  { 90, -1, sizeof(::pb::TokenDetail)},
  { 98, -1, sizeof(::pb::AddressStatus)},
  { 106, -1, sizeof(::pb::TxInput)},
  { 116, -1, sizeof(::pb::TxOutput)},
  { 124, -1, sizeof(::pb::Transaction)},
  { 147, -1, sizeof(::pb::LedgerMeta)},
  { 156, -1, sizeof(::pb::UtxoMeta)},
  { 166, 173, sizeof(::pb::InternalBlock_FailedTxsEntry_DoNotUse)},
  { 175, -1, sizeof(::pb::InternalBlock)},
  { 198, -1, sizeof(::pb::BCStatus)},
  { 208, 215, sizeof(::pb::Speeds_SumSpeedsEntry_DoNotUse)},
  { 217, 224, sizeof(::pb::Speeds_BcSpeedsEntry_DoNotUse)},
  { 226, -1, sizeof(::pb::Speeds)},
  { 233, 240, sizeof(::pb::BCSpeeds_BcSpeedEntry_DoNotUse)},
  { 242, -1, sizeof(::pb::BCSpeeds)},
  { 248, -1, sizeof(::pb::SystemsStatus)},
  { 257, 264, sizeof(::pb::InvokeRequest_ArgsEntry_DoNotUse)},
  { 266, -1, sizeof(::pb::InvokeRequest)},
  { 276, -1, sizeof(::pb::TxInputExt)},
  { 285, -1, sizeof(::pb::TxOutputExt)},
  { 293, -1, sizeof(::pb::SignatureInfo)},
  { 300, -1, sizeof(::pb::ResourceLimit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxDataAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BatchTxs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BlockID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BlockHeight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CommonReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CommonIn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TokenDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_AddressStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_LedgerMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_UtxoMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InternalBlock_FailedTxsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InternalBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BCStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Speeds_SumSpeedsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Speeds_BcSpeedsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Speeds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BCSpeeds_BcSpeedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_BCSpeeds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SystemsStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InvokeRequest_ArgsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InvokeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxInputExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TxOutputExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SignatureInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ResourceLimit_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_xchain_2eproto = {
  {}, AddDescriptors_xchain_2eproto, "xchain.proto", schemas,
  file_default_instances, TableStruct_xchain_2eproto::offsets,
  file_level_metadata_xchain_2eproto, 32, file_level_enum_descriptors_xchain_2eproto, file_level_service_descriptors_xchain_2eproto,
};

const char descriptor_table_protodef_xchain_2eproto[] =
  "\n\014xchain.proto\022\002pb\"N\n\006Header\022\r\n\005logid\030\001 "
  "\001(\t\022\021\n\tfrom_node\030\002 \001(\t\022\"\n\005error\030\003 \001(\0162\023."
  "pb.XChainErrorEnum\"G\n\rTxDataAccount\022\017\n\007a"
  "ddress\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\022\025\n\rfrozen_h"
  "eight\030\003 \001(\003\"\367\001\n\006TxData\022\032\n\006header\030\r \001(\0132\n"
  ".pb.Header\022\014\n\004txid\030\001 \001(\014\022\016\n\006bcname\030\002 \001(\t"
  "\022\021\n\tfrom_addr\030\003 \001(\t\022\023\n\013from_pubkey\030\004 \001(\t"
  "\022\023\n\013from_scrkey\030\005 \001(\t\022\021\n\tuser_sign\030\016 \001(\014"
  "\022\"\n\007account\030\006 \003(\0132\021.pb.TxDataAccount\022\r\n\005"
  "nonce\030\010 \001(\t\022\021\n\ttimestamp\030\t \001(\003\022\014\n\004desc\030\014"
  " \001(\014\022\017\n\007version\030\017 \001(\005\"\232\001\n\010TxStatus\022\032\n\006he"
  "ader\030\001 \001(\0132\n.pb.Header\022\016\n\006bcname\030\002 \001(\t\022\014"
  "\n\004txid\030\003 \001(\014\022%\n\006status\030\004 \001(\0162\025.pb.Transa"
  "ctionStatus\022\020\n\010distance\030\005 \001(\003\022\033\n\002tx\030\007 \001("
  "\0132\017.pb.Transaction\"A\n\010BatchTxs\022\032\n\006header"
  "\030\001 \001(\0132\n.pb.Header\022\031\n\003Txs\030\002 \003(\0132\014.pb.TxS"
  "tatus\"\315\001\n\005Block\022\032\n\006header\030\001 \001(\0132\n.pb.Hea"
  "der\022\016\n\006bcname\030\002 \001(\t\022\017\n\007blockid\030\003 \001(\014\022&\n\006"
  "status\030\004 \001(\0162\026.pb.Block.EBlockStatus\022 \n\005"
  "block\030\005 \001(\0132\021.pb.InternalBlock\"=\n\014EBlock"
  "Status\022\t\n\005ERROR\020\000\022\t\n\005TRUNK\020\001\022\n\n\006BRANCH\020\002"
  "\022\013\n\007NOEXIST\020\003\"\\\n\007BlockID\022\032\n\006header\030\004 \001(\013"
  "2\n.pb.Header\022\016\n\006bcname\030\001 \001(\t\022\017\n\007blockid\030"
  "\002 \001(\014\022\024\n\014need_content\030\003 \001(\010\"I\n\013BlockHeig"
  "ht\022\032\n\006header\030\003 \001(\0132\n.pb.Header\022\016\n\006bcname"
  "\030\001 \001(\t\022\016\n\006height\030\002 \001(\003\")\n\013CommonReply\022\032\n"
  "\006header\030\001 \001(\0132\n.pb.Header\"&\n\010CommonIn\022\032\n"
  "\006header\030\001 \001(\0132\n.pb.Header\"R\n\013TokenDetail"
  "\022\016\n\006bcname\030\001 \001(\t\022\017\n\007balance\030\002 \001(\t\022\"\n\005err"
  "or\030\003 \001(\0162\023.pb.XChainErrorEnum\"Z\n\rAddress"
  "Status\022\032\n\006header\030\001 \001(\0132\n.pb.Header\022\017\n\007ad"
  "dress\030\002 \001(\t\022\034\n\003bcs\030\003 \003(\0132\017.pb.TokenDetai"
  "l\"i\n\007TxInput\022\020\n\010ref_txid\030\001 \001(\014\022\022\n\nref_of"
  "fset\030\002 \001(\005\022\021\n\tfrom_addr\030\005 \001(\014\022\016\n\006amount\030"
  "\006 \001(\014\022\025\n\rfrozen_height\030\007 \001(\003\"B\n\010TxOutput"
  "\022\016\n\006amount\030\001 \001(\014\022\017\n\007to_addr\030\002 \001(\014\022\025\n\rfro"
  "zen_height\030\004 \001(\003\"\360\003\n\013Transaction\022\014\n\004txid"
  "\030\001 \001(\014\022\017\n\007blockid\030\002 \001(\014\022\036\n\ttx_inputs\030\003 \003"
  "(\0132\013.pb.TxInput\022 \n\ntx_outputs\030\004 \003(\0132\014.pb"
  ".TxOutput\022\014\n\004desc\030\006 \001(\014\022\020\n\010coinbase\030\007 \001("
  "\010\022\r\n\005nonce\030\010 \001(\t\022\021\n\ttimestamp\030\t \001(\003\022\017\n\007v"
  "ersion\030\n \001(\005\022\017\n\007autogen\030\013 \001(\010\022%\n\rtx_inpu"
  "ts_ext\030\027 \003(\0132\016.pb.TxInputExt\022\'\n\016tx_outpu"
  "ts_ext\030\030 \003(\0132\017.pb.TxOutputExt\022,\n\021contrac"
  "t_requests\030\031 \003(\0132\021.pb.InvokeRequest\022\021\n\ti"
  "nitiator\030\032 \001(\t\022\024\n\014auth_require\030\033 \003(\t\022*\n\017"
  "initiator_signs\030\034 \003(\0132\021.pb.SignatureInfo"
  "\022-\n\022auth_require_signs\030\035 \003(\0132\021.pb.Signat"
  "ureInfo\022\032\n\022received_timestamp\030\036 \001(\003\"e\n\nL"
  "edgerMeta\022\024\n\014root_blockid\030\001 \001(\014\022\023\n\013tip_b"
  "lockid\030\002 \001(\014\022\024\n\014trunk_height\030\003 \001(\003\022\026\n\016ma"
  "x_block_size\030\004 \001(\003\"z\n\010UtxoMeta\022\026\n\016latest"
  "_blockid\030\001 \001(\014\022\025\n\rlock_key_list\030\002 \003(\t\022\022\n"
  "\nutxo_total\030\003 \001(\t\022\020\n\010avgDelay\030\004 \001(\003\022\031\n\021u"
  "nconfirmTxAmount\030\005 \001(\003\"\273\003\n\rInternalBlock"
  "\022\017\n\007version\030\001 \001(\005\022\r\n\005nonce\030\002 \001(\005\022\017\n\007bloc"
  "kid\030\003 \001(\014\022\020\n\010pre_hash\030\004 \001(\014\022\020\n\010proposer\030"
  "\005 \001(\014\022\014\n\004sign\030\006 \001(\014\022\016\n\006pubkey\030\007 \001(\014\022\023\n\013m"
  "erkle_root\030\010 \001(\014\022\016\n\006height\030\t \001(\003\022\021\n\ttime"
  "stamp\030\n \001(\003\022%\n\014transactions\030\013 \003(\0132\017.pb.T"
  "ransaction\022\020\n\010tx_count\030\014 \001(\005\022\023\n\013merkle_t"
  "ree\030\r \003(\014\022\017\n\007curTerm\030\020 \001(\003\022\023\n\013curBlockNu"
  "m\030\021 \001(\003\0224\n\nfailed_txs\030\022 \003(\0132 .pb.Interna"
  "lBlock.FailedTxsEntry\022\020\n\010in_trunk\030\016 \001(\010\022"
  "\021\n\tnext_hash\030\017 \001(\014\0320\n\016FailedTxsEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\226\001\n\010BCStatu"
  "s\022\032\n\006header\030\001 \001(\0132\n.pb.Header\022\016\n\006bcname\030"
  "\002 \001(\t\022\034\n\004meta\030\003 \001(\0132\016.pb.LedgerMeta\022 \n\005b"
  "lock\030\004 \001(\0132\021.pb.InternalBlock\022\036\n\010utxoMet"
  "a\030\005 \001(\0132\014.pb.UtxoMeta\"\323\001\n\006Speeds\022,\n\tSumS"
  "peeds\030\001 \003(\0132\031.pb.Speeds.SumSpeedsEntry\022*"
  "\n\010BcSpeeds\030\002 \003(\0132\030.pb.Speeds.BcSpeedsEnt"
  "ry\0320\n\016SumSpeedsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\001:\0028\001\032=\n\rBcSpeedsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\033\n\005value\030\002 \001(\0132\014.pb.BCSpeeds:\0028\001\"f\n\010B"
  "CSpeeds\022*\n\007BcSpeed\030\001 \003(\0132\031.pb.BCSpeeds.B"
  "cSpeedEntry\032.\n\014BcSpeedEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\001:\0028\001\"{\n\rSystemsStatus\022\032\n\006"
  "header\030\001 \001(\0132\n.pb.Header\022 \n\nbcs_status\030\002"
  " \003(\0132\014.pb.BCStatus\022\032\n\006speeds\030\003 \001(\0132\n.pb."
  "Speeds\022\020\n\010peerUrls\030\004 \003(\t\"\324\001\n\rInvokeReque"
  "st\022\023\n\013module_name\030\001 \001(\t\022\025\n\rcontract_name"
  "\030\002 \001(\t\022\023\n\013method_name\030\003 \001(\t\022)\n\004args\030\004 \003("
  "\0132\033.pb.InvokeRequest.ArgsEntry\022*\n\017resour"
  "ce_limits\030\005 \003(\0132\021.pb.ResourceLimit\032+\n\tAr"
  "gsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\""
  "O\n\nTxInputExt\022\016\n\006bucket\030\001 \001(\t\022\013\n\003key\030\002 \001"
  "(\014\022\020\n\010ref_txid\030\003 \001(\014\022\022\n\nref_offset\030\004 \001(\005"
  "\"9\n\013TxOutputExt\022\016\n\006bucket\030\001 \001(\t\022\013\n\003key\030\002"
  " \001(\014\022\r\n\005value\030\003 \001(\014\"0\n\rSignatureInfo\022\021\n\t"
  "PublicKey\030\001 \001(\t\022\014\n\004Sign\030\002 \001(\014\">\n\rResourc"
  "eLimit\022\036\n\004type\030\001 \001(\0162\020.pb.ResourceType\022\r"
  "\n\005limit\030\002 \001(\003*\357\005\n\017XChainErrorEnum\022\013\n\007SUC"
  "CESS\020\000\022\020\n\014UNKNOW_ERROR\020\001\022\022\n\016CONNECT_REFU"
  "SE\020\002\022\031\n\025NOT_ENOUGH_UTXO_ERROR\020\003\022\"\n\036UTXOV"
  "M_ALREADY_UNCONFIRM_ERROR\020\004\022\032\n\026UTXOVM_NO"
  "T_FOUND_ERROR\020\005\022 \n\034INPUT_OUTPUT_NOT_EQUA"
  "L_ERROR\020\006\022\026\n\022TX_NOT_FOUND_ERROR\020\007\022\021\n\rTX_"
  "SIGN_ERROR\020\010\022\027\n\023BLOCKCHAIN_NOTEXIST\020\t\022\022\n"
  "\016VALIDATE_ERROR\020\n\022\033\n\027CANNOT_SYNC_BLOCK_E"
  "RROR\020\013\022\027\n\023CONFIRM_BLOCK_ERROR\020\014\022\025\n\021UTXOV"
  "M_PLAY_ERROR\020\r\022\016\n\nWALK_ERROR\020\016\022\023\n\017NOT_RE"
  "ADY_ERROR\020\017\022\025\n\021BLOCK_EXIST_ERROR\020\020\022\032\n\026RO"
  "OT_BLOCK_EXIST_ERROR\020\021\022\026\n\022TX_DUPLICATE_E"
  "RROR\020\023\022\031\n\025SERVICE_REFUSED_ERROR\020\024\022\025\n\021TXD"
  "ATA_SIGN_ERROR\020\025\022\020\n\014TX_SLE_ERROR\020\031\022\033\n\027TX"
  "_FEE_NOT_ENOUGH_ERROR\020\032\022\023\n\017UTXO_SIGN_ERR"
  "OR\020\034\022\024\n\020DPOS_QUERY_ERROR\020\037\022\027\n\023RWSET_INVA"
  "LID_ERROR\020!\022\027\n\023RWACL_INVALID_ERROR\020\"\022\030\n\024"
  "GAS_NOT_ENOUGH_ERROR\020#\022\034\n\030TX_VERSION_INV"
  "ALID_ERROR\020$\022!\n\035COMPLIANCE_CHECK_NOT_APP"
  "ROVED\020%*Y\n\021TransactionStatus\022\014\n\010UNDEFINE"
  "\020\000\022\013\n\007NOEXIST\020\001\022\013\n\007CONFIRM\020\002\022\r\n\tFURCATIO"
  "N\020\003\022\r\n\tUNCONFIRM\020\004*7\n\014ResourceType\022\007\n\003CP"
  "U\020\000\022\n\n\006MEMORY\020\001\022\010\n\004DISK\020\002\022\010\n\004XFEE\020\003b\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_xchain_2eproto = {
  false, InitDefaults_xchain_2eproto, 
  descriptor_table_protodef_xchain_2eproto,
  "xchain.proto", &assign_descriptors_table_xchain_2eproto, 4603,
};

void AddDescriptors_xchain_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_xchain_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_xchain_2eproto = []() { AddDescriptors_xchain_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* Block_EBlockStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_xchain_2eproto);
  return file_level_enum_descriptors_xchain_2eproto[0];
}
bool Block_EBlockStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Block_EBlockStatus Block::ERROR;
const Block_EBlockStatus Block::TRUNK;
const Block_EBlockStatus Block::BRANCH;
const Block_EBlockStatus Block::NOEXIST;
const Block_EBlockStatus Block::EBlockStatus_MIN;
const Block_EBlockStatus Block::EBlockStatus_MAX;
const int Block::EBlockStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* XChainErrorEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_xchain_2eproto);
  return file_level_enum_descriptors_xchain_2eproto[1];
}
bool XChainErrorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 25:
    case 26:
    case 28:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_xchain_2eproto);
  return file_level_enum_descriptors_xchain_2eproto[2];
}
bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_xchain_2eproto);
  return file_level_enum_descriptors_xchain_2eproto[3];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kLogidFieldNumber;
const int Header::kFromNodeFieldNumber;
const int Header::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logid().size() > 0) {
    logid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logid_);
  }
  from_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_node().size() > 0) {
    from_node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_node_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:pb.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Header_xchain_2eproto.base);
  logid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:pb.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  logid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Header_xchain_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Header::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Header*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string logid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Header.logid");
        object = msg->mutable_logid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string from_node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Header.from_node");
        object = msg->mutable_from_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.XChainErrorEnum error = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_error(static_cast<::pb::XChainErrorEnum>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string logid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logid().data(), static_cast<int>(this->logid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Header.logid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_node().data(), static_cast<int>(this->from_node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Header.from_node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.XChainErrorEnum error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::pb::XChainErrorEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Header)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logid = 1;
  if (this->logid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logid().data(), static_cast<int>(this->logid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Header.logid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->logid(), output);
  }

  // string from_node = 2;
  if (this->from_node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_node().data(), static_cast<int>(this->from_node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Header.from_node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_node(), output);
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logid = 1;
  if (this->logid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logid().data(), static_cast<int>(this->logid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Header.logid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logid(), target);
  }

  // string from_node = 2;
  if (this->from_node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_node().data(), static_cast<int>(this->from_node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Header.from_node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_node(), target);
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logid = 1;
  if (this->logid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logid());
  }

  // string from_node = 2;
  if (this->from_node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_node());
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logid().size() > 0) {

    logid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logid_);
  }
  if (from.from_node().size() > 0) {

    from_node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_node_);
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logid_.Swap(&other->logid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_node_.Swap(&other->from_node_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxDataAccount::InitAsDefaultInstance() {
}
class TxDataAccount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxDataAccount::kAddressFieldNumber;
const int TxDataAccount::kAmountFieldNumber;
const int TxDataAccount::kFrozenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxDataAccount::TxDataAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxDataAccount)
}
TxDataAccount::TxDataAccount(const TxDataAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  frozen_height_ = from.frozen_height_;
  // @@protoc_insertion_point(copy_constructor:pb.TxDataAccount)
}

void TxDataAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxDataAccount_xchain_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_height_ = PROTOBUF_LONGLONG(0);
}

TxDataAccount::~TxDataAccount() {
  // @@protoc_insertion_point(destructor:pb.TxDataAccount)
  SharedDtor();
}

void TxDataAccount::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxDataAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxDataAccount& TxDataAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxDataAccount_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxDataAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxDataAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxDataAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxDataAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxDataAccount.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxDataAccount.amount");
        object = msg->mutable_amount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 frozen_height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_frozen_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxDataAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxDataAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxDataAccount.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), static_cast<int>(this->amount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxDataAccount.amount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frozen_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxDataAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxDataAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxDataAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxDataAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxDataAccount.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxDataAccount.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // int64 frozen_height = 3;
  if (this->frozen_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->frozen_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxDataAccount)
}

::google::protobuf::uint8* TxDataAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxDataAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxDataAccount.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxDataAccount.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // int64 frozen_height = 3;
  if (this->frozen_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->frozen_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxDataAccount)
  return target;
}

size_t TxDataAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxDataAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // int64 frozen_height = 3;
  if (this->frozen_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frozen_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxDataAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxDataAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const TxDataAccount* source =
      ::google::protobuf::DynamicCastToGenerated<TxDataAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxDataAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxDataAccount)
    MergeFrom(*source);
  }
}

void TxDataAccount::MergeFrom(const TxDataAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxDataAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.frozen_height() != 0) {
    set_frozen_height(from.frozen_height());
  }
}

void TxDataAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxDataAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxDataAccount::CopyFrom(const TxDataAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxDataAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDataAccount::IsInitialized() const {
  return true;
}

void TxDataAccount::Swap(TxDataAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxDataAccount::InternalSwap(TxDataAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amount_.Swap(&other->amount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frozen_height_, other->frozen_height_);
}

::google::protobuf::Metadata TxDataAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxData::InitAsDefaultInstance() {
  ::pb::_TxData_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class TxData::HasBitSetters {
 public:
  static const ::pb::Header& header(const TxData* msg);
};

const ::pb::Header&
TxData::HasBitSetters::header(const TxData* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxData::kHeaderFieldNumber;
const int TxData::kTxidFieldNumber;
const int TxData::kBcnameFieldNumber;
const int TxData::kFromAddrFieldNumber;
const int TxData::kFromPubkeyFieldNumber;
const int TxData::kFromScrkeyFieldNumber;
const int TxData::kUserSignFieldNumber;
const int TxData::kAccountFieldNumber;
const int TxData::kNonceFieldNumber;
const int TxData::kTimestampFieldNumber;
const int TxData::kDescFieldNumber;
const int TxData::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxData::TxData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxData)
}
TxData::TxData(const TxData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      account_(from.account_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txid().size() > 0) {
    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  from_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_addr().size() > 0) {
    from_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_addr_);
  }
  from_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_pubkey().size() > 0) {
    from_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pubkey_);
  }
  from_scrkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_scrkey().size() > 0) {
    from_scrkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_scrkey_);
  }
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  user_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_sign().size() > 0) {
    user_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_sign_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.TxData)
}

void TxData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxData_xchain_2eproto.base);
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_scrkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&header_)) + sizeof(version_));
}

TxData::~TxData() {
  // @@protoc_insertion_point(destructor:pb.TxData)
  SharedDtor();
}

void TxData::SharedDtor() {
  txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_scrkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void TxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxData& TxData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxData_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.Clear();
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_scrkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes txid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_txid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bcname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxData.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string from_addr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxData.from_addr");
        object = msg->mutable_from_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string from_pubkey = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxData.from_pubkey");
        object = msg->mutable_from_pubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string from_scrkey = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxData.from_scrkey");
        object = msg->mutable_from_scrkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.TxDataAccount account = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxDataAccount::_InternalParse;
          object = msg->add_account();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // string nonce = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxData.nonce");
        object = msg->mutable_nonce();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes desc = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_desc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Header header = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes user_sign = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_user_sign();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 version = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes txid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bcname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxData.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_addr().data(), static_cast<int>(this->from_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxData.from_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_pubkey().data(), static_cast<int>(this->from_pubkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxData.from_pubkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_scrkey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_scrkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_scrkey().data(), static_cast<int>(this->from_scrkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxData.from_scrkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxDataAccount account = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nonce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nonce().data(), static_cast<int>(this->nonce().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxData.nonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes desc = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Header header = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes user_sign = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->txid(), output);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bcname(), output);
  }

  // string from_addr = 3;
  if (this->from_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_addr().data(), static_cast<int>(this->from_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_addr(), output);
  }

  // string from_pubkey = 4;
  if (this->from_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pubkey().data(), static_cast<int>(this->from_pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_pubkey(), output);
  }

  // string from_scrkey = 5;
  if (this->from_scrkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_scrkey().data(), static_cast<int>(this->from_scrkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_scrkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_scrkey(), output);
  }

  // repeated .pb.TxDataAccount account = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->account(static_cast<int>(i)),
      output);
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->nonce(), output);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp(), output);
  }

  // bytes desc = 12;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->desc(), output);
  }

  // .pb.Header header = 13;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::header(this), output);
  }

  // bytes user_sign = 14;
  if (this->user_sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->user_sign(), output);
  }

  // int32 version = 15;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxData)
}

::google::protobuf::uint8* TxData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->txid(), target);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bcname(), target);
  }

  // string from_addr = 3;
  if (this->from_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_addr().data(), static_cast<int>(this->from_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_addr(), target);
  }

  // string from_pubkey = 4;
  if (this->from_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pubkey().data(), static_cast<int>(this->from_pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_pubkey(), target);
  }

  // string from_scrkey = 5;
  if (this->from_scrkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_scrkey().data(), static_cast<int>(this->from_scrkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.from_scrkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from_scrkey(), target);
  }

  // repeated .pb.TxDataAccount account = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->account(static_cast<int>(i)), target);
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxData.nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nonce(), target);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp(), target);
  }

  // bytes desc = 12;
  if (this->desc().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->desc(), target);
  }

  // .pb.Header header = 13;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::header(this), target);
  }

  // bytes user_sign = 14;
  if (this->user_sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->user_sign(), target);
  }

  // int32 version = 15;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxData)
  return target;
}

size_t TxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TxDataAccount account = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->account_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->account(static_cast<int>(i)));
    }
  }

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txid());
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // string from_addr = 3;
  if (this->from_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_addr());
  }

  // string from_pubkey = 4;
  if (this->from_pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_pubkey());
  }

  // string from_scrkey = 5;
  if (this->from_scrkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_scrkey());
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nonce());
  }

  // bytes desc = 12;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  // bytes user_sign = 14;
  if (this->user_sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_sign());
  }

  // .pb.Header header = 13;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 version = 15;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxData)
  GOOGLE_DCHECK_NE(&from, this);
  const TxData* source =
      ::google::protobuf::DynamicCastToGenerated<TxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxData)
    MergeFrom(*source);
  }
}

void TxData::MergeFrom(const TxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_.MergeFrom(from.account_);
  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.from_addr().size() > 0) {

    from_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_addr_);
  }
  if (from.from_pubkey().size() > 0) {

    from_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pubkey_);
  }
  if (from.from_scrkey().size() > 0) {

    from_scrkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_scrkey_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.user_sign().size() > 0) {

    user_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_sign_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void TxData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxData::CopyFrom(const TxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxData::IsInitialized() const {
  return true;
}

void TxData::Swap(TxData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxData::InternalSwap(TxData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&account_)->InternalSwap(CastToBase(&other->account_));
  txid_.Swap(&other->txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_addr_.Swap(&other->from_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_pubkey_.Swap(&other->from_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_scrkey_.Swap(&other->from_scrkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_sign_.Swap(&other->user_sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata TxData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxStatus::InitAsDefaultInstance() {
  ::pb::_TxStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
  ::pb::_TxStatus_default_instance_._instance.get_mutable()->tx_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
}
class TxStatus::HasBitSetters {
 public:
  static const ::pb::Header& header(const TxStatus* msg);
  static const ::pb::Transaction& tx(const TxStatus* msg);
};

const ::pb::Header&
TxStatus::HasBitSetters::header(const TxStatus* msg) {
  return *msg->header_;
}
const ::pb::Transaction&
TxStatus::HasBitSetters::tx(const TxStatus* msg) {
  return *msg->tx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxStatus::kHeaderFieldNumber;
const int TxStatus::kBcnameFieldNumber;
const int TxStatus::kTxidFieldNumber;
const int TxStatus::kStatusFieldNumber;
const int TxStatus::kDistanceFieldNumber;
const int TxStatus::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxStatus::TxStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxStatus)
}
TxStatus::TxStatus(const TxStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txid().size() > 0) {
    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_tx()) {
    tx_ = new ::pb::Transaction(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:pb.TxStatus)
}

void TxStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxStatus_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

TxStatus::~TxStatus() {
  // @@protoc_insertion_point(destructor:pb.TxStatus)
  SharedDtor();
}

void TxStatus::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete tx_;
}

void TxStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxStatus& TxStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxStatus_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string bcname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxStatus.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes txid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_txid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.TransactionStatus status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::TransactionStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 distance = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_distance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.Transaction tx = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Transaction::_InternalParse;
        object = msg->mutable_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bcname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxStatus.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes txid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Transaction tx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxStatus.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bcname(), output);
  }

  // bytes txid = 3;
  if (this->txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->txid(), output);
  }

  // .pb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // int64 distance = 5;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->distance(), output);
  }

  // .pb.Transaction tx = 7;
  if (this->has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::tx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxStatus)
}

::google::protobuf::uint8* TxStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxStatus.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bcname(), target);
  }

  // bytes txid = 3;
  if (this->txid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->txid(), target);
  }

  // .pb.TransactionStatus status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // int64 distance = 5;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->distance(), target);
  }

  // .pb.Transaction tx = 7;
  if (this->has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::tx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxStatus)
  return target;
}

size_t TxStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // bytes txid = 3;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txid());
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pb.Transaction tx = 7;
  if (this->has_tx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  // int64 distance = 5;
  if (this->distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->distance());
  }

  // .pb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TxStatus* source =
      ::google::protobuf::DynamicCastToGenerated<TxStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxStatus)
    MergeFrom(*source);
  }
}

void TxStatus::MergeFrom(const TxStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.has_tx()) {
    mutable_tx()->::pb::Transaction::MergeFrom(from.tx());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TxStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxStatus::CopyFrom(const TxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxStatus::IsInitialized() const {
  return true;
}

void TxStatus::Swap(TxStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxStatus::InternalSwap(TxStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txid_.Swap(&other->txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(tx_, other->tx_);
  swap(distance_, other->distance_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata TxStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchTxs::InitAsDefaultInstance() {
  ::pb::_BatchTxs_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class BatchTxs::HasBitSetters {
 public:
  static const ::pb::Header& header(const BatchTxs* msg);
};

const ::pb::Header&
BatchTxs::HasBitSetters::header(const BatchTxs* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchTxs::kHeaderFieldNumber;
const int BatchTxs::kTxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchTxs::BatchTxs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BatchTxs)
}
BatchTxs::BatchTxs(const BatchTxs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.BatchTxs)
}

void BatchTxs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchTxs_xchain_2eproto.base);
  header_ = nullptr;
}

BatchTxs::~BatchTxs() {
  // @@protoc_insertion_point(destructor:pb.BatchTxs)
  SharedDtor();
}

void BatchTxs::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BatchTxs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchTxs& BatchTxs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchTxs_xchain_2eproto.base);
  return *internal_default_instance();
}


void BatchTxs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BatchTxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchTxs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchTxs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.TxStatus Txs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxStatus::_InternalParse;
          object = msg->add_txs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchTxs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BatchTxs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxStatus Txs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_txs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BatchTxs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BatchTxs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchTxs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BatchTxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .pb.TxStatus Txs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->txs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BatchTxs)
}

::google::protobuf::uint8* BatchTxs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BatchTxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .pb.TxStatus Txs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->txs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BatchTxs)
  return target;
}

size_t BatchTxs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BatchTxs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TxStatus Txs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->txs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->txs(static_cast<int>(i)));
    }
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchTxs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BatchTxs)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchTxs* source =
      ::google::protobuf::DynamicCastToGenerated<BatchTxs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BatchTxs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BatchTxs)
    MergeFrom(*source);
  }
}

void BatchTxs::MergeFrom(const BatchTxs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BatchTxs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
}

void BatchTxs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BatchTxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTxs::CopyFrom(const BatchTxs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BatchTxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTxs::IsInitialized() const {
  return true;
}

void BatchTxs::Swap(BatchTxs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchTxs::InternalSwap(BatchTxs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&txs_)->InternalSwap(CastToBase(&other->txs_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata BatchTxs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::pb::_Block_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
  ::pb::_Block_default_instance_._instance.get_mutable()->block_ = const_cast< ::pb::InternalBlock*>(
      ::pb::InternalBlock::internal_default_instance());
}
class Block::HasBitSetters {
 public:
  static const ::pb::Header& header(const Block* msg);
  static const ::pb::InternalBlock& block(const Block* msg);
};

const ::pb::Header&
Block::HasBitSetters::header(const Block* msg) {
  return *msg->header_;
}
const ::pb::InternalBlock&
Block::HasBitSetters::block(const Block* msg) {
  return *msg->block_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHeaderFieldNumber;
const int Block::kBcnameFieldNumber;
const int Block::kBlockidFieldNumber;
const int Block::kStatusFieldNumber;
const int Block::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockid().size() > 0) {
    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_block()) {
    block_ = new ::pb::InternalBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:pb.Block)
}

void Block::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Block_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pb.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete block_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Block_xchain_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Block::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Block*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string bcname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Block.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes blockid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Block.EBlockStatus status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::Block_EBlockStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.InternalBlock block = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::InternalBlock::_InternalParse;
        object = msg->mutable_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bcname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Block.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blockid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Block.EBlockStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::Block_EBlockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.InternalBlock block = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Block)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Block.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bcname(), output);
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blockid(), output);
  }

  // .pb.Block.EBlockStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // .pb.InternalBlock block = 5;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Block.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bcname(), target);
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blockid(), target);
  }

  // .pb.Block.EBlockStatus status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // .pb.InternalBlock block = 5;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blockid());
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pb.InternalBlock block = 5;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .pb.Block.EBlockStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.blockid().size() > 0) {

    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.has_block()) {
    mutable_block()->::pb::InternalBlock::MergeFrom(from.block());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockid_.Swap(&other->blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(block_, other->block_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlockID::InitAsDefaultInstance() {
  ::pb::_BlockID_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class BlockID::HasBitSetters {
 public:
  static const ::pb::Header& header(const BlockID* msg);
};

const ::pb::Header&
BlockID::HasBitSetters::header(const BlockID* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockID::kHeaderFieldNumber;
const int BlockID::kBcnameFieldNumber;
const int BlockID::kBlockidFieldNumber;
const int BlockID::kNeedContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockID::BlockID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockid().size() > 0) {
    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  need_content_ = from.need_content_;
  // @@protoc_insertion_point(copy_constructor:pb.BlockID)
}

void BlockID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BlockID_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_content_) -
      reinterpret_cast<char*>(&header_)) + sizeof(need_content_));
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:pb.BlockID)
  SharedDtor();
}

void BlockID::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void BlockID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockID& BlockID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockID_xchain_2eproto.base);
  return *internal_default_instance();
}


void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  need_content_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bcname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.BlockID.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes blockid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool need_content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_need_content(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.Header header = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BlockID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bcname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.BlockID.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool need_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Header header = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BlockID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BlockID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BlockID.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bcname(), output);
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->blockid(), output);
  }

  // bool need_content = 3;
  if (this->need_content() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_content(), output);
  }

  // .pb.Header header = 4;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BlockID)
}

::google::protobuf::uint8* BlockID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BlockID.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bcname(), target);
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->blockid(), target);
  }

  // bool need_content = 3;
  if (this->need_content() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_content(), target);
  }

  // .pb.Header header = 4;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockID)
  return target;
}

size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blockid());
  }

  // .pb.Header header = 4;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool need_content = 3;
  if (this->need_content() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockID* source =
      ::google::protobuf::DynamicCastToGenerated<BlockID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockID)
    MergeFrom(*source);
  }
}

void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.blockid().size() > 0) {

    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.need_content() != 0) {
    set_need_content(from.need_content());
  }
}

void BlockID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::Swap(BlockID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockID::InternalSwap(BlockID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockid_.Swap(&other->blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(need_content_, other->need_content_);
}

::google::protobuf::Metadata BlockID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlockHeight::InitAsDefaultInstance() {
  ::pb::_BlockHeight_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class BlockHeight::HasBitSetters {
 public:
  static const ::pb::Header& header(const BlockHeight* msg);
};

const ::pb::Header&
BlockHeight::HasBitSetters::header(const BlockHeight* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockHeight::kHeaderFieldNumber;
const int BlockHeight::kBcnameFieldNumber;
const int BlockHeight::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockHeight::BlockHeight()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlockHeight)
}
BlockHeight::BlockHeight(const BlockHeight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:pb.BlockHeight)
}

void BlockHeight::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BlockHeight_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&header_)) + sizeof(height_));
}

BlockHeight::~BlockHeight() {
  // @@protoc_insertion_point(destructor:pb.BlockHeight)
  SharedDtor();
}

void BlockHeight::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void BlockHeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeight& BlockHeight::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockHeight_xchain_2eproto.base);
  return *internal_default_instance();
}


void BlockHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockHeight::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockHeight*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bcname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.BlockHeight.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 height = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.Header header = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockHeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BlockHeight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bcname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.BlockHeight.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Header header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BlockHeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BlockHeight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockHeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BlockHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BlockHeight.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bcname(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // .pb.Header header = 3;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BlockHeight)
}

::google::protobuf::uint8* BlockHeight::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BlockHeight.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bcname(), target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // .pb.Header header = 3;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockHeight)
  return target;
}

size_t BlockHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockHeight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // .pb.Header header = 3;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockHeight)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeight* source =
      ::google::protobuf::DynamicCastToGenerated<BlockHeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockHeight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockHeight)
    MergeFrom(*source);
  }
}

void BlockHeight::MergeFrom(const BlockHeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockHeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void BlockHeight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeight::CopyFrom(const BlockHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeight::IsInitialized() const {
  return true;
}

void BlockHeight::Swap(BlockHeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeight::InternalSwap(BlockHeight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata BlockHeight::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommonReply::InitAsDefaultInstance() {
  ::pb::_CommonReply_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class CommonReply::HasBitSetters {
 public:
  static const ::pb::Header& header(const CommonReply* msg);
};

const ::pb::Header&
CommonReply::HasBitSetters::header(const CommonReply* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonReply::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonReply::CommonReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CommonReply)
}
CommonReply::CommonReply(const CommonReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CommonReply)
}

void CommonReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommonReply_xchain_2eproto.base);
  header_ = nullptr;
}

CommonReply::~CommonReply() {
  // @@protoc_insertion_point(destructor:pb.CommonReply)
  SharedDtor();
}

void CommonReply::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CommonReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonReply& CommonReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommonReply_xchain_2eproto.base);
  return *internal_default_instance();
}


void CommonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CommonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommonReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommonReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CommonReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CommonReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CommonReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CommonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CommonReply)
}

::google::protobuf::uint8* CommonReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CommonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CommonReply)
  return target;
}

size_t CommonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CommonReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CommonReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReply* source =
      ::google::protobuf::DynamicCastToGenerated<CommonReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CommonReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CommonReply)
    MergeFrom(*source);
  }
}

void CommonReply::MergeFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CommonReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
}

void CommonReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CommonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReply::CopyFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CommonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReply::IsInitialized() const {
  return true;
}

void CommonReply::Swap(CommonReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonReply::InternalSwap(CommonReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata CommonReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommonIn::InitAsDefaultInstance() {
  ::pb::_CommonIn_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class CommonIn::HasBitSetters {
 public:
  static const ::pb::Header& header(const CommonIn* msg);
};

const ::pb::Header&
CommonIn::HasBitSetters::header(const CommonIn* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonIn::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonIn::CommonIn()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CommonIn)
}
CommonIn::CommonIn(const CommonIn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CommonIn)
}

void CommonIn::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommonIn_xchain_2eproto.base);
  header_ = nullptr;
}

CommonIn::~CommonIn() {
  // @@protoc_insertion_point(destructor:pb.CommonIn)
  SharedDtor();
}

void CommonIn::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CommonIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonIn& CommonIn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommonIn_xchain_2eproto.base);
  return *internal_default_instance();
}


void CommonIn::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CommonIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommonIn::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommonIn*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommonIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CommonIn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CommonIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CommonIn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommonIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CommonIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CommonIn)
}

::google::protobuf::uint8* CommonIn::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CommonIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CommonIn)
  return target;
}

size_t CommonIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CommonIn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CommonIn)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonIn* source =
      ::google::protobuf::DynamicCastToGenerated<CommonIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CommonIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CommonIn)
    MergeFrom(*source);
  }
}

void CommonIn::MergeFrom(const CommonIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CommonIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
}

void CommonIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CommonIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonIn::CopyFrom(const CommonIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CommonIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonIn::IsInitialized() const {
  return true;
}

void CommonIn::Swap(CommonIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonIn::InternalSwap(CommonIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata CommonIn::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TokenDetail::InitAsDefaultInstance() {
}
class TokenDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TokenDetail::kBcnameFieldNumber;
const int TokenDetail::kBalanceFieldNumber;
const int TokenDetail::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TokenDetail::TokenDetail()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TokenDetail)
}
TokenDetail::TokenDetail(const TokenDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  balance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.balance().size() > 0) {
    balance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:pb.TokenDetail)
}

void TokenDetail::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TokenDetail_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
}

TokenDetail::~TokenDetail() {
  // @@protoc_insertion_point(destructor:pb.TokenDetail)
  SharedDtor();
}

void TokenDetail::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TokenDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenDetail& TokenDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TokenDetail_xchain_2eproto.base);
  return *internal_default_instance();
}


void TokenDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TokenDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenDetail::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TokenDetail*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bcname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TokenDetail.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string balance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TokenDetail.balance");
        object = msg->mutable_balance();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.XChainErrorEnum error = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_error(static_cast<::pb::XChainErrorEnum>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TokenDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bcname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TokenDetail.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_balance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->balance().data(), static_cast<int>(this->balance().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TokenDetail.balance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.XChainErrorEnum error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::pb::XChainErrorEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TokenDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TokenDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TokenDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TokenDetail.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bcname(), output);
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->balance().data(), static_cast<int>(this->balance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TokenDetail.balance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->balance(), output);
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TokenDetail)
}

::google::protobuf::uint8* TokenDetail::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TokenDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TokenDetail.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bcname(), target);
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->balance().data(), static_cast<int>(this->balance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TokenDetail.balance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->balance(), target);
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TokenDetail)
  return target;
}

size_t TokenDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TokenDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 1;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->balance());
  }

  // .pb.XChainErrorEnum error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TokenDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenDetail* source =
      ::google::protobuf::DynamicCastToGenerated<TokenDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TokenDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TokenDetail)
    MergeFrom(*source);
  }
}

void TokenDetail::MergeFrom(const TokenDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TokenDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.balance().size() > 0) {

    balance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void TokenDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TokenDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenDetail::CopyFrom(const TokenDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TokenDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenDetail::IsInitialized() const {
  return true;
}

void TokenDetail::Swap(TokenDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TokenDetail::InternalSwap(TokenDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  balance_.Swap(&other->balance_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::google::protobuf::Metadata TokenDetail::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddressStatus::InitAsDefaultInstance() {
  ::pb::_AddressStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
}
class AddressStatus::HasBitSetters {
 public:
  static const ::pb::Header& header(const AddressStatus* msg);
};

const ::pb::Header&
AddressStatus::HasBitSetters::header(const AddressStatus* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddressStatus::kHeaderFieldNumber;
const int AddressStatus::kAddressFieldNumber;
const int AddressStatus::kBcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddressStatus::AddressStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AddressStatus)
}
AddressStatus::AddressStatus(const AddressStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bcs_(from.bcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.AddressStatus)
}

void AddressStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddressStatus_xchain_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

AddressStatus::~AddressStatus() {
  // @@protoc_insertion_point(destructor:pb.AddressStatus)
  SharedDtor();
}

void AddressStatus::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void AddressStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressStatus& AddressStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddressStatus_xchain_2eproto.base);
  return *internal_default_instance();
}


void AddressStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AddressStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcs_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddressStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddressStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.AddressStatus.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.TokenDetail bcs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TokenDetail::_InternalParse;
          object = msg->add_bcs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddressStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AddressStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.AddressStatus.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TokenDetail bcs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AddressStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AddressStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddressStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AddressStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.AddressStatus.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // repeated .pb.TokenDetail bcs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bcs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->bcs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AddressStatus)
}

::google::protobuf::uint8* AddressStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AddressStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.AddressStatus.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // repeated .pb.TokenDetail bcs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bcs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->bcs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AddressStatus)
  return target;
}

size_t AddressStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AddressStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TokenDetail bcs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bcs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bcs(static_cast<int>(i)));
    }
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AddressStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressStatus* source =
      ::google::protobuf::DynamicCastToGenerated<AddressStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AddressStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AddressStatus)
    MergeFrom(*source);
  }
}

void AddressStatus::MergeFrom(const AddressStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AddressStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bcs_.MergeFrom(from.bcs_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
}

void AddressStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AddressStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressStatus::CopyFrom(const AddressStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AddressStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressStatus::IsInitialized() const {
  return true;
}

void AddressStatus::Swap(AddressStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddressStatus::InternalSwap(AddressStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bcs_)->InternalSwap(CastToBase(&other->bcs_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::google::protobuf::Metadata AddressStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxInput::InitAsDefaultInstance() {
}
class TxInput::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxInput::kRefTxidFieldNumber;
const int TxInput::kRefOffsetFieldNumber;
const int TxInput::kFromAddrFieldNumber;
const int TxInput::kAmountFieldNumber;
const int TxInput::kFrozenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxInput::TxInput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxInput)
}
TxInput::TxInput(const TxInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ref_txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ref_txid().size() > 0) {
    ref_txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_txid_);
  }
  from_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_addr().size() > 0) {
    from_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_addr_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  ::memcpy(&ref_offset_, &from.ref_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_height_) -
    reinterpret_cast<char*>(&ref_offset_)) + sizeof(frozen_height_));
  // @@protoc_insertion_point(copy_constructor:pb.TxInput)
}

void TxInput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxInput_xchain_2eproto.base);
  ref_txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_height_) -
      reinterpret_cast<char*>(&ref_offset_)) + sizeof(frozen_height_));
}

TxInput::~TxInput() {
  // @@protoc_insertion_point(destructor:pb.TxInput)
  SharedDtor();
}

void TxInput::SharedDtor() {
  ref_txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxInput& TxInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxInput_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_height_) -
      reinterpret_cast<char*>(&ref_offset_)) + sizeof(frozen_height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxInput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxInput*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes ref_txid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ref_txid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 ref_offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ref_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes from_addr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_from_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes amount = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_amount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 frozen_height = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_frozen_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ref_txid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes from_addr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes amount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frozen_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_txid = 1;
  if (this->ref_txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ref_txid(), output);
  }

  // int32 ref_offset = 2;
  if (this->ref_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref_offset(), output);
  }

  // bytes from_addr = 5;
  if (this->from_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->from_addr(), output);
  }

  // bytes amount = 6;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->amount(), output);
  }

  // int64 frozen_height = 7;
  if (this->frozen_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->frozen_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxInput)
}

::google::protobuf::uint8* TxInput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_txid = 1;
  if (this->ref_txid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ref_txid(), target);
  }

  // int32 ref_offset = 2;
  if (this->ref_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref_offset(), target);
  }

  // bytes from_addr = 5;
  if (this->from_addr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->from_addr(), target);
  }

  // bytes amount = 6;
  if (this->amount().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->amount(), target);
  }

  // int64 frozen_height = 7;
  if (this->frozen_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->frozen_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxInput)
  return target;
}

size_t TxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ref_txid = 1;
  if (this->ref_txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ref_txid());
  }

  // bytes from_addr = 5;
  if (this->from_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->from_addr());
  }

  // bytes amount = 6;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->amount());
  }

  // int32 ref_offset = 2;
  if (this->ref_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_offset());
  }

  // int64 frozen_height = 7;
  if (this->frozen_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frozen_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TxInput* source =
      ::google::protobuf::DynamicCastToGenerated<TxInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxInput)
    MergeFrom(*source);
  }
}

void TxInput::MergeFrom(const TxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ref_txid().size() > 0) {

    ref_txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_txid_);
  }
  if (from.from_addr().size() > 0) {

    from_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_addr_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.ref_offset() != 0) {
    set_ref_offset(from.ref_offset());
  }
  if (from.frozen_height() != 0) {
    set_frozen_height(from.frozen_height());
  }
}

void TxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxInput::CopyFrom(const TxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInput::IsInitialized() const {
  return true;
}

void TxInput::Swap(TxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxInput::InternalSwap(TxInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ref_txid_.Swap(&other->ref_txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_addr_.Swap(&other->from_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amount_.Swap(&other->amount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_offset_, other->ref_offset_);
  swap(frozen_height_, other->frozen_height_);
}

::google::protobuf::Metadata TxInput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxOutput::InitAsDefaultInstance() {
}
class TxOutput::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxOutput::kAmountFieldNumber;
const int TxOutput::kToAddrFieldNumber;
const int TxOutput::kFrozenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxOutput::TxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxOutput)
}
TxOutput::TxOutput(const TxOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  to_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_addr().size() > 0) {
    to_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_addr_);
  }
  frozen_height_ = from.frozen_height_;
  // @@protoc_insertion_point(copy_constructor:pb.TxOutput)
}

void TxOutput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxOutput_xchain_2eproto.base);
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_height_ = PROTOBUF_LONGLONG(0);
}

TxOutput::~TxOutput() {
  // @@protoc_insertion_point(destructor:pb.TxOutput)
  SharedDtor();
}

void TxOutput::SharedDtor() {
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxOutput& TxOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxOutput_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxOutput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxOutput*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_amount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes to_addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_to_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 frozen_height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_frozen_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes to_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frozen_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->amount(), output);
  }

  // bytes to_addr = 2;
  if (this->to_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->to_addr(), output);
  }

  // int64 frozen_height = 4;
  if (this->frozen_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->frozen_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxOutput)
}

::google::protobuf::uint8* TxOutput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->amount(), target);
  }

  // bytes to_addr = 2;
  if (this->to_addr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to_addr(), target);
  }

  // int64 frozen_height = 4;
  if (this->frozen_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->frozen_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxOutput)
  return target;
}

size_t TxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->amount());
  }

  // bytes to_addr = 2;
  if (this->to_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->to_addr());
  }

  // int64 frozen_height = 4;
  if (this->frozen_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frozen_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TxOutput* source =
      ::google::protobuf::DynamicCastToGenerated<TxOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxOutput)
    MergeFrom(*source);
  }
}

void TxOutput::MergeFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.to_addr().size() > 0) {

    to_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_addr_);
  }
  if (from.frozen_height() != 0) {
    set_frozen_height(from.frozen_height());
  }
}

void TxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxOutput::CopyFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutput::IsInitialized() const {
  return true;
}

void TxOutput::Swap(TxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxOutput::InternalSwap(TxOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_addr_.Swap(&other->to_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frozen_height_, other->frozen_height_);
}

::google::protobuf::Metadata TxOutput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kTxidFieldNumber;
const int Transaction::kBlockidFieldNumber;
const int Transaction::kTxInputsFieldNumber;
const int Transaction::kTxOutputsFieldNumber;
const int Transaction::kDescFieldNumber;
const int Transaction::kCoinbaseFieldNumber;
const int Transaction::kNonceFieldNumber;
const int Transaction::kTimestampFieldNumber;
const int Transaction::kVersionFieldNumber;
const int Transaction::kAutogenFieldNumber;
const int Transaction::kTxInputsExtFieldNumber;
const int Transaction::kTxOutputsExtFieldNumber;
const int Transaction::kContractRequestsFieldNumber;
const int Transaction::kInitiatorFieldNumber;
const int Transaction::kAuthRequireFieldNumber;
const int Transaction::kInitiatorSignsFieldNumber;
const int Transaction::kAuthRequireSignsFieldNumber;
const int Transaction::kReceivedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tx_inputs_(from.tx_inputs_),
      tx_outputs_(from.tx_outputs_),
      tx_inputs_ext_(from.tx_inputs_ext_),
      tx_outputs_ext_(from.tx_outputs_ext_),
      contract_requests_(from.contract_requests_),
      auth_require_(from.auth_require_),
      initiator_signs_(from.initiator_signs_),
      auth_require_signs_(from.auth_require_signs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txid().size() > 0) {
    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockid().size() > 0) {
    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  initiator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.initiator().size() > 0) {
    initiator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initiator_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_timestamp_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(received_timestamp_));
  // @@protoc_insertion_point(copy_constructor:pb.Transaction)
}

void Transaction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transaction_xchain_2eproto.base);
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initiator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_timestamp_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(received_timestamp_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:pb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initiator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transaction_xchain_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_inputs_.Clear();
  tx_outputs_.Clear();
  tx_inputs_ext_.Clear();
  tx_outputs_ext_.Clear();
  contract_requests_.Clear();
  auth_require_.Clear();
  initiator_signs_.Clear();
  auth_require_signs_.Clear();
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initiator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_timestamp_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(received_timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transaction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes txid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_txid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes blockid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.TxInput tx_inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxInput::_InternalParse;
          object = msg->add_tx_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .pb.TxOutput tx_outputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxOutput::_InternalParse;
          object = msg->add_tx_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // bytes desc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_desc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool coinbase = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_coinbase(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string nonce = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Transaction.nonce");
        object = msg->mutable_nonce();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 version = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool autogen = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_autogen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.TxInputExt tx_inputs_ext = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxInputExt::_InternalParse;
          object = msg->add_tx_inputs_ext();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 442 && (ptr += 2));
        break;
      }
      // repeated .pb.TxOutputExt tx_outputs_ext = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::TxOutputExt::_InternalParse;
          object = msg->add_tx_outputs_ext();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 450 && (ptr += 2));
        break;
      }
      // repeated .pb.InvokeRequest contract_requests = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::InvokeRequest::_InternalParse;
          object = msg->add_contract_requests();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 458 && (ptr += 2));
        break;
      }
      // string initiator = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Transaction.initiator");
        object = msg->mutable_initiator();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string auth_require = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.Transaction.auth_require");
          object = msg->add_auth_require();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 474 && (ptr += 2));
        break;
      }
      // repeated .pb.SignatureInfo initiator_signs = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::SignatureInfo::_InternalParse;
          object = msg->add_initiator_signs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 482 && (ptr += 2));
        break;
      }
      // repeated .pb.SignatureInfo auth_require_signs = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::SignatureInfo::_InternalParse;
          object = msg->add_auth_require_signs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 490 && (ptr += 2));
        break;
      }
      // int64 received_timestamp = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_received_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Transaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes txid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxInput tx_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxOutput tx_outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes desc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool coinbase = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coinbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nonce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nonce().data(), static_cast<int>(this->nonce().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Transaction.nonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool autogen = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autogen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxInputExt tx_inputs_ext = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_inputs_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TxOutputExt tx_outputs_ext = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_outputs_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.InvokeRequest contract_requests = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contract_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string initiator = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initiator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->initiator().data(), static_cast<int>(this->initiator().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Transaction.initiator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string auth_require = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_auth_require()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_require(this->auth_require_size() - 1).data(),
            static_cast<int>(this->auth_require(this->auth_require_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Transaction.auth_require"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SignatureInfo initiator_signs = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_initiator_signs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SignatureInfo auth_require_signs = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auth_require_signs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 received_timestamp = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->txid(), output);
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->blockid(), output);
  }

  // repeated .pb.TxInput tx_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tx_inputs(static_cast<int>(i)),
      output);
  }

  // repeated .pb.TxOutput tx_outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tx_outputs(static_cast<int>(i)),
      output);
  }

  // bytes desc = 6;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->desc(), output);
  }

  // bool coinbase = 7;
  if (this->coinbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->coinbase(), output);
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->nonce(), output);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp(), output);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // bool autogen = 11;
  if (this->autogen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->autogen(), output);
  }

  // repeated .pb.TxInputExt tx_inputs_ext = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_inputs_ext_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->tx_inputs_ext(static_cast<int>(i)),
      output);
  }

  // repeated .pb.TxOutputExt tx_outputs_ext = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_outputs_ext_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->tx_outputs_ext(static_cast<int>(i)),
      output);
  }

  // repeated .pb.InvokeRequest contract_requests = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contract_requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->contract_requests(static_cast<int>(i)),
      output);
  }

  // string initiator = 26;
  if (this->initiator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initiator().data(), static_cast<int>(this->initiator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.initiator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->initiator(), output);
  }

  // repeated string auth_require = 27;
  for (int i = 0, n = this->auth_require_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_require(i).data(), static_cast<int>(this->auth_require(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.auth_require");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->auth_require(i), output);
  }

  // repeated .pb.SignatureInfo initiator_signs = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->initiator_signs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28,
      this->initiator_signs(static_cast<int>(i)),
      output);
  }

  // repeated .pb.SignatureInfo auth_require_signs = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_require_signs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29,
      this->auth_require_signs(static_cast<int>(i)),
      output);
  }

  // int64 received_timestamp = 30;
  if (this->received_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->received_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->txid(), target);
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->blockid(), target);
  }

  // repeated .pb.TxInput tx_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tx_inputs(static_cast<int>(i)), target);
  }

  // repeated .pb.TxOutput tx_outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tx_outputs(static_cast<int>(i)), target);
  }

  // bytes desc = 6;
  if (this->desc().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->desc(), target);
  }

  // bool coinbase = 7;
  if (this->coinbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->coinbase(), target);
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nonce(), target);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp(), target);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // bool autogen = 11;
  if (this->autogen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->autogen(), target);
  }

  // repeated .pb.TxInputExt tx_inputs_ext = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_inputs_ext_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->tx_inputs_ext(static_cast<int>(i)), target);
  }

  // repeated .pb.TxOutputExt tx_outputs_ext = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_outputs_ext_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->tx_outputs_ext(static_cast<int>(i)), target);
  }

  // repeated .pb.InvokeRequest contract_requests = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contract_requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->contract_requests(static_cast<int>(i)), target);
  }

  // string initiator = 26;
  if (this->initiator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initiator().data(), static_cast<int>(this->initiator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.initiator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->initiator(), target);
  }

  // repeated string auth_require = 27;
  for (int i = 0, n = this->auth_require_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_require(i).data(), static_cast<int>(this->auth_require(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.auth_require");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(27, this->auth_require(i), target);
  }

  // repeated .pb.SignatureInfo initiator_signs = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->initiator_signs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->initiator_signs(static_cast<int>(i)), target);
  }

  // repeated .pb.SignatureInfo auth_require_signs = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auth_require_signs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->auth_require_signs(static_cast<int>(i)), target);
  }

  // int64 received_timestamp = 30;
  if (this->received_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->received_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TxInput tx_inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_inputs(static_cast<int>(i)));
    }
  }

  // repeated .pb.TxOutput tx_outputs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_outputs(static_cast<int>(i)));
    }
  }

  // repeated .pb.TxInputExt tx_inputs_ext = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_inputs_ext_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_inputs_ext(static_cast<int>(i)));
    }
  }

  // repeated .pb.TxOutputExt tx_outputs_ext = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_outputs_ext_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_outputs_ext(static_cast<int>(i)));
    }
  }

  // repeated .pb.InvokeRequest contract_requests = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->contract_requests_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contract_requests(static_cast<int>(i)));
    }
  }

  // repeated string auth_require = 27;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->auth_require_size());
  for (int i = 0, n = this->auth_require_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->auth_require(i));
  }

  // repeated .pb.SignatureInfo initiator_signs = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->initiator_signs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->initiator_signs(static_cast<int>(i)));
    }
  }

  // repeated .pb.SignatureInfo auth_require_signs = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->auth_require_signs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auth_require_signs(static_cast<int>(i)));
    }
  }

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txid());
  }

  // bytes blockid = 2;
  if (this->blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blockid());
  }

  // bytes desc = 6;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  // string nonce = 8;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nonce());
  }

  // string initiator = 26;
  if (this->initiator().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->initiator());
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // bool coinbase = 7;
  if (this->coinbase() != 0) {
    total_size += 1 + 1;
  }

  // bool autogen = 11;
  if (this->autogen() != 0) {
    total_size += 1 + 1;
  }

  // int32 version = 10;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int64 received_timestamp = 30;
  if (this->received_timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->received_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_inputs_.MergeFrom(from.tx_inputs_);
  tx_outputs_.MergeFrom(from.tx_outputs_);
  tx_inputs_ext_.MergeFrom(from.tx_inputs_ext_);
  tx_outputs_ext_.MergeFrom(from.tx_outputs_ext_);
  contract_requests_.MergeFrom(from.contract_requests_);
  auth_require_.MergeFrom(from.auth_require_);
  initiator_signs_.MergeFrom(from.initiator_signs_);
  auth_require_signs_.MergeFrom(from.auth_require_signs_);
  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.blockid().size() > 0) {

    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.initiator().size() > 0) {

    initiator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initiator_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.coinbase() != 0) {
    set_coinbase(from.coinbase());
  }
  if (from.autogen() != 0) {
    set_autogen(from.autogen());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.received_timestamp() != 0) {
    set_received_timestamp(from.received_timestamp());
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tx_inputs_)->InternalSwap(CastToBase(&other->tx_inputs_));
  CastToBase(&tx_outputs_)->InternalSwap(CastToBase(&other->tx_outputs_));
  CastToBase(&tx_inputs_ext_)->InternalSwap(CastToBase(&other->tx_inputs_ext_));
  CastToBase(&tx_outputs_ext_)->InternalSwap(CastToBase(&other->tx_outputs_ext_));
  CastToBase(&contract_requests_)->InternalSwap(CastToBase(&other->contract_requests_));
  auth_require_.InternalSwap(CastToBase(&other->auth_require_));
  CastToBase(&initiator_signs_)->InternalSwap(CastToBase(&other->initiator_signs_));
  CastToBase(&auth_require_signs_)->InternalSwap(CastToBase(&other->auth_require_signs_));
  txid_.Swap(&other->txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockid_.Swap(&other->blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initiator_.Swap(&other->initiator_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(coinbase_, other->coinbase_);
  swap(autogen_, other->autogen_);
  swap(version_, other->version_);
  swap(received_timestamp_, other->received_timestamp_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LedgerMeta::InitAsDefaultInstance() {
}
class LedgerMeta::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerMeta::kRootBlockidFieldNumber;
const int LedgerMeta::kTipBlockidFieldNumber;
const int LedgerMeta::kTrunkHeightFieldNumber;
const int LedgerMeta::kMaxBlockSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerMeta::LedgerMeta()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LedgerMeta)
}
LedgerMeta::LedgerMeta(const LedgerMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.root_blockid().size() > 0) {
    root_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_blockid_);
  }
  tip_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tip_blockid().size() > 0) {
    tip_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tip_blockid_);
  }
  ::memcpy(&trunk_height_, &from.trunk_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_block_size_) -
    reinterpret_cast<char*>(&trunk_height_)) + sizeof(max_block_size_));
  // @@protoc_insertion_point(copy_constructor:pb.LedgerMeta)
}

void LedgerMeta::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LedgerMeta_xchain_2eproto.base);
  root_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tip_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trunk_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_size_) -
      reinterpret_cast<char*>(&trunk_height_)) + sizeof(max_block_size_));
}

LedgerMeta::~LedgerMeta() {
  // @@protoc_insertion_point(destructor:pb.LedgerMeta)
  SharedDtor();
}

void LedgerMeta::SharedDtor() {
  root_blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tip_blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LedgerMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerMeta& LedgerMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LedgerMeta_xchain_2eproto.base);
  return *internal_default_instance();
}


void LedgerMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LedgerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tip_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trunk_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_size_) -
      reinterpret_cast<char*>(&trunk_height_)) + sizeof(max_block_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerMeta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LedgerMeta*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes root_blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_root_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes tip_blockid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tip_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 trunk_height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_trunk_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_block_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_block_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LedgerMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes root_blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tip_blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tip_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 trunk_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trunk_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_block_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LedgerMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LedgerMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LedgerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_blockid = 1;
  if (this->root_blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->root_blockid(), output);
  }

  // bytes tip_blockid = 2;
  if (this->tip_blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tip_blockid(), output);
  }

  // int64 trunk_height = 3;
  if (this->trunk_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->trunk_height(), output);
  }

  // int64 max_block_size = 4;
  if (this->max_block_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_block_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LedgerMeta)
}

::google::protobuf::uint8* LedgerMeta::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LedgerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_blockid = 1;
  if (this->root_blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->root_blockid(), target);
  }

  // bytes tip_blockid = 2;
  if (this->tip_blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tip_blockid(), target);
  }

  // int64 trunk_height = 3;
  if (this->trunk_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->trunk_height(), target);
  }

  // int64 max_block_size = 4;
  if (this->max_block_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_block_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LedgerMeta)
  return target;
}

size_t LedgerMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LedgerMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes root_blockid = 1;
  if (this->root_blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->root_blockid());
  }

  // bytes tip_blockid = 2;
  if (this->tip_blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tip_blockid());
  }

  // int64 trunk_height = 3;
  if (this->trunk_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trunk_height());
  }

  // int64 max_block_size = 4;
  if (this->max_block_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_block_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LedgerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerMeta* source =
      ::google::protobuf::DynamicCastToGenerated<LedgerMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LedgerMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LedgerMeta)
    MergeFrom(*source);
  }
}

void LedgerMeta::MergeFrom(const LedgerMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LedgerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root_blockid().size() > 0) {

    root_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_blockid_);
  }
  if (from.tip_blockid().size() > 0) {

    tip_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tip_blockid_);
  }
  if (from.trunk_height() != 0) {
    set_trunk_height(from.trunk_height());
  }
  if (from.max_block_size() != 0) {
    set_max_block_size(from.max_block_size());
  }
}

void LedgerMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LedgerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerMeta::CopyFrom(const LedgerMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LedgerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerMeta::IsInitialized() const {
  return true;
}

void LedgerMeta::Swap(LedgerMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerMeta::InternalSwap(LedgerMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  root_blockid_.Swap(&other->root_blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tip_blockid_.Swap(&other->tip_blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trunk_height_, other->trunk_height_);
  swap(max_block_size_, other->max_block_size_);
}

::google::protobuf::Metadata LedgerMeta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UtxoMeta::InitAsDefaultInstance() {
}
class UtxoMeta::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtxoMeta::kLatestBlockidFieldNumber;
const int UtxoMeta::kLockKeyListFieldNumber;
const int UtxoMeta::kUtxoTotalFieldNumber;
const int UtxoMeta::kAvgDelayFieldNumber;
const int UtxoMeta::kUnconfirmTxAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtxoMeta::UtxoMeta()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UtxoMeta)
}
UtxoMeta::UtxoMeta(const UtxoMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lock_key_list_(from.lock_key_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latest_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_blockid().size() > 0) {
    latest_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_blockid_);
  }
  utxo_total_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.utxo_total().size() > 0) {
    utxo_total_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utxo_total_);
  }
  ::memcpy(&avgdelay_, &from.avgdelay_,
    static_cast<size_t>(reinterpret_cast<char*>(&unconfirmtxamount_) -
    reinterpret_cast<char*>(&avgdelay_)) + sizeof(unconfirmtxamount_));
  // @@protoc_insertion_point(copy_constructor:pb.UtxoMeta)
}

void UtxoMeta::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UtxoMeta_xchain_2eproto.base);
  latest_blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utxo_total_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avgdelay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmtxamount_) -
      reinterpret_cast<char*>(&avgdelay_)) + sizeof(unconfirmtxamount_));
}

UtxoMeta::~UtxoMeta() {
  // @@protoc_insertion_point(destructor:pb.UtxoMeta)
  SharedDtor();
}

void UtxoMeta::SharedDtor() {
  latest_blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utxo_total_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UtxoMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtxoMeta& UtxoMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UtxoMeta_xchain_2eproto.base);
  return *internal_default_instance();
}


void UtxoMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UtxoMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lock_key_list_.Clear();
  latest_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utxo_total_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avgdelay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmtxamount_) -
      reinterpret_cast<char*>(&avgdelay_)) + sizeof(unconfirmtxamount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UtxoMeta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UtxoMeta*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes latest_blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_latest_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string lock_key_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.UtxoMeta.lock_key_list");
          object = msg->add_lock_key_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string utxo_total = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.UtxoMeta.utxo_total");
        object = msg->mutable_utxo_total();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 avgDelay = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_avgdelay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 unconfirmTxAmount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_unconfirmtxamount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UtxoMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UtxoMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes latest_blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string lock_key_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lock_key_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_key_list(this->lock_key_list_size() - 1).data(),
            static_cast<int>(this->lock_key_list(this->lock_key_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UtxoMeta.lock_key_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string utxo_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utxo_total()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->utxo_total().data(), static_cast<int>(this->utxo_total().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UtxoMeta.utxo_total"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 avgDelay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &avgdelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unconfirmTxAmount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unconfirmtxamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UtxoMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UtxoMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UtxoMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UtxoMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes latest_blockid = 1;
  if (this->latest_blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->latest_blockid(), output);
  }

  // repeated string lock_key_list = 2;
  for (int i = 0, n = this->lock_key_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_key_list(i).data(), static_cast<int>(this->lock_key_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UtxoMeta.lock_key_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lock_key_list(i), output);
  }

  // string utxo_total = 3;
  if (this->utxo_total().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utxo_total().data(), static_cast<int>(this->utxo_total().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UtxoMeta.utxo_total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->utxo_total(), output);
  }

  // int64 avgDelay = 4;
  if (this->avgdelay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->avgdelay(), output);
  }

  // int64 unconfirmTxAmount = 5;
  if (this->unconfirmtxamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->unconfirmtxamount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.UtxoMeta)
}

::google::protobuf::uint8* UtxoMeta::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UtxoMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes latest_blockid = 1;
  if (this->latest_blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->latest_blockid(), target);
  }

  // repeated string lock_key_list = 2;
  for (int i = 0, n = this->lock_key_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_key_list(i).data(), static_cast<int>(this->lock_key_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UtxoMeta.lock_key_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->lock_key_list(i), target);
  }

  // string utxo_total = 3;
  if (this->utxo_total().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utxo_total().data(), static_cast<int>(this->utxo_total().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UtxoMeta.utxo_total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->utxo_total(), target);
  }

  // int64 avgDelay = 4;
  if (this->avgdelay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->avgdelay(), target);
  }

  // int64 unconfirmTxAmount = 5;
  if (this->unconfirmtxamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->unconfirmtxamount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UtxoMeta)
  return target;
}

size_t UtxoMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UtxoMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lock_key_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lock_key_list_size());
  for (int i = 0, n = this->lock_key_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lock_key_list(i));
  }

  // bytes latest_blockid = 1;
  if (this->latest_blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_blockid());
  }

  // string utxo_total = 3;
  if (this->utxo_total().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->utxo_total());
  }

  // int64 avgDelay = 4;
  if (this->avgdelay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->avgdelay());
  }

  // int64 unconfirmTxAmount = 5;
  if (this->unconfirmtxamount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->unconfirmtxamount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtxoMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UtxoMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const UtxoMeta* source =
      ::google::protobuf::DynamicCastToGenerated<UtxoMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UtxoMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UtxoMeta)
    MergeFrom(*source);
  }
}

void UtxoMeta::MergeFrom(const UtxoMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UtxoMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lock_key_list_.MergeFrom(from.lock_key_list_);
  if (from.latest_blockid().size() > 0) {

    latest_blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_blockid_);
  }
  if (from.utxo_total().size() > 0) {

    utxo_total_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utxo_total_);
  }
  if (from.avgdelay() != 0) {
    set_avgdelay(from.avgdelay());
  }
  if (from.unconfirmtxamount() != 0) {
    set_unconfirmtxamount(from.unconfirmtxamount());
  }
}

void UtxoMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UtxoMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtxoMeta::CopyFrom(const UtxoMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UtxoMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxoMeta::IsInitialized() const {
  return true;
}

void UtxoMeta::Swap(UtxoMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtxoMeta::InternalSwap(UtxoMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lock_key_list_.InternalSwap(CastToBase(&other->lock_key_list_));
  latest_blockid_.Swap(&other->latest_blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  utxo_total_.Swap(&other->utxo_total_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avgdelay_, other->avgdelay_);
  swap(unconfirmtxamount_, other->unconfirmtxamount_);
}

::google::protobuf::Metadata UtxoMeta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

InternalBlock_FailedTxsEntry_DoNotUse::InternalBlock_FailedTxsEntry_DoNotUse() {}
InternalBlock_FailedTxsEntry_DoNotUse::InternalBlock_FailedTxsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InternalBlock_FailedTxsEntry_DoNotUse::MergeFrom(const InternalBlock_FailedTxsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata InternalBlock_FailedTxsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[17];
}
void InternalBlock_FailedTxsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalBlock_FailedTxsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      InternalBlock_FailedTxsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.InternalBlock.FailedTxsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.InternalBlock.FailedTxsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void InternalBlock::InitAsDefaultInstance() {
}
class InternalBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalBlock::kVersionFieldNumber;
const int InternalBlock::kNonceFieldNumber;
const int InternalBlock::kBlockidFieldNumber;
const int InternalBlock::kPreHashFieldNumber;
const int InternalBlock::kProposerFieldNumber;
const int InternalBlock::kSignFieldNumber;
const int InternalBlock::kPubkeyFieldNumber;
const int InternalBlock::kMerkleRootFieldNumber;
const int InternalBlock::kHeightFieldNumber;
const int InternalBlock::kTimestampFieldNumber;
const int InternalBlock::kTransactionsFieldNumber;
const int InternalBlock::kTxCountFieldNumber;
const int InternalBlock::kMerkleTreeFieldNumber;
const int InternalBlock::kCurTermFieldNumber;
const int InternalBlock::kCurBlockNumFieldNumber;
const int InternalBlock::kFailedTxsFieldNumber;
const int InternalBlock::kInTrunkFieldNumber;
const int InternalBlock::kNextHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalBlock::InternalBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InternalBlock)
}
InternalBlock::InternalBlock(const InternalBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_),
      merkle_tree_(from.merkle_tree_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  failed_txs_.MergeFrom(from.failed_txs_);
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockid().size() > 0) {
    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  pre_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pre_hash().size() > 0) {
    pre_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_hash_);
  }
  proposer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposer().size() > 0) {
    proposer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merkle_root().size() > 0) {
    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  next_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_hash().size() > 0) {
    next_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_hash_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&curblocknum_) -
    reinterpret_cast<char*>(&version_)) + sizeof(curblocknum_));
  // @@protoc_insertion_point(copy_constructor:pb.InternalBlock)
}

void InternalBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InternalBlock_xchain_2eproto.base);
  blockid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curblocknum_) -
      reinterpret_cast<char*>(&version_)) + sizeof(curblocknum_));
}

InternalBlock::~InternalBlock() {
  // @@protoc_insertion_point(destructor:pb.InternalBlock)
  SharedDtor();
}

void InternalBlock::SharedDtor() {
  blockid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InternalBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalBlock& InternalBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InternalBlock_xchain_2eproto.base);
  return *internal_default_instance();
}


void InternalBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InternalBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  merkle_tree_.Clear();
  failed_txs_.Clear();
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curblocknum_) -
      reinterpret_cast<char*>(&version_)) + sizeof(curblocknum_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InternalBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InternalBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 nonce = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nonce(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes blockid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blockid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes pre_hash = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pre_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes proposer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_proposer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes sign = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sign();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes pubkey = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes merkle_root = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_merkle_root();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 height = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.Transaction transactions = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Transaction::_InternalParse;
          object = msg->add_transactions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // int32 tx_count = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_tx_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes merkle_tree = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_merkle_tree();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // bool in_trunk = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_in_trunk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes next_hash = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_next_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 curTerm = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_curterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 curBlockNum = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_curblocknum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> failed_txs = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::pb::InternalBlock_FailedTxsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->failed_txs_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 402 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InternalBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blockid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pre_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proposer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sign = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubkey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes merkle_root = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkle_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Transaction transactions = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tx_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tx_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes merkle_tree = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_merkle_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_trunk = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_trunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes next_hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 curTerm = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 curBlockNum = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curblocknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> failed_txs = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          InternalBlock_FailedTxsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              InternalBlock_FailedTxsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&failed_txs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InternalBlock.FailedTxsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InternalBlock.FailedTxsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InternalBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InternalBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InternalBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InternalBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // int32 nonce = 2;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nonce(), output);
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blockid(), output);
  }

  // bytes pre_hash = 4;
  if (this->pre_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pre_hash(), output);
  }

  // bytes proposer = 5;
  if (this->proposer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->proposer(), output);
  }

  // bytes sign = 6;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign(), output);
  }

  // bytes pubkey = 7;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->pubkey(), output);
  }

  // bytes merkle_root = 8;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->merkle_root(), output);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->height(), output);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }

  // repeated .pb.Transaction transactions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->transactions(static_cast<int>(i)),
      output);
  }

  // int32 tx_count = 12;
  if (this->tx_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tx_count(), output);
  }

  // repeated bytes merkle_tree = 13;
  for (int i = 0, n = this->merkle_tree_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->merkle_tree(i), output);
  }

  // bool in_trunk = 14;
  if (this->in_trunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->in_trunk(), output);
  }

  // bytes next_hash = 15;
  if (this->next_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->next_hash(), output);
  }

  // int64 curTerm = 16;
  if (this->curterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->curterm(), output);
  }

  // int64 curBlockNum = 17;
  if (this->curblocknum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->curblocknum(), output);
  }

  // map<string, string> failed_txs = 18;
  if (!this->failed_txs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InternalBlock.FailedTxsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InternalBlock.FailedTxsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->failed_txs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->failed_txs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->failed_txs().begin();
          it != this->failed_txs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InternalBlock_FailedTxsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(failed_txs_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(18, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InternalBlock_FailedTxsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->failed_txs().begin();
          it != this->failed_txs().end(); ++it) {
        entry.reset(failed_txs_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(18, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InternalBlock)
}

::google::protobuf::uint8* InternalBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InternalBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // int32 nonce = 2;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nonce(), target);
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blockid(), target);
  }

  // bytes pre_hash = 4;
  if (this->pre_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pre_hash(), target);
  }

  // bytes proposer = 5;
  if (this->proposer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->proposer(), target);
  }

  // bytes sign = 6;
  if (this->sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign(), target);
  }

  // bytes pubkey = 7;
  if (this->pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->pubkey(), target);
  }

  // bytes merkle_root = 8;
  if (this->merkle_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->merkle_root(), target);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->height(), target);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }

  // repeated .pb.Transaction transactions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->transactions(static_cast<int>(i)), target);
  }

  // int32 tx_count = 12;
  if (this->tx_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tx_count(), target);
  }

  // repeated bytes merkle_tree = 13;
  for (int i = 0, n = this->merkle_tree_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->merkle_tree(i), target);
  }

  // bool in_trunk = 14;
  if (this->in_trunk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->in_trunk(), target);
  }

  // bytes next_hash = 15;
  if (this->next_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->next_hash(), target);
  }

  // int64 curTerm = 16;
  if (this->curterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->curterm(), target);
  }

  // int64 curBlockNum = 17;
  if (this->curblocknum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->curblocknum(), target);
  }

  // map<string, string> failed_txs = 18;
  if (!this->failed_txs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InternalBlock.FailedTxsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InternalBlock.FailedTxsEntry.value");
      }
    };

    if (false &&
        this->failed_txs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->failed_txs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->failed_txs().begin();
          it != this->failed_txs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InternalBlock_FailedTxsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(failed_txs_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(18, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InternalBlock_FailedTxsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->failed_txs().begin();
          it != this->failed_txs().end(); ++it) {
        entry.reset(failed_txs_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(18, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InternalBlock)
  return target;
}

size_t InternalBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InternalBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // repeated bytes merkle_tree = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->merkle_tree_size());
  for (int i = 0, n = this->merkle_tree_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->merkle_tree(i));
  }

  // map<string, string> failed_txs = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->failed_txs_size());
  {
    ::std::unique_ptr<InternalBlock_FailedTxsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->failed_txs().begin();
        it != this->failed_txs().end(); ++it) {
      entry.reset(failed_txs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes blockid = 3;
  if (this->blockid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blockid());
  }

  // bytes pre_hash = 4;
  if (this->pre_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_hash());
  }

  // bytes proposer = 5;
  if (this->proposer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proposer());
  }

  // bytes sign = 6;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  // bytes pubkey = 7;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // bytes merkle_root = 8;
  if (this->merkle_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkle_root());
  }

  // bytes next_hash = 15;
  if (this->next_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_hash());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonce());
  }

  // int64 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 tx_count = 12;
  if (this->tx_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tx_count());
  }

  // bool in_trunk = 14;
  if (this->in_trunk() != 0) {
    total_size += 1 + 1;
  }

  // int64 curTerm = 16;
  if (this->curterm() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curterm());
  }

  // int64 curBlockNum = 17;
  if (this->curblocknum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curblocknum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InternalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalBlock* source =
      ::google::protobuf::DynamicCastToGenerated<InternalBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InternalBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InternalBlock)
    MergeFrom(*source);
  }
}

void InternalBlock::MergeFrom(const InternalBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InternalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  merkle_tree_.MergeFrom(from.merkle_tree_);
  failed_txs_.MergeFrom(from.failed_txs_);
  if (from.blockid().size() > 0) {

    blockid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockid_);
  }
  if (from.pre_hash().size() > 0) {

    pre_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_hash_);
  }
  if (from.proposer().size() > 0) {

    proposer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.merkle_root().size() > 0) {

    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  if (from.next_hash().size() > 0) {

    next_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_hash_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.tx_count() != 0) {
    set_tx_count(from.tx_count());
  }
  if (from.in_trunk() != 0) {
    set_in_trunk(from.in_trunk());
  }
  if (from.curterm() != 0) {
    set_curterm(from.curterm());
  }
  if (from.curblocknum() != 0) {
    set_curblocknum(from.curblocknum());
  }
}

void InternalBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InternalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalBlock::CopyFrom(const InternalBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InternalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalBlock::IsInitialized() const {
  return true;
}

void InternalBlock::Swap(InternalBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalBlock::InternalSwap(InternalBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  merkle_tree_.InternalSwap(CastToBase(&other->merkle_tree_));
  failed_txs_.Swap(&other->failed_txs_);
  blockid_.Swap(&other->blockid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pre_hash_.Swap(&other->pre_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proposer_.Swap(&other->proposer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merkle_root_.Swap(&other->merkle_root_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_hash_.Swap(&other->next_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(nonce_, other->nonce_);
  swap(height_, other->height_);
  swap(timestamp_, other->timestamp_);
  swap(tx_count_, other->tx_count_);
  swap(in_trunk_, other->in_trunk_);
  swap(curterm_, other->curterm_);
  swap(curblocknum_, other->curblocknum_);
}

::google::protobuf::Metadata InternalBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BCStatus::InitAsDefaultInstance() {
  ::pb::_BCStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
  ::pb::_BCStatus_default_instance_._instance.get_mutable()->meta_ = const_cast< ::pb::LedgerMeta*>(
      ::pb::LedgerMeta::internal_default_instance());
  ::pb::_BCStatus_default_instance_._instance.get_mutable()->block_ = const_cast< ::pb::InternalBlock*>(
      ::pb::InternalBlock::internal_default_instance());
  ::pb::_BCStatus_default_instance_._instance.get_mutable()->utxometa_ = const_cast< ::pb::UtxoMeta*>(
      ::pb::UtxoMeta::internal_default_instance());
}
class BCStatus::HasBitSetters {
 public:
  static const ::pb::Header& header(const BCStatus* msg);
  static const ::pb::LedgerMeta& meta(const BCStatus* msg);
  static const ::pb::InternalBlock& block(const BCStatus* msg);
  static const ::pb::UtxoMeta& utxometa(const BCStatus* msg);
};

const ::pb::Header&
BCStatus::HasBitSetters::header(const BCStatus* msg) {
  return *msg->header_;
}
const ::pb::LedgerMeta&
BCStatus::HasBitSetters::meta(const BCStatus* msg) {
  return *msg->meta_;
}
const ::pb::InternalBlock&
BCStatus::HasBitSetters::block(const BCStatus* msg) {
  return *msg->block_;
}
const ::pb::UtxoMeta&
BCStatus::HasBitSetters::utxometa(const BCStatus* msg) {
  return *msg->utxometa_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BCStatus::kHeaderFieldNumber;
const int BCStatus::kBcnameFieldNumber;
const int BCStatus::kMetaFieldNumber;
const int BCStatus::kBlockFieldNumber;
const int BCStatus::kUtxoMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BCStatus::BCStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BCStatus)
}
BCStatus::BCStatus(const BCStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bcname().size() > 0) {
    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_meta()) {
    meta_ = new ::pb::LedgerMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_block()) {
    block_ = new ::pb::InternalBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from.has_utxometa()) {
    utxometa_ = new ::pb::UtxoMeta(*from.utxometa_);
  } else {
    utxometa_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.BCStatus)
}

void BCStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BCStatus_xchain_2eproto.base);
  bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utxometa_) -
      reinterpret_cast<char*>(&header_)) + sizeof(utxometa_));
}

BCStatus::~BCStatus() {
  // @@protoc_insertion_point(destructor:pb.BCStatus)
  SharedDtor();
}

void BCStatus::SharedDtor() {
  bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete utxometa_;
}

void BCStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCStatus& BCStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BCStatus_xchain_2eproto.base);
  return *internal_default_instance();
}


void BCStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BCStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && utxometa_ != nullptr) {
    delete utxometa_;
  }
  utxometa_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BCStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BCStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string bcname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.BCStatus.bcname");
        object = msg->mutable_bcname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.LedgerMeta meta = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::LedgerMeta::_InternalParse;
        object = msg->mutable_meta();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.InternalBlock block = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::InternalBlock::_InternalParse;
        object = msg->mutable_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.UtxoMeta utxoMeta = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::UtxoMeta::_InternalParse;
        object = msg->mutable_utxometa();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BCStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BCStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bcname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcname().data(), static_cast<int>(this->bcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.BCStatus.bcname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.LedgerMeta meta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.InternalBlock block = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.UtxoMeta utxoMeta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_utxometa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BCStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BCStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BCStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BCStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BCStatus.bcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bcname(), output);
  }

  // .pb.LedgerMeta meta = 3;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::meta(this), output);
  }

  // .pb.InternalBlock block = 4;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::block(this), output);
  }

  // .pb.UtxoMeta utxoMeta = 5;
  if (this->has_utxometa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::utxometa(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BCStatus)
}

::google::protobuf::uint8* BCStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BCStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcname().data(), static_cast<int>(this->bcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.BCStatus.bcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bcname(), target);
  }

  // .pb.LedgerMeta meta = 3;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::meta(this), target);
  }

  // .pb.InternalBlock block = 4;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::block(this), target);
  }

  // .pb.UtxoMeta utxoMeta = 5;
  if (this->has_utxometa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::utxometa(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BCStatus)
  return target;
}

size_t BCStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BCStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bcname = 2;
  if (this->bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcname());
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pb.LedgerMeta meta = 3;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .pb.InternalBlock block = 4;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .pb.UtxoMeta utxoMeta = 5;
  if (this->has_utxometa()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *utxometa_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BCStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BCStatus* source =
      ::google::protobuf::DynamicCastToGenerated<BCStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BCStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BCStatus)
    MergeFrom(*source);
  }
}

void BCStatus::MergeFrom(const BCStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BCStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bcname().size() > 0) {

    bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcname_);
  }
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.has_meta()) {
    mutable_meta()->::pb::LedgerMeta::MergeFrom(from.meta());
  }
  if (from.has_block()) {
    mutable_block()->::pb::InternalBlock::MergeFrom(from.block());
  }
  if (from.has_utxometa()) {
    mutable_utxometa()->::pb::UtxoMeta::MergeFrom(from.utxometa());
  }
}

void BCStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BCStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCStatus::CopyFrom(const BCStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BCStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCStatus::IsInitialized() const {
  return true;
}

void BCStatus::Swap(BCStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BCStatus::InternalSwap(BCStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcname_.Swap(&other->bcname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(meta_, other->meta_);
  swap(block_, other->block_);
  swap(utxometa_, other->utxometa_);
}

::google::protobuf::Metadata BCStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

Speeds_SumSpeedsEntry_DoNotUse::Speeds_SumSpeedsEntry_DoNotUse() {}
Speeds_SumSpeedsEntry_DoNotUse::Speeds_SumSpeedsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Speeds_SumSpeedsEntry_DoNotUse::MergeFrom(const Speeds_SumSpeedsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Speeds_SumSpeedsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[20];
}
void Speeds_SumSpeedsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Speeds_SumSpeedsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Speeds_SumSpeedsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.Speeds.SumSpeedsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

Speeds_BcSpeedsEntry_DoNotUse::Speeds_BcSpeedsEntry_DoNotUse() {}
Speeds_BcSpeedsEntry_DoNotUse::Speeds_BcSpeedsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Speeds_BcSpeedsEntry_DoNotUse::MergeFrom(const Speeds_BcSpeedsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Speeds_BcSpeedsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[21];
}
void Speeds_BcSpeedsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Speeds_BcSpeedsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Speeds_BcSpeedsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.Speeds.BcSpeedsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Speeds::InitAsDefaultInstance() {
}
class Speeds::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Speeds::kSumSpeedsFieldNumber;
const int Speeds::kBcSpeedsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Speeds::Speeds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Speeds)
}
Speeds::Speeds(const Speeds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sumspeeds_.MergeFrom(from.sumspeeds_);
  bcspeeds_.MergeFrom(from.bcspeeds_);
  // @@protoc_insertion_point(copy_constructor:pb.Speeds)
}

void Speeds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Speeds_xchain_2eproto.base);
}

Speeds::~Speeds() {
  // @@protoc_insertion_point(destructor:pb.Speeds)
  SharedDtor();
}

void Speeds::SharedDtor() {
}

void Speeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speeds& Speeds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Speeds_xchain_2eproto.base);
  return *internal_default_instance();
}


void Speeds::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Speeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sumspeeds_.Clear();
  bcspeeds_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Speeds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Speeds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, double> SumSpeeds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::pb::Speeds_SumSpeedsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->sumspeeds_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<string, .pb.BCSpeeds> BcSpeeds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::pb::Speeds_BcSpeedsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->bcspeeds_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Speeds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Speeds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, double> SumSpeeds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Speeds_SumSpeedsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Speeds_SumSpeedsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&sumspeeds_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Speeds.SumSpeedsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .pb.BCSpeeds> BcSpeeds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          Speeds_BcSpeedsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Speeds_BcSpeedsEntry_DoNotUse,
              ::std::string, ::pb::BCSpeeds,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds > > parser(&bcspeeds_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Speeds.BcSpeedsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Speeds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Speeds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Speeds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Speeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> SumSpeeds = 1;
  if (!this->sumspeeds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Speeds.SumSpeedsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sumspeeds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sumspeeds().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sumspeeds().begin();
          it != this->sumspeeds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Speeds_SumSpeedsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sumspeeds_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Speeds_SumSpeedsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sumspeeds().begin();
          it != this->sumspeeds().end(); ++it) {
        entry.reset(sumspeeds_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .pb.BCSpeeds> BcSpeeds = 2;
  if (!this->bcspeeds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Speeds.BcSpeedsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->bcspeeds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->bcspeeds().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_iterator
          it = this->bcspeeds().begin();
          it != this->bcspeeds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Speeds_BcSpeedsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bcspeeds_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Speeds_BcSpeedsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_iterator
          it = this->bcspeeds().begin();
          it != this->bcspeeds().end(); ++it) {
        entry.reset(bcspeeds_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Speeds)
}

::google::protobuf::uint8* Speeds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Speeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> SumSpeeds = 1;
  if (!this->sumspeeds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Speeds.SumSpeedsEntry.key");
      }
    };

    if (false &&
        this->sumspeeds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sumspeeds().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sumspeeds().begin();
          it != this->sumspeeds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Speeds_SumSpeedsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sumspeeds_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Speeds_SumSpeedsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sumspeeds().begin();
          it != this->sumspeeds().end(); ++it) {
        entry.reset(sumspeeds_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .pb.BCSpeeds> BcSpeeds = 2;
  if (!this->bcspeeds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Speeds.BcSpeedsEntry.key");
      }
    };

    if (false &&
        this->bcspeeds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->bcspeeds().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_iterator
          it = this->bcspeeds().begin();
          it != this->bcspeeds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Speeds_BcSpeedsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bcspeeds_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Speeds_BcSpeedsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_iterator
          it = this->bcspeeds().begin();
          it != this->bcspeeds().end(); ++it) {
        entry.reset(bcspeeds_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Speeds)
  return target;
}

size_t Speeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Speeds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> SumSpeeds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sumspeeds_size());
  {
    ::std::unique_ptr<Speeds_SumSpeedsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->sumspeeds().begin();
        it != this->sumspeeds().end(); ++it) {
      entry.reset(sumspeeds_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .pb.BCSpeeds> BcSpeeds = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bcspeeds_size());
  {
    ::std::unique_ptr<Speeds_BcSpeedsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >::const_iterator
        it = this->bcspeeds().begin();
        it != this->bcspeeds().end(); ++it) {
      entry.reset(bcspeeds_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speeds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Speeds)
  GOOGLE_DCHECK_NE(&from, this);
  const Speeds* source =
      ::google::protobuf::DynamicCastToGenerated<Speeds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Speeds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Speeds)
    MergeFrom(*source);
  }
}

void Speeds::MergeFrom(const Speeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Speeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sumspeeds_.MergeFrom(from.sumspeeds_);
  bcspeeds_.MergeFrom(from.bcspeeds_);
}

void Speeds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Speeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speeds::CopyFrom(const Speeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Speeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speeds::IsInitialized() const {
  return true;
}

void Speeds::Swap(Speeds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speeds::InternalSwap(Speeds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sumspeeds_.Swap(&other->sumspeeds_);
  bcspeeds_.Swap(&other->bcspeeds_);
}

::google::protobuf::Metadata Speeds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

BCSpeeds_BcSpeedEntry_DoNotUse::BCSpeeds_BcSpeedEntry_DoNotUse() {}
BCSpeeds_BcSpeedEntry_DoNotUse::BCSpeeds_BcSpeedEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void BCSpeeds_BcSpeedEntry_DoNotUse::MergeFrom(const BCSpeeds_BcSpeedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata BCSpeeds_BcSpeedEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[23];
}
void BCSpeeds_BcSpeedEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BCSpeeds_BcSpeedEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      BCSpeeds_BcSpeedEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.BCSpeeds.BcSpeedEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void BCSpeeds::InitAsDefaultInstance() {
}
class BCSpeeds::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BCSpeeds::kBcSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BCSpeeds::BCSpeeds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BCSpeeds)
}
BCSpeeds::BCSpeeds(const BCSpeeds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bcspeed_.MergeFrom(from.bcspeed_);
  // @@protoc_insertion_point(copy_constructor:pb.BCSpeeds)
}

void BCSpeeds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BCSpeeds_xchain_2eproto.base);
}

BCSpeeds::~BCSpeeds() {
  // @@protoc_insertion_point(destructor:pb.BCSpeeds)
  SharedDtor();
}

void BCSpeeds::SharedDtor() {
}

void BCSpeeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCSpeeds& BCSpeeds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BCSpeeds_xchain_2eproto.base);
  return *internal_default_instance();
}


void BCSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BCSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcspeed_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BCSpeeds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BCSpeeds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, double> BcSpeed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::pb::BCSpeeds_BcSpeedEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->bcspeed_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BCSpeeds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BCSpeeds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, double> BcSpeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          BCSpeeds_BcSpeedEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              BCSpeeds_BcSpeedEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&bcspeed_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.BCSpeeds.BcSpeedEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BCSpeeds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BCSpeeds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BCSpeeds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BCSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> BcSpeed = 1;
  if (!this->bcspeed().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.BCSpeeds.BcSpeedEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->bcspeed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->bcspeed().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->bcspeed().begin();
          it != this->bcspeed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BCSpeeds_BcSpeedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bcspeed_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<BCSpeeds_BcSpeedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->bcspeed().begin();
          it != this->bcspeed().end(); ++it) {
        entry.reset(bcspeed_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BCSpeeds)
}

::google::protobuf::uint8* BCSpeeds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BCSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> BcSpeed = 1;
  if (!this->bcspeed().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.BCSpeeds.BcSpeedEntry.key");
      }
    };

    if (false &&
        this->bcspeed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->bcspeed().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->bcspeed().begin();
          it != this->bcspeed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BCSpeeds_BcSpeedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bcspeed_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<BCSpeeds_BcSpeedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->bcspeed().begin();
          it != this->bcspeed().end(); ++it) {
        entry.reset(bcspeed_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BCSpeeds)
  return target;
}

size_t BCSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BCSpeeds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> BcSpeed = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bcspeed_size());
  {
    ::std::unique_ptr<BCSpeeds_BcSpeedEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->bcspeed().begin();
        it != this->bcspeed().end(); ++it) {
      entry.reset(bcspeed_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCSpeeds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BCSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  const BCSpeeds* source =
      ::google::protobuf::DynamicCastToGenerated<BCSpeeds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BCSpeeds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BCSpeeds)
    MergeFrom(*source);
  }
}

void BCSpeeds::MergeFrom(const BCSpeeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BCSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bcspeed_.MergeFrom(from.bcspeed_);
}

void BCSpeeds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BCSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCSpeeds::CopyFrom(const BCSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BCSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCSpeeds::IsInitialized() const {
  return true;
}

void BCSpeeds::Swap(BCSpeeds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BCSpeeds::InternalSwap(BCSpeeds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bcspeed_.Swap(&other->bcspeed_);
}

::google::protobuf::Metadata BCSpeeds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SystemsStatus::InitAsDefaultInstance() {
  ::pb::_SystemsStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
  ::pb::_SystemsStatus_default_instance_._instance.get_mutable()->speeds_ = const_cast< ::pb::Speeds*>(
      ::pb::Speeds::internal_default_instance());
}
class SystemsStatus::HasBitSetters {
 public:
  static const ::pb::Header& header(const SystemsStatus* msg);
  static const ::pb::Speeds& speeds(const SystemsStatus* msg);
};

const ::pb::Header&
SystemsStatus::HasBitSetters::header(const SystemsStatus* msg) {
  return *msg->header_;
}
const ::pb::Speeds&
SystemsStatus::HasBitSetters::speeds(const SystemsStatus* msg) {
  return *msg->speeds_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemsStatus::kHeaderFieldNumber;
const int SystemsStatus::kBcsStatusFieldNumber;
const int SystemsStatus::kSpeedsFieldNumber;
const int SystemsStatus::kPeerUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemsStatus::SystemsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SystemsStatus)
}
SystemsStatus::SystemsStatus(const SystemsStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bcs_status_(from.bcs_status_),
      peerurls_(from.peerurls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_speeds()) {
    speeds_ = new ::pb::Speeds(*from.speeds_);
  } else {
    speeds_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.SystemsStatus)
}

void SystemsStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SystemsStatus_xchain_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speeds_) -
      reinterpret_cast<char*>(&header_)) + sizeof(speeds_));
}

SystemsStatus::~SystemsStatus() {
  // @@protoc_insertion_point(destructor:pb.SystemsStatus)
  SharedDtor();
}

void SystemsStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete speeds_;
}

void SystemsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemsStatus& SystemsStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SystemsStatus_xchain_2eproto.base);
  return *internal_default_instance();
}


void SystemsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bcs_status_.Clear();
  peerurls_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speeds_ != nullptr) {
    delete speeds_;
  }
  speeds_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemsStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SystemsStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.BCStatus bcs_status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::BCStatus::_InternalParse;
          object = msg->add_bcs_status();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .pb.Speeds speeds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Speeds::_InternalParse;
        object = msg->mutable_speeds();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string peerUrls = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.SystemsStatus.peerUrls");
          object = msg->add_peerurls();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SystemsStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.BCStatus bcs_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bcs_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Speeds speeds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peerUrls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerurls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerurls(this->peerurls_size() - 1).data(),
            static_cast<int>(this->peerurls(this->peerurls_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SystemsStatus.peerUrls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SystemsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SystemsStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .pb.BCStatus bcs_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bcs_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->bcs_status(static_cast<int>(i)),
      output);
  }

  // .pb.Speeds speeds = 3;
  if (this->has_speeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::speeds(this), output);
  }

  // repeated string peerUrls = 4;
  for (int i = 0, n = this->peerurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), static_cast<int>(this->peerurls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SystemsStatus.peerUrls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->peerurls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SystemsStatus)
}

::google::protobuf::uint8* SystemsStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .pb.BCStatus bcs_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bcs_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->bcs_status(static_cast<int>(i)), target);
  }

  // .pb.Speeds speeds = 3;
  if (this->has_speeds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::speeds(this), target);
  }

  // repeated string peerUrls = 4;
  for (int i = 0, n = this->peerurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), static_cast<int>(this->peerurls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SystemsStatus.peerUrls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->peerurls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SystemsStatus)
  return target;
}

size_t SystemsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SystemsStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BCStatus bcs_status = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bcs_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bcs_status(static_cast<int>(i)));
    }
  }

  // repeated string peerUrls = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerurls_size());
  for (int i = 0, n = this->peerurls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerurls(i));
  }

  // .pb.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pb.Speeds speeds = 3;
  if (this->has_speeds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speeds_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SystemsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemsStatus* source =
      ::google::protobuf::DynamicCastToGenerated<SystemsStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SystemsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SystemsStatus)
    MergeFrom(*source);
  }
}

void SystemsStatus::MergeFrom(const SystemsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SystemsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bcs_status_.MergeFrom(from.bcs_status_);
  peerurls_.MergeFrom(from.peerurls_);
  if (from.has_header()) {
    mutable_header()->::pb::Header::MergeFrom(from.header());
  }
  if (from.has_speeds()) {
    mutable_speeds()->::pb::Speeds::MergeFrom(from.speeds());
  }
}

void SystemsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SystemsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemsStatus::CopyFrom(const SystemsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SystemsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemsStatus::IsInitialized() const {
  return true;
}

void SystemsStatus::Swap(SystemsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemsStatus::InternalSwap(SystemsStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bcs_status_)->InternalSwap(CastToBase(&other->bcs_status_));
  peerurls_.InternalSwap(CastToBase(&other->peerurls_));
  swap(header_, other->header_);
  swap(speeds_, other->speeds_);
}

::google::protobuf::Metadata SystemsStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

InvokeRequest_ArgsEntry_DoNotUse::InvokeRequest_ArgsEntry_DoNotUse() {}
InvokeRequest_ArgsEntry_DoNotUse::InvokeRequest_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InvokeRequest_ArgsEntry_DoNotUse::MergeFrom(const InvokeRequest_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata InvokeRequest_ArgsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[26];
}
void InvokeRequest_ArgsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InvokeRequest_ArgsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      InvokeRequest_ArgsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "pb.InvokeRequest.ArgsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void InvokeRequest::InitAsDefaultInstance() {
}
class InvokeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvokeRequest::kModuleNameFieldNumber;
const int InvokeRequest::kContractNameFieldNumber;
const int InvokeRequest::kMethodNameFieldNumber;
const int InvokeRequest::kArgsFieldNumber;
const int InvokeRequest::kResourceLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvokeRequest::InvokeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InvokeRequest)
}
InvokeRequest::InvokeRequest(const InvokeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      resource_limits_(from.resource_limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  contract_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contract_name().size() > 0) {
    contract_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.InvokeRequest)
}

void InvokeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InvokeRequest_xchain_2eproto.base);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InvokeRequest::~InvokeRequest() {
  // @@protoc_insertion_point(destructor:pb.InvokeRequest)
  SharedDtor();
}

void InvokeRequest::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InvokeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeRequest& InvokeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InvokeRequest_xchain_2eproto.base);
  return *internal_default_instance();
}


void InvokeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InvokeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  resource_limits_.Clear();
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InvokeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InvokeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string module_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.InvokeRequest.module_name");
        object = msg->mutable_module_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string contract_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.InvokeRequest.contract_name");
        object = msg->mutable_contract_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string method_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.InvokeRequest.method_name");
        object = msg->mutable_method_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, bytes> args = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::pb::InvokeRequest_ArgsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->args_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .pb.ResourceLimit resource_limits = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::ResourceLimit::_InternalParse;
          object = msg->add_resource_limits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InvokeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InvokeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InvokeRequest.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contract_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contract_name().data(), static_cast<int>(this->contract_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InvokeRequest.contract_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InvokeRequest.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> args = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          InvokeRequest_ArgsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              InvokeRequest_ArgsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&args_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InvokeRequest.ArgsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.ResourceLimit resource_limits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_resource_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InvokeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InvokeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InvokeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InvokeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_name(), output);
  }

  // string contract_name = 2;
  if (this->contract_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contract_name().data(), static_cast<int>(this->contract_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.contract_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract_name(), output);
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // map<string, bytes> args = 4;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InvokeRequest.ArgsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->args().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InvokeRequest_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InvokeRequest_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .pb.ResourceLimit resource_limits = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resource_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->resource_limits(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InvokeRequest)
}

::google::protobuf::uint8* InvokeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InvokeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // string contract_name = 2;
  if (this->contract_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contract_name().data(), static_cast<int>(this->contract_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.contract_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract_name(), target);
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InvokeRequest.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // map<string, bytes> args = 4;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.InvokeRequest.ArgsEntry.key");
      }
    };

    if (false &&
        this->args().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InvokeRequest_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InvokeRequest_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .pb.ResourceLimit resource_limits = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resource_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->resource_limits(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InvokeRequest)
  return target;
}

size_t InvokeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InvokeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> args = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  {
    ::std::unique_ptr<InvokeRequest_ArgsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->args().begin();
        it != this->args().end(); ++it) {
      entry.reset(args_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .pb.ResourceLimit resource_limits = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->resource_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->resource_limits(static_cast<int>(i)));
    }
  }

  // string module_name = 1;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string contract_name = 2;
  if (this->contract_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract_name());
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InvokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<InvokeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InvokeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InvokeRequest)
    MergeFrom(*source);
  }
}

void InvokeRequest::MergeFrom(const InvokeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InvokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  resource_limits_.MergeFrom(from.resource_limits_);
  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.contract_name().size() > 0) {

    contract_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_name_);
  }
  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
}

void InvokeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InvokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeRequest::CopyFrom(const InvokeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InvokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeRequest::IsInitialized() const {
  return true;
}

void InvokeRequest::Swap(InvokeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvokeRequest::InternalSwap(InvokeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.Swap(&other->args_);
  CastToBase(&resource_limits_)->InternalSwap(CastToBase(&other->resource_limits_));
  module_name_.Swap(&other->module_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_name_.Swap(&other->contract_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata InvokeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxInputExt::InitAsDefaultInstance() {
}
class TxInputExt::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxInputExt::kBucketFieldNumber;
const int TxInputExt::kKeyFieldNumber;
const int TxInputExt::kRefTxidFieldNumber;
const int TxInputExt::kRefOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxInputExt::TxInputExt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxInputExt)
}
TxInputExt::TxInputExt(const TxInputExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucket().size() > 0) {
    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ref_txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ref_txid().size() > 0) {
    ref_txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_txid_);
  }
  ref_offset_ = from.ref_offset_;
  // @@protoc_insertion_point(copy_constructor:pb.TxInputExt)
}

void TxInputExt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxInputExt_xchain_2eproto.base);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_offset_ = 0;
}

TxInputExt::~TxInputExt() {
  // @@protoc_insertion_point(destructor:pb.TxInputExt)
  SharedDtor();
}

void TxInputExt::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxInputExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxInputExt& TxInputExt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxInputExt_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxInputExt::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxInputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_offset_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxInputExt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxInputExt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxInputExt.bucket");
        object = msg->mutable_bucket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes ref_txid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ref_txid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 ref_offset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ref_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxInputExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxInputExt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bucket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), static_cast<int>(this->bucket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxInputExt.bucket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ref_txid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxInputExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxInputExt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxInputExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxInputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxInputExt.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes ref_txid = 3;
  if (this->ref_txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ref_txid(), output);
  }

  // int32 ref_offset = 4;
  if (this->ref_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ref_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxInputExt)
}

::google::protobuf::uint8* TxInputExt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxInputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxInputExt.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes ref_txid = 3;
  if (this->ref_txid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ref_txid(), target);
  }

  // int32 ref_offset = 4;
  if (this->ref_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ref_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxInputExt)
  return target;
}

size_t TxInputExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxInputExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes ref_txid = 3;
  if (this->ref_txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ref_txid());
  }

  // int32 ref_offset = 4;
  if (this->ref_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxInputExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxInputExt)
  GOOGLE_DCHECK_NE(&from, this);
  const TxInputExt* source =
      ::google::protobuf::DynamicCastToGenerated<TxInputExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxInputExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxInputExt)
    MergeFrom(*source);
  }
}

void TxInputExt::MergeFrom(const TxInputExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxInputExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.ref_txid().size() > 0) {

    ref_txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_txid_);
  }
  if (from.ref_offset() != 0) {
    set_ref_offset(from.ref_offset());
  }
}

void TxInputExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxInputExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxInputExt::CopyFrom(const TxInputExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxInputExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInputExt::IsInitialized() const {
  return true;
}

void TxInputExt::Swap(TxInputExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxInputExt::InternalSwap(TxInputExt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bucket_.Swap(&other->bucket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_txid_.Swap(&other->ref_txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_offset_, other->ref_offset_);
}

::google::protobuf::Metadata TxInputExt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxOutputExt::InitAsDefaultInstance() {
}
class TxOutputExt::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxOutputExt::kBucketFieldNumber;
const int TxOutputExt::kKeyFieldNumber;
const int TxOutputExt::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxOutputExt::TxOutputExt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TxOutputExt)
}
TxOutputExt::TxOutputExt(const TxOutputExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucket().size() > 0) {
    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.TxOutputExt)
}

void TxOutputExt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxOutputExt_xchain_2eproto.base);
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxOutputExt::~TxOutputExt() {
  // @@protoc_insertion_point(destructor:pb.TxOutputExt)
  SharedDtor();
}

void TxOutputExt::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxOutputExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxOutputExt& TxOutputExt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxOutputExt_xchain_2eproto.base);
  return *internal_default_instance();
}


void TxOutputExt::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TxOutputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxOutputExt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxOutputExt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TxOutputExt.bucket");
        object = msg->mutable_bucket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxOutputExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TxOutputExt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bucket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), static_cast<int>(this->bucket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TxOutputExt.bucket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TxOutputExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TxOutputExt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxOutputExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TxOutputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxOutputExt.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TxOutputExt)
}

::google::protobuf::uint8* TxOutputExt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TxOutputExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), static_cast<int>(this->bucket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TxOutputExt.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TxOutputExt)
  return target;
}

size_t TxOutputExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TxOutputExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxOutputExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TxOutputExt)
  GOOGLE_DCHECK_NE(&from, this);
  const TxOutputExt* source =
      ::google::protobuf::DynamicCastToGenerated<TxOutputExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TxOutputExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TxOutputExt)
    MergeFrom(*source);
  }
}

void TxOutputExt::MergeFrom(const TxOutputExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TxOutputExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void TxOutputExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TxOutputExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxOutputExt::CopyFrom(const TxOutputExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TxOutputExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutputExt::IsInitialized() const {
  return true;
}

void TxOutputExt::Swap(TxOutputExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxOutputExt::InternalSwap(TxOutputExt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bucket_.Swap(&other->bucket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TxOutputExt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignatureInfo::InitAsDefaultInstance() {
}
class SignatureInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignatureInfo::kPublicKeyFieldNumber;
const int SignatureInfo::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignatureInfo::SignatureInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SignatureInfo)
}
SignatureInfo::SignatureInfo(const SignatureInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publickey().size() > 0) {
    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.SignatureInfo)
}

void SignatureInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignatureInfo_xchain_2eproto.base);
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignatureInfo::~SignatureInfo() {
  // @@protoc_insertion_point(destructor:pb.SignatureInfo)
  SharedDtor();
}

void SignatureInfo::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignatureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureInfo& SignatureInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignatureInfo_xchain_2eproto.base);
  return *internal_default_instance();
}


void SignatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SignatureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignatureInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignatureInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string PublicKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.SignatureInfo.PublicKey");
        object = msg->mutable_publickey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Sign = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sign();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignatureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SignatureInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string PublicKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), static_cast<int>(this->publickey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SignatureInfo.PublicKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SignatureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SignatureInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignatureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SignatureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PublicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), static_cast<int>(this->publickey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SignatureInfo.PublicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // bytes Sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SignatureInfo)
}

::google::protobuf::uint8* SignatureInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SignatureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PublicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), static_cast<int>(this->publickey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SignatureInfo.PublicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // bytes Sign = 2;
  if (this->sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SignatureInfo)
  return target;
}

size_t SignatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SignatureInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PublicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // bytes Sign = 2;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SignatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureInfo* source =
      ::google::protobuf::DynamicCastToGenerated<SignatureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SignatureInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SignatureInfo)
    MergeFrom(*source);
  }
}

void SignatureInfo::MergeFrom(const SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SignatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
}

void SignatureInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SignatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureInfo::CopyFrom(const SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SignatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureInfo::IsInitialized() const {
  return true;
}

void SignatureInfo::Swap(SignatureInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignatureInfo::InternalSwap(SignatureInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  publickey_.Swap(&other->publickey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SignatureInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResourceLimit::InitAsDefaultInstance() {
}
class ResourceLimit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceLimit::kTypeFieldNumber;
const int ResourceLimit::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceLimit::ResourceLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ResourceLimit)
}
ResourceLimit::ResourceLimit(const ResourceLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.ResourceLimit)
}

void ResourceLimit::SharedCtor() {
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(type_));
}

ResourceLimit::~ResourceLimit() {
  // @@protoc_insertion_point(destructor:pb.ResourceLimit)
  SharedDtor();
}

void ResourceLimit::SharedDtor() {
}

void ResourceLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLimit& ResourceLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResourceLimit_xchain_2eproto.base);
  return *internal_default_instance();
}


void ResourceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ResourceLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResourceLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.ResourceType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::pb::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ResourceLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ResourceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ResourceLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ResourceLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ResourceLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ResourceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ResourceLimit)
}

::google::protobuf::uint8* ResourceLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ResourceLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ResourceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ResourceLimit)
  return target;
}

size_t ResourceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ResourceLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // .pb.ResourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimit* source =
      ::google::protobuf::DynamicCastToGenerated<ResourceLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ResourceLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ResourceLimit)
    MergeFrom(*source);
  }
}

void ResourceLimit::MergeFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ResourceLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLimit::CopyFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimit::IsInitialized() const {
  return true;
}

void ResourceLimit::Swap(ResourceLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceLimit::InternalSwap(ResourceLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ResourceLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xchain_2eproto);
  return ::file_level_metadata_xchain_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::Header* Arena::CreateMaybeMessage< ::pb::Header >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxDataAccount* Arena::CreateMaybeMessage< ::pb::TxDataAccount >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxDataAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxData* Arena::CreateMaybeMessage< ::pb::TxData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxStatus* Arena::CreateMaybeMessage< ::pb::TxStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BatchTxs* Arena::CreateMaybeMessage< ::pb::BatchTxs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BatchTxs >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Block* Arena::CreateMaybeMessage< ::pb::Block >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockID* Arena::CreateMaybeMessage< ::pb::BlockID >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockHeight* Arena::CreateMaybeMessage< ::pb::BlockHeight >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BlockHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CommonReply* Arena::CreateMaybeMessage< ::pb::CommonReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CommonReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CommonIn* Arena::CreateMaybeMessage< ::pb::CommonIn >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CommonIn >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TokenDetail* Arena::CreateMaybeMessage< ::pb::TokenDetail >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TokenDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::AddressStatus* Arena::CreateMaybeMessage< ::pb::AddressStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::AddressStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxInput* Arena::CreateMaybeMessage< ::pb::TxInput >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxInput >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxOutput* Arena::CreateMaybeMessage< ::pb::TxOutput >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction* Arena::CreateMaybeMessage< ::pb::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LedgerMeta* Arena::CreateMaybeMessage< ::pb::LedgerMeta >(Arena* arena) {
  return Arena::CreateInternal< ::pb::LedgerMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::UtxoMeta* Arena::CreateMaybeMessage< ::pb::UtxoMeta >(Arena* arena) {
  return Arena::CreateInternal< ::pb::UtxoMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InternalBlock_FailedTxsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::InternalBlock_FailedTxsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InternalBlock_FailedTxsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InternalBlock* Arena::CreateMaybeMessage< ::pb::InternalBlock >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InternalBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BCStatus* Arena::CreateMaybeMessage< ::pb::BCStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BCStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Speeds_SumSpeedsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::Speeds_SumSpeedsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Speeds_SumSpeedsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Speeds_BcSpeedsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::Speeds_BcSpeedsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Speeds_BcSpeedsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Speeds* Arena::CreateMaybeMessage< ::pb::Speeds >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Speeds >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BCSpeeds_BcSpeedEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::BCSpeeds_BcSpeedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BCSpeeds_BcSpeedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BCSpeeds* Arena::CreateMaybeMessage< ::pb::BCSpeeds >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BCSpeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SystemsStatus* Arena::CreateMaybeMessage< ::pb::SystemsStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SystemsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InvokeRequest_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::InvokeRequest_ArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InvokeRequest_ArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InvokeRequest* Arena::CreateMaybeMessage< ::pb::InvokeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InvokeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxInputExt* Arena::CreateMaybeMessage< ::pb::TxInputExt >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxInputExt >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TxOutputExt* Arena::CreateMaybeMessage< ::pb::TxOutputExt >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TxOutputExt >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SignatureInfo* Arena::CreateMaybeMessage< ::pb::SignatureInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SignatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ResourceLimit* Arena::CreateMaybeMessage< ::pb::ResourceLimit >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ResourceLimit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
