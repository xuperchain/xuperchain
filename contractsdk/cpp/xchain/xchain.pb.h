// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xchain.proto

#ifndef PROTOBUF_INCLUDED_xchain_2eproto
#define PROTOBUF_INCLUDED_xchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xchain_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_xchain_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_xchain_2eproto();
namespace pb {
class AddressStatus;
class AddressStatusDefaultTypeInternal;
extern AddressStatusDefaultTypeInternal _AddressStatus_default_instance_;
class BCSpeeds;
class BCSpeedsDefaultTypeInternal;
extern BCSpeedsDefaultTypeInternal _BCSpeeds_default_instance_;
class BCSpeeds_BcSpeedEntry_DoNotUse;
class BCSpeeds_BcSpeedEntry_DoNotUseDefaultTypeInternal;
extern BCSpeeds_BcSpeedEntry_DoNotUseDefaultTypeInternal _BCSpeeds_BcSpeedEntry_DoNotUse_default_instance_;
class BCStatus;
class BCStatusDefaultTypeInternal;
extern BCStatusDefaultTypeInternal _BCStatus_default_instance_;
class BatchTxs;
class BatchTxsDefaultTypeInternal;
extern BatchTxsDefaultTypeInternal _BatchTxs_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeight;
class BlockHeightDefaultTypeInternal;
extern BlockHeightDefaultTypeInternal _BlockHeight_default_instance_;
class BlockID;
class BlockIDDefaultTypeInternal;
extern BlockIDDefaultTypeInternal _BlockID_default_instance_;
class CommonIn;
class CommonInDefaultTypeInternal;
extern CommonInDefaultTypeInternal _CommonIn_default_instance_;
class CommonReply;
class CommonReplyDefaultTypeInternal;
extern CommonReplyDefaultTypeInternal _CommonReply_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class InternalBlock;
class InternalBlockDefaultTypeInternal;
extern InternalBlockDefaultTypeInternal _InternalBlock_default_instance_;
class InternalBlock_FailedTxsEntry_DoNotUse;
class InternalBlock_FailedTxsEntry_DoNotUseDefaultTypeInternal;
extern InternalBlock_FailedTxsEntry_DoNotUseDefaultTypeInternal _InternalBlock_FailedTxsEntry_DoNotUse_default_instance_;
class InvokeRequest;
class InvokeRequestDefaultTypeInternal;
extern InvokeRequestDefaultTypeInternal _InvokeRequest_default_instance_;
class InvokeRequest_ArgsEntry_DoNotUse;
class InvokeRequest_ArgsEntry_DoNotUseDefaultTypeInternal;
extern InvokeRequest_ArgsEntry_DoNotUseDefaultTypeInternal _InvokeRequest_ArgsEntry_DoNotUse_default_instance_;
class LedgerMeta;
class LedgerMetaDefaultTypeInternal;
extern LedgerMetaDefaultTypeInternal _LedgerMeta_default_instance_;
class ResourceLimit;
class ResourceLimitDefaultTypeInternal;
extern ResourceLimitDefaultTypeInternal _ResourceLimit_default_instance_;
class SignatureInfo;
class SignatureInfoDefaultTypeInternal;
extern SignatureInfoDefaultTypeInternal _SignatureInfo_default_instance_;
class Speeds;
class SpeedsDefaultTypeInternal;
extern SpeedsDefaultTypeInternal _Speeds_default_instance_;
class Speeds_BcSpeedsEntry_DoNotUse;
class Speeds_BcSpeedsEntry_DoNotUseDefaultTypeInternal;
extern Speeds_BcSpeedsEntry_DoNotUseDefaultTypeInternal _Speeds_BcSpeedsEntry_DoNotUse_default_instance_;
class Speeds_SumSpeedsEntry_DoNotUse;
class Speeds_SumSpeedsEntry_DoNotUseDefaultTypeInternal;
extern Speeds_SumSpeedsEntry_DoNotUseDefaultTypeInternal _Speeds_SumSpeedsEntry_DoNotUse_default_instance_;
class SystemsStatus;
class SystemsStatusDefaultTypeInternal;
extern SystemsStatusDefaultTypeInternal _SystemsStatus_default_instance_;
class TokenDetail;
class TokenDetailDefaultTypeInternal;
extern TokenDetailDefaultTypeInternal _TokenDetail_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TxData;
class TxDataDefaultTypeInternal;
extern TxDataDefaultTypeInternal _TxData_default_instance_;
class TxDataAccount;
class TxDataAccountDefaultTypeInternal;
extern TxDataAccountDefaultTypeInternal _TxDataAccount_default_instance_;
class TxInput;
class TxInputDefaultTypeInternal;
extern TxInputDefaultTypeInternal _TxInput_default_instance_;
class TxInputExt;
class TxInputExtDefaultTypeInternal;
extern TxInputExtDefaultTypeInternal _TxInputExt_default_instance_;
class TxOutput;
class TxOutputDefaultTypeInternal;
extern TxOutputDefaultTypeInternal _TxOutput_default_instance_;
class TxOutputExt;
class TxOutputExtDefaultTypeInternal;
extern TxOutputExtDefaultTypeInternal _TxOutputExt_default_instance_;
class TxStatus;
class TxStatusDefaultTypeInternal;
extern TxStatusDefaultTypeInternal _TxStatus_default_instance_;
class UtxoMeta;
class UtxoMetaDefaultTypeInternal;
extern UtxoMetaDefaultTypeInternal _UtxoMeta_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::AddressStatus* Arena::CreateMaybeMessage<::pb::AddressStatus>(Arena*);
template<> ::pb::BCSpeeds* Arena::CreateMaybeMessage<::pb::BCSpeeds>(Arena*);
template<> ::pb::BCSpeeds_BcSpeedEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::BCSpeeds_BcSpeedEntry_DoNotUse>(Arena*);
template<> ::pb::BCStatus* Arena::CreateMaybeMessage<::pb::BCStatus>(Arena*);
template<> ::pb::BatchTxs* Arena::CreateMaybeMessage<::pb::BatchTxs>(Arena*);
template<> ::pb::Block* Arena::CreateMaybeMessage<::pb::Block>(Arena*);
template<> ::pb::BlockHeight* Arena::CreateMaybeMessage<::pb::BlockHeight>(Arena*);
template<> ::pb::BlockID* Arena::CreateMaybeMessage<::pb::BlockID>(Arena*);
template<> ::pb::CommonIn* Arena::CreateMaybeMessage<::pb::CommonIn>(Arena*);
template<> ::pb::CommonReply* Arena::CreateMaybeMessage<::pb::CommonReply>(Arena*);
template<> ::pb::Header* Arena::CreateMaybeMessage<::pb::Header>(Arena*);
template<> ::pb::InternalBlock* Arena::CreateMaybeMessage<::pb::InternalBlock>(Arena*);
template<> ::pb::InternalBlock_FailedTxsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::InternalBlock_FailedTxsEntry_DoNotUse>(Arena*);
template<> ::pb::InvokeRequest* Arena::CreateMaybeMessage<::pb::InvokeRequest>(Arena*);
template<> ::pb::InvokeRequest_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::InvokeRequest_ArgsEntry_DoNotUse>(Arena*);
template<> ::pb::LedgerMeta* Arena::CreateMaybeMessage<::pb::LedgerMeta>(Arena*);
template<> ::pb::ResourceLimit* Arena::CreateMaybeMessage<::pb::ResourceLimit>(Arena*);
template<> ::pb::SignatureInfo* Arena::CreateMaybeMessage<::pb::SignatureInfo>(Arena*);
template<> ::pb::Speeds* Arena::CreateMaybeMessage<::pb::Speeds>(Arena*);
template<> ::pb::Speeds_BcSpeedsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::Speeds_BcSpeedsEntry_DoNotUse>(Arena*);
template<> ::pb::Speeds_SumSpeedsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::Speeds_SumSpeedsEntry_DoNotUse>(Arena*);
template<> ::pb::SystemsStatus* Arena::CreateMaybeMessage<::pb::SystemsStatus>(Arena*);
template<> ::pb::TokenDetail* Arena::CreateMaybeMessage<::pb::TokenDetail>(Arena*);
template<> ::pb::Transaction* Arena::CreateMaybeMessage<::pb::Transaction>(Arena*);
template<> ::pb::TxData* Arena::CreateMaybeMessage<::pb::TxData>(Arena*);
template<> ::pb::TxDataAccount* Arena::CreateMaybeMessage<::pb::TxDataAccount>(Arena*);
template<> ::pb::TxInput* Arena::CreateMaybeMessage<::pb::TxInput>(Arena*);
template<> ::pb::TxInputExt* Arena::CreateMaybeMessage<::pb::TxInputExt>(Arena*);
template<> ::pb::TxOutput* Arena::CreateMaybeMessage<::pb::TxOutput>(Arena*);
template<> ::pb::TxOutputExt* Arena::CreateMaybeMessage<::pb::TxOutputExt>(Arena*);
template<> ::pb::TxStatus* Arena::CreateMaybeMessage<::pb::TxStatus>(Arena*);
template<> ::pb::UtxoMeta* Arena::CreateMaybeMessage<::pb::UtxoMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum Block_EBlockStatus {
  Block_EBlockStatus_ERROR = 0,
  Block_EBlockStatus_TRUNK = 1,
  Block_EBlockStatus_BRANCH = 2,
  Block_EBlockStatus_NOEXIST = 3,
  Block_EBlockStatus_Block_EBlockStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Block_EBlockStatus_Block_EBlockStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Block_EBlockStatus_IsValid(int value);
const Block_EBlockStatus Block_EBlockStatus_EBlockStatus_MIN = Block_EBlockStatus_ERROR;
const Block_EBlockStatus Block_EBlockStatus_EBlockStatus_MAX = Block_EBlockStatus_NOEXIST;
const int Block_EBlockStatus_EBlockStatus_ARRAYSIZE = Block_EBlockStatus_EBlockStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Block_EBlockStatus_descriptor();
inline const ::std::string& Block_EBlockStatus_Name(Block_EBlockStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Block_EBlockStatus_descriptor(), value);
}
inline bool Block_EBlockStatus_Parse(
    const ::std::string& name, Block_EBlockStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Block_EBlockStatus>(
    Block_EBlockStatus_descriptor(), name, value);
}
enum XChainErrorEnum {
  SUCCESS = 0,
  UNKNOW_ERROR = 1,
  CONNECT_REFUSE = 2,
  NOT_ENOUGH_UTXO_ERROR = 3,
  UTXOVM_ALREADY_UNCONFIRM_ERROR = 4,
  UTXOVM_NOT_FOUND_ERROR = 5,
  INPUT_OUTPUT_NOT_EQUAL_ERROR = 6,
  TX_NOT_FOUND_ERROR = 7,
  TX_SIGN_ERROR = 8,
  BLOCKCHAIN_NOTEXIST = 9,
  VALIDATE_ERROR = 10,
  CANNOT_SYNC_BLOCK_ERROR = 11,
  CONFIRM_BLOCK_ERROR = 12,
  UTXOVM_PLAY_ERROR = 13,
  WALK_ERROR = 14,
  NOT_READY_ERROR = 15,
  BLOCK_EXIST_ERROR = 16,
  ROOT_BLOCK_EXIST_ERROR = 17,
  TX_DUPLICATE_ERROR = 19,
  SERVICE_REFUSED_ERROR = 20,
  TXDATA_SIGN_ERROR = 21,
  TX_SLE_ERROR = 25,
  TX_FEE_NOT_ENOUGH_ERROR = 26,
  UTXO_SIGN_ERROR = 28,
  DPOS_QUERY_ERROR = 31,
  RWSET_INVALID_ERROR = 33,
  RWACL_INVALID_ERROR = 34,
  GAS_NOT_ENOUGH_ERROR = 35,
  TX_VERSION_INVALID_ERROR = 36,
  COMPLIANCE_CHECK_NOT_APPROVED = 37,
  XChainErrorEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  XChainErrorEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool XChainErrorEnum_IsValid(int value);
const XChainErrorEnum XChainErrorEnum_MIN = SUCCESS;
const XChainErrorEnum XChainErrorEnum_MAX = COMPLIANCE_CHECK_NOT_APPROVED;
const int XChainErrorEnum_ARRAYSIZE = XChainErrorEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* XChainErrorEnum_descriptor();
inline const ::std::string& XChainErrorEnum_Name(XChainErrorEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    XChainErrorEnum_descriptor(), value);
}
inline bool XChainErrorEnum_Parse(
    const ::std::string& name, XChainErrorEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XChainErrorEnum>(
    XChainErrorEnum_descriptor(), name, value);
}
enum TransactionStatus {
  UNDEFINE = 0,
  NOEXIST = 1,
  CONFIRM = 2,
  FURCATION = 3,
  UNCONFIRM = 4,
  TransactionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TransactionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TransactionStatus_IsValid(int value);
const TransactionStatus TransactionStatus_MIN = UNDEFINE;
const TransactionStatus TransactionStatus_MAX = UNCONFIRM;
const int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor();
inline const ::std::string& TransactionStatus_Name(TransactionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionStatus_descriptor(), value);
}
inline bool TransactionStatus_Parse(
    const ::std::string& name, TransactionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
enum ResourceType {
  CPU = 0,
  MEMORY = 1,
  DISK = 2,
  XFEE = 3,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ResourceType_IsValid(int value);
const ResourceType ResourceType_MIN = CPU;
const ResourceType ResourceType_MAX = XFEE;
const int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResourceType_descriptor();
inline const ::std::string& ResourceType_Name(ResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResourceType_descriptor(), value);
}
inline bool ResourceType_Parse(
    const ::std::string& name, ResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string logid = 1;
  void clear_logid();
  static const int kLogidFieldNumber = 1;
  const ::std::string& logid() const;
  void set_logid(const ::std::string& value);
  #if LANG_CXX11
  void set_logid(::std::string&& value);
  #endif
  void set_logid(const char* value);
  void set_logid(const char* value, size_t size);
  ::std::string* mutable_logid();
  ::std::string* release_logid();
  void set_allocated_logid(::std::string* logid);

  // string from_node = 2;
  void clear_from_node();
  static const int kFromNodeFieldNumber = 2;
  const ::std::string& from_node() const;
  void set_from_node(const ::std::string& value);
  #if LANG_CXX11
  void set_from_node(::std::string&& value);
  #endif
  void set_from_node(const char* value);
  void set_from_node(const char* value, size_t size);
  ::std::string* mutable_from_node();
  ::std::string* release_from_node();
  void set_allocated_from_node(::std::string* from_node);

  // .pb.XChainErrorEnum error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  ::pb::XChainErrorEnum error() const;
  void set_error(::pb::XChainErrorEnum value);

  // @@protoc_insertion_point(class_scope:pb.Header)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr logid_;
  ::google::protobuf::internal::ArenaStringPtr from_node_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxDataAccount :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxDataAccount) */ {
 public:
  TxDataAccount();
  virtual ~TxDataAccount();

  TxDataAccount(const TxDataAccount& from);

  inline TxDataAccount& operator=(const TxDataAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxDataAccount(TxDataAccount&& from) noexcept
    : TxDataAccount() {
    *this = ::std::move(from);
  }

  inline TxDataAccount& operator=(TxDataAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxDataAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxDataAccount* internal_default_instance() {
    return reinterpret_cast<const TxDataAccount*>(
               &_TxDataAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TxDataAccount* other);
  friend void swap(TxDataAccount& a, TxDataAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxDataAccount* New() const final {
    return CreateMaybeMessage<TxDataAccount>(nullptr);
  }

  TxDataAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxDataAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxDataAccount& from);
  void MergeFrom(const TxDataAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDataAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // int64 frozen_height = 3;
  void clear_frozen_height();
  static const int kFrozenHeightFieldNumber = 3;
  ::google::protobuf::int64 frozen_height() const;
  void set_frozen_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TxDataAccount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::int64 frozen_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxData) */ {
 public:
  TxData();
  virtual ~TxData();

  TxData(const TxData& from);

  inline TxData& operator=(const TxData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxData(TxData&& from) noexcept
    : TxData() {
    *this = ::std::move(from);
  }

  inline TxData& operator=(TxData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxData* internal_default_instance() {
    return reinterpret_cast<const TxData*>(
               &_TxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TxData* other);
  friend void swap(TxData& a, TxData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxData* New() const final {
    return CreateMaybeMessage<TxData>(nullptr);
  }

  TxData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxData& from);
  void MergeFrom(const TxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TxDataAccount account = 6;
  int account_size() const;
  void clear_account();
  static const int kAccountFieldNumber = 6;
  ::pb::TxDataAccount* mutable_account(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxDataAccount >*
      mutable_account();
  const ::pb::TxDataAccount& account(int index) const;
  ::pb::TxDataAccount* add_account();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxDataAccount >&
      account() const;

  // bytes txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // string bcname = 2;
  void clear_bcname();
  static const int kBcnameFieldNumber = 2;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // string from_addr = 3;
  void clear_from_addr();
  static const int kFromAddrFieldNumber = 3;
  const ::std::string& from_addr() const;
  void set_from_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_addr(::std::string&& value);
  #endif
  void set_from_addr(const char* value);
  void set_from_addr(const char* value, size_t size);
  ::std::string* mutable_from_addr();
  ::std::string* release_from_addr();
  void set_allocated_from_addr(::std::string* from_addr);

  // string from_pubkey = 4;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 4;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const char* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // string from_scrkey = 5;
  void clear_from_scrkey();
  static const int kFromScrkeyFieldNumber = 5;
  const ::std::string& from_scrkey() const;
  void set_from_scrkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_scrkey(::std::string&& value);
  #endif
  void set_from_scrkey(const char* value);
  void set_from_scrkey(const char* value, size_t size);
  ::std::string* mutable_from_scrkey();
  ::std::string* release_from_scrkey();
  void set_allocated_from_scrkey(::std::string* from_scrkey);

  // string nonce = 8;
  void clear_nonce();
  static const int kNonceFieldNumber = 8;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes desc = 12;
  void clear_desc();
  static const int kDescFieldNumber = 12;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // bytes user_sign = 14;
  void clear_user_sign();
  static const int kUserSignFieldNumber = 14;
  const ::std::string& user_sign() const;
  void set_user_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_user_sign(::std::string&& value);
  #endif
  void set_user_sign(const char* value);
  void set_user_sign(const void* value, size_t size);
  ::std::string* mutable_user_sign();
  ::std::string* release_user_sign();
  void set_allocated_user_sign(::std::string* user_sign);

  // .pb.Header header = 13;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 13;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // int64 timestamp = 9;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 version = 15;
  void clear_version();
  static const int kVersionFieldNumber = 15;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TxData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxDataAccount > account_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::google::protobuf::internal::ArenaStringPtr from_addr_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_scrkey_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr user_sign_;
  ::pb::Header* header_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxStatus) */ {
 public:
  TxStatus();
  virtual ~TxStatus();

  TxStatus(const TxStatus& from);

  inline TxStatus& operator=(const TxStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxStatus(TxStatus&& from) noexcept
    : TxStatus() {
    *this = ::std::move(from);
  }

  inline TxStatus& operator=(TxStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxStatus* internal_default_instance() {
    return reinterpret_cast<const TxStatus*>(
               &_TxStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TxStatus* other);
  friend void swap(TxStatus& a, TxStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxStatus* New() const final {
    return CreateMaybeMessage<TxStatus>(nullptr);
  }

  TxStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxStatus& from);
  void MergeFrom(const TxStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bcname = 2;
  void clear_bcname();
  static const int kBcnameFieldNumber = 2;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // bytes txid = 3;
  void clear_txid();
  static const int kTxidFieldNumber = 3;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // .pb.Transaction tx = 7;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 7;
  const ::pb::Transaction& tx() const;
  ::pb::Transaction* release_tx();
  ::pb::Transaction* mutable_tx();
  void set_allocated_tx(::pb::Transaction* tx);

  // int64 distance = 5;
  void clear_distance();
  static const int kDistanceFieldNumber = 5;
  ::google::protobuf::int64 distance() const;
  void set_distance(::google::protobuf::int64 value);

  // .pb.TransactionStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::pb::TransactionStatus status() const;
  void set_status(::pb::TransactionStatus value);

  // @@protoc_insertion_point(class_scope:pb.TxStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::pb::Header* header_;
  ::pb::Transaction* tx_;
  ::google::protobuf::int64 distance_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class BatchTxs :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BatchTxs) */ {
 public:
  BatchTxs();
  virtual ~BatchTxs();

  BatchTxs(const BatchTxs& from);

  inline BatchTxs& operator=(const BatchTxs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchTxs(BatchTxs&& from) noexcept
    : BatchTxs() {
    *this = ::std::move(from);
  }

  inline BatchTxs& operator=(BatchTxs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatchTxs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchTxs* internal_default_instance() {
    return reinterpret_cast<const BatchTxs*>(
               &_BatchTxs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BatchTxs* other);
  friend void swap(BatchTxs& a, BatchTxs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchTxs* New() const final {
    return CreateMaybeMessage<BatchTxs>(nullptr);
  }

  BatchTxs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchTxs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchTxs& from);
  void MergeFrom(const BatchTxs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchTxs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TxStatus Txs = 2;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 2;
  ::pb::TxStatus* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxStatus >*
      mutable_txs();
  const ::pb::TxStatus& txs(int index) const;
  ::pb::TxStatus* add_txs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxStatus >&
      txs() const;

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // @@protoc_insertion_point(class_scope:pb.BatchTxs)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxStatus > txs_;
  ::pb::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Block_EBlockStatus EBlockStatus;
  static const EBlockStatus ERROR =
    Block_EBlockStatus_ERROR;
  static const EBlockStatus TRUNK =
    Block_EBlockStatus_TRUNK;
  static const EBlockStatus BRANCH =
    Block_EBlockStatus_BRANCH;
  static const EBlockStatus NOEXIST =
    Block_EBlockStatus_NOEXIST;
  static inline bool EBlockStatus_IsValid(int value) {
    return Block_EBlockStatus_IsValid(value);
  }
  static const EBlockStatus EBlockStatus_MIN =
    Block_EBlockStatus_EBlockStatus_MIN;
  static const EBlockStatus EBlockStatus_MAX =
    Block_EBlockStatus_EBlockStatus_MAX;
  static const int EBlockStatus_ARRAYSIZE =
    Block_EBlockStatus_EBlockStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EBlockStatus_descriptor() {
    return Block_EBlockStatus_descriptor();
  }
  static inline const ::std::string& EBlockStatus_Name(EBlockStatus value) {
    return Block_EBlockStatus_Name(value);
  }
  static inline bool EBlockStatus_Parse(const ::std::string& name,
      EBlockStatus* value) {
    return Block_EBlockStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string bcname = 2;
  void clear_bcname();
  static const int kBcnameFieldNumber = 2;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // bytes blockid = 3;
  void clear_blockid();
  static const int kBlockidFieldNumber = 3;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // .pb.InternalBlock block = 5;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 5;
  const ::pb::InternalBlock& block() const;
  ::pb::InternalBlock* release_block();
  ::pb::InternalBlock* mutable_block();
  void set_allocated_block(::pb::InternalBlock* block);

  // .pb.Block.EBlockStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::pb::Block_EBlockStatus status() const;
  void set_status(::pb::Block_EBlockStatus value);

  // @@protoc_insertion_point(class_scope:pb.Block)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::pb::Header* header_;
  ::pb::InternalBlock* block_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class BlockID :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BlockID) */ {
 public:
  BlockID();
  virtual ~BlockID();

  BlockID(const BlockID& from);

  inline BlockID& operator=(const BlockID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockID(BlockID&& from) noexcept
    : BlockID() {
    *this = ::std::move(from);
  }

  inline BlockID& operator=(BlockID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BlockID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockID* internal_default_instance() {
    return reinterpret_cast<const BlockID*>(
               &_BlockID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BlockID* other);
  friend void swap(BlockID& a, BlockID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockID* New() const final {
    return CreateMaybeMessage<BlockID>(nullptr);
  }

  BlockID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockID& from);
  void MergeFrom(const BlockID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bcname = 1;
  void clear_bcname();
  static const int kBcnameFieldNumber = 1;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // bytes blockid = 2;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // .pb.Header header = 4;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 4;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // bool need_content = 3;
  void clear_need_content();
  static const int kNeedContentFieldNumber = 3;
  bool need_content() const;
  void set_need_content(bool value);

  // @@protoc_insertion_point(class_scope:pb.BlockID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::pb::Header* header_;
  bool need_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class BlockHeight :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BlockHeight) */ {
 public:
  BlockHeight();
  virtual ~BlockHeight();

  BlockHeight(const BlockHeight& from);

  inline BlockHeight& operator=(const BlockHeight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockHeight(BlockHeight&& from) noexcept
    : BlockHeight() {
    *this = ::std::move(from);
  }

  inline BlockHeight& operator=(BlockHeight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BlockHeight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeight* internal_default_instance() {
    return reinterpret_cast<const BlockHeight*>(
               &_BlockHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BlockHeight* other);
  friend void swap(BlockHeight& a, BlockHeight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockHeight* New() const final {
    return CreateMaybeMessage<BlockHeight>(nullptr);
  }

  BlockHeight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockHeight& from);
  void MergeFrom(const BlockHeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bcname = 1;
  void clear_bcname();
  static const int kBcnameFieldNumber = 1;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // .pb.Header header = 3;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 3;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // int64 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.BlockHeight)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::pb::Header* header_;
  ::google::protobuf::int64 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class CommonReply :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.CommonReply) */ {
 public:
  CommonReply();
  virtual ~CommonReply();

  CommonReply(const CommonReply& from);

  inline CommonReply& operator=(const CommonReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonReply(CommonReply&& from) noexcept
    : CommonReply() {
    *this = ::std::move(from);
  }

  inline CommonReply& operator=(CommonReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommonReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonReply* internal_default_instance() {
    return reinterpret_cast<const CommonReply*>(
               &_CommonReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CommonReply* other);
  friend void swap(CommonReply& a, CommonReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonReply* New() const final {
    return CreateMaybeMessage<CommonReply>(nullptr);
  }

  CommonReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonReply& from);
  void MergeFrom(const CommonReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // @@protoc_insertion_point(class_scope:pb.CommonReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class CommonIn :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.CommonIn) */ {
 public:
  CommonIn();
  virtual ~CommonIn();

  CommonIn(const CommonIn& from);

  inline CommonIn& operator=(const CommonIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonIn(CommonIn&& from) noexcept
    : CommonIn() {
    *this = ::std::move(from);
  }

  inline CommonIn& operator=(CommonIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommonIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonIn* internal_default_instance() {
    return reinterpret_cast<const CommonIn*>(
               &_CommonIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CommonIn* other);
  friend void swap(CommonIn& a, CommonIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonIn* New() const final {
    return CreateMaybeMessage<CommonIn>(nullptr);
  }

  CommonIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonIn& from);
  void MergeFrom(const CommonIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // @@protoc_insertion_point(class_scope:pb.CommonIn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TokenDetail :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TokenDetail) */ {
 public:
  TokenDetail();
  virtual ~TokenDetail();

  TokenDetail(const TokenDetail& from);

  inline TokenDetail& operator=(const TokenDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TokenDetail(TokenDetail&& from) noexcept
    : TokenDetail() {
    *this = ::std::move(from);
  }

  inline TokenDetail& operator=(TokenDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TokenDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenDetail* internal_default_instance() {
    return reinterpret_cast<const TokenDetail*>(
               &_TokenDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TokenDetail* other);
  friend void swap(TokenDetail& a, TokenDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TokenDetail* New() const final {
    return CreateMaybeMessage<TokenDetail>(nullptr);
  }

  TokenDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TokenDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TokenDetail& from);
  void MergeFrom(const TokenDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bcname = 1;
  void clear_bcname();
  static const int kBcnameFieldNumber = 1;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // string balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  const ::std::string& balance() const;
  void set_balance(const ::std::string& value);
  #if LANG_CXX11
  void set_balance(::std::string&& value);
  #endif
  void set_balance(const char* value);
  void set_balance(const char* value, size_t size);
  ::std::string* mutable_balance();
  ::std::string* release_balance();
  void set_allocated_balance(::std::string* balance);

  // .pb.XChainErrorEnum error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  ::pb::XChainErrorEnum error() const;
  void set_error(::pb::XChainErrorEnum value);

  // @@protoc_insertion_point(class_scope:pb.TokenDetail)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::google::protobuf::internal::ArenaStringPtr balance_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class AddressStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AddressStatus) */ {
 public:
  AddressStatus();
  virtual ~AddressStatus();

  AddressStatus(const AddressStatus& from);

  inline AddressStatus& operator=(const AddressStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressStatus(AddressStatus&& from) noexcept
    : AddressStatus() {
    *this = ::std::move(from);
  }

  inline AddressStatus& operator=(AddressStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddressStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressStatus* internal_default_instance() {
    return reinterpret_cast<const AddressStatus*>(
               &_AddressStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AddressStatus* other);
  friend void swap(AddressStatus& a, AddressStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressStatus* New() const final {
    return CreateMaybeMessage<AddressStatus>(nullptr);
  }

  AddressStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressStatus& from);
  void MergeFrom(const AddressStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TokenDetail bcs = 3;
  int bcs_size() const;
  void clear_bcs();
  static const int kBcsFieldNumber = 3;
  ::pb::TokenDetail* mutable_bcs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TokenDetail >*
      mutable_bcs();
  const ::pb::TokenDetail& bcs(int index) const;
  ::pb::TokenDetail* add_bcs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TokenDetail >&
      bcs() const;

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // @@protoc_insertion_point(class_scope:pb.AddressStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TokenDetail > bcs_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::pb::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxInput :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxInput) */ {
 public:
  TxInput();
  virtual ~TxInput();

  TxInput(const TxInput& from);

  inline TxInput& operator=(const TxInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInput(TxInput&& from) noexcept
    : TxInput() {
    *this = ::std::move(from);
  }

  inline TxInput& operator=(TxInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInput* internal_default_instance() {
    return reinterpret_cast<const TxInput*>(
               &_TxInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TxInput* other);
  friend void swap(TxInput& a, TxInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInput* New() const final {
    return CreateMaybeMessage<TxInput>(nullptr);
  }

  TxInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxInput& from);
  void MergeFrom(const TxInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ref_txid = 1;
  void clear_ref_txid();
  static const int kRefTxidFieldNumber = 1;
  const ::std::string& ref_txid() const;
  void set_ref_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_txid(::std::string&& value);
  #endif
  void set_ref_txid(const char* value);
  void set_ref_txid(const void* value, size_t size);
  ::std::string* mutable_ref_txid();
  ::std::string* release_ref_txid();
  void set_allocated_ref_txid(::std::string* ref_txid);

  // bytes from_addr = 5;
  void clear_from_addr();
  static const int kFromAddrFieldNumber = 5;
  const ::std::string& from_addr() const;
  void set_from_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_addr(::std::string&& value);
  #endif
  void set_from_addr(const char* value);
  void set_from_addr(const void* value, size_t size);
  ::std::string* mutable_from_addr();
  ::std::string* release_from_addr();
  void set_allocated_from_addr(::std::string* from_addr);

  // bytes amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // int32 ref_offset = 2;
  void clear_ref_offset();
  static const int kRefOffsetFieldNumber = 2;
  ::google::protobuf::int32 ref_offset() const;
  void set_ref_offset(::google::protobuf::int32 value);

  // int64 frozen_height = 7;
  void clear_frozen_height();
  static const int kFrozenHeightFieldNumber = 7;
  ::google::protobuf::int64 frozen_height() const;
  void set_frozen_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TxInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ref_txid_;
  ::google::protobuf::internal::ArenaStringPtr from_addr_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::int32 ref_offset_;
  ::google::protobuf::int64 frozen_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxOutput :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxOutput) */ {
 public:
  TxOutput();
  virtual ~TxOutput();

  TxOutput(const TxOutput& from);

  inline TxOutput& operator=(const TxOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxOutput(TxOutput&& from) noexcept
    : TxOutput() {
    *this = ::std::move(from);
  }

  inline TxOutput& operator=(TxOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxOutput* internal_default_instance() {
    return reinterpret_cast<const TxOutput*>(
               &_TxOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TxOutput* other);
  friend void swap(TxOutput& a, TxOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxOutput* New() const final {
    return CreateMaybeMessage<TxOutput>(nullptr);
  }

  TxOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxOutput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxOutput& from);
  void MergeFrom(const TxOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // bytes to_addr = 2;
  void clear_to_addr();
  static const int kToAddrFieldNumber = 2;
  const ::std::string& to_addr() const;
  void set_to_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_to_addr(::std::string&& value);
  #endif
  void set_to_addr(const char* value);
  void set_to_addr(const void* value, size_t size);
  ::std::string* mutable_to_addr();
  ::std::string* release_to_addr();
  void set_allocated_to_addr(::std::string* to_addr);

  // int64 frozen_height = 4;
  void clear_frozen_height();
  static const int kFrozenHeightFieldNumber = 4;
  ::google::protobuf::int64 frozen_height() const;
  void set_frozen_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TxOutput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr to_addr_;
  ::google::protobuf::int64 frozen_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TxInput tx_inputs = 3;
  int tx_inputs_size() const;
  void clear_tx_inputs();
  static const int kTxInputsFieldNumber = 3;
  ::pb::TxInput* mutable_tx_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxInput >*
      mutable_tx_inputs();
  const ::pb::TxInput& tx_inputs(int index) const;
  ::pb::TxInput* add_tx_inputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxInput >&
      tx_inputs() const;

  // repeated .pb.TxOutput tx_outputs = 4;
  int tx_outputs_size() const;
  void clear_tx_outputs();
  static const int kTxOutputsFieldNumber = 4;
  ::pb::TxOutput* mutable_tx_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >*
      mutable_tx_outputs();
  const ::pb::TxOutput& tx_outputs(int index) const;
  ::pb::TxOutput* add_tx_outputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >&
      tx_outputs() const;

  // repeated .pb.TxInputExt tx_inputs_ext = 23;
  int tx_inputs_ext_size() const;
  void clear_tx_inputs_ext();
  static const int kTxInputsExtFieldNumber = 23;
  ::pb::TxInputExt* mutable_tx_inputs_ext(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxInputExt >*
      mutable_tx_inputs_ext();
  const ::pb::TxInputExt& tx_inputs_ext(int index) const;
  ::pb::TxInputExt* add_tx_inputs_ext();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxInputExt >&
      tx_inputs_ext() const;

  // repeated .pb.TxOutputExt tx_outputs_ext = 24;
  int tx_outputs_ext_size() const;
  void clear_tx_outputs_ext();
  static const int kTxOutputsExtFieldNumber = 24;
  ::pb::TxOutputExt* mutable_tx_outputs_ext(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutputExt >*
      mutable_tx_outputs_ext();
  const ::pb::TxOutputExt& tx_outputs_ext(int index) const;
  ::pb::TxOutputExt* add_tx_outputs_ext();
  const ::google::protobuf::RepeatedPtrField< ::pb::TxOutputExt >&
      tx_outputs_ext() const;

  // repeated .pb.InvokeRequest contract_requests = 25;
  int contract_requests_size() const;
  void clear_contract_requests();
  static const int kContractRequestsFieldNumber = 25;
  ::pb::InvokeRequest* mutable_contract_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::InvokeRequest >*
      mutable_contract_requests();
  const ::pb::InvokeRequest& contract_requests(int index) const;
  ::pb::InvokeRequest* add_contract_requests();
  const ::google::protobuf::RepeatedPtrField< ::pb::InvokeRequest >&
      contract_requests() const;

  // repeated string auth_require = 27;
  int auth_require_size() const;
  void clear_auth_require();
  static const int kAuthRequireFieldNumber = 27;
  const ::std::string& auth_require(int index) const;
  ::std::string* mutable_auth_require(int index);
  void set_auth_require(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_auth_require(int index, ::std::string&& value);
  #endif
  void set_auth_require(int index, const char* value);
  void set_auth_require(int index, const char* value, size_t size);
  ::std::string* add_auth_require();
  void add_auth_require(const ::std::string& value);
  #if LANG_CXX11
  void add_auth_require(::std::string&& value);
  #endif
  void add_auth_require(const char* value);
  void add_auth_require(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& auth_require() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_auth_require();

  // repeated .pb.SignatureInfo initiator_signs = 28;
  int initiator_signs_size() const;
  void clear_initiator_signs();
  static const int kInitiatorSignsFieldNumber = 28;
  ::pb::SignatureInfo* mutable_initiator_signs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >*
      mutable_initiator_signs();
  const ::pb::SignatureInfo& initiator_signs(int index) const;
  ::pb::SignatureInfo* add_initiator_signs();
  const ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >&
      initiator_signs() const;

  // repeated .pb.SignatureInfo auth_require_signs = 29;
  int auth_require_signs_size() const;
  void clear_auth_require_signs();
  static const int kAuthRequireSignsFieldNumber = 29;
  ::pb::SignatureInfo* mutable_auth_require_signs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >*
      mutable_auth_require_signs();
  const ::pb::SignatureInfo& auth_require_signs(int index) const;
  ::pb::SignatureInfo* add_auth_require_signs();
  const ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >&
      auth_require_signs() const;

  // bytes txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // bytes blockid = 2;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // bytes desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string nonce = 8;
  void clear_nonce();
  static const int kNonceFieldNumber = 8;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // string initiator = 26;
  void clear_initiator();
  static const int kInitiatorFieldNumber = 26;
  const ::std::string& initiator() const;
  void set_initiator(const ::std::string& value);
  #if LANG_CXX11
  void set_initiator(::std::string&& value);
  #endif
  void set_initiator(const char* value);
  void set_initiator(const char* value, size_t size);
  ::std::string* mutable_initiator();
  ::std::string* release_initiator();
  void set_allocated_initiator(::std::string* initiator);

  // int64 timestamp = 9;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // bool coinbase = 7;
  void clear_coinbase();
  static const int kCoinbaseFieldNumber = 7;
  bool coinbase() const;
  void set_coinbase(bool value);

  // bool autogen = 11;
  void clear_autogen();
  static const int kAutogenFieldNumber = 11;
  bool autogen() const;
  void set_autogen(bool value);

  // int32 version = 10;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int64 received_timestamp = 30;
  void clear_received_timestamp();
  static const int kReceivedTimestampFieldNumber = 30;
  ::google::protobuf::int64 received_timestamp() const;
  void set_received_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.Transaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxInput > tx_inputs_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutput > tx_outputs_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxInputExt > tx_inputs_ext_;
  ::google::protobuf::RepeatedPtrField< ::pb::TxOutputExt > tx_outputs_ext_;
  ::google::protobuf::RepeatedPtrField< ::pb::InvokeRequest > contract_requests_;
  ::google::protobuf::RepeatedPtrField<::std::string> auth_require_;
  ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo > initiator_signs_;
  ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo > auth_require_signs_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr initiator_;
  ::google::protobuf::int64 timestamp_;
  bool coinbase_;
  bool autogen_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int64 received_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class LedgerMeta :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.LedgerMeta) */ {
 public:
  LedgerMeta();
  virtual ~LedgerMeta();

  LedgerMeta(const LedgerMeta& from);

  inline LedgerMeta& operator=(const LedgerMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LedgerMeta(LedgerMeta&& from) noexcept
    : LedgerMeta() {
    *this = ::std::move(from);
  }

  inline LedgerMeta& operator=(LedgerMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LedgerMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedgerMeta* internal_default_instance() {
    return reinterpret_cast<const LedgerMeta*>(
               &_LedgerMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(LedgerMeta* other);
  friend void swap(LedgerMeta& a, LedgerMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedgerMeta* New() const final {
    return CreateMaybeMessage<LedgerMeta>(nullptr);
  }

  LedgerMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LedgerMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LedgerMeta& from);
  void MergeFrom(const LedgerMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes root_blockid = 1;
  void clear_root_blockid();
  static const int kRootBlockidFieldNumber = 1;
  const ::std::string& root_blockid() const;
  void set_root_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_root_blockid(::std::string&& value);
  #endif
  void set_root_blockid(const char* value);
  void set_root_blockid(const void* value, size_t size);
  ::std::string* mutable_root_blockid();
  ::std::string* release_root_blockid();
  void set_allocated_root_blockid(::std::string* root_blockid);

  // bytes tip_blockid = 2;
  void clear_tip_blockid();
  static const int kTipBlockidFieldNumber = 2;
  const ::std::string& tip_blockid() const;
  void set_tip_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_tip_blockid(::std::string&& value);
  #endif
  void set_tip_blockid(const char* value);
  void set_tip_blockid(const void* value, size_t size);
  ::std::string* mutable_tip_blockid();
  ::std::string* release_tip_blockid();
  void set_allocated_tip_blockid(::std::string* tip_blockid);

  // int64 trunk_height = 3;
  void clear_trunk_height();
  static const int kTrunkHeightFieldNumber = 3;
  ::google::protobuf::int64 trunk_height() const;
  void set_trunk_height(::google::protobuf::int64 value);

  // int64 max_block_size = 4;
  void clear_max_block_size();
  static const int kMaxBlockSizeFieldNumber = 4;
  ::google::protobuf::int64 max_block_size() const;
  void set_max_block_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.LedgerMeta)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr root_blockid_;
  ::google::protobuf::internal::ArenaStringPtr tip_blockid_;
  ::google::protobuf::int64 trunk_height_;
  ::google::protobuf::int64 max_block_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class UtxoMeta :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UtxoMeta) */ {
 public:
  UtxoMeta();
  virtual ~UtxoMeta();

  UtxoMeta(const UtxoMeta& from);

  inline UtxoMeta& operator=(const UtxoMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UtxoMeta(UtxoMeta&& from) noexcept
    : UtxoMeta() {
    *this = ::std::move(from);
  }

  inline UtxoMeta& operator=(UtxoMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UtxoMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtxoMeta* internal_default_instance() {
    return reinterpret_cast<const UtxoMeta*>(
               &_UtxoMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(UtxoMeta* other);
  friend void swap(UtxoMeta& a, UtxoMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UtxoMeta* New() const final {
    return CreateMaybeMessage<UtxoMeta>(nullptr);
  }

  UtxoMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UtxoMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UtxoMeta& from);
  void MergeFrom(const UtxoMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtxoMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lock_key_list = 2;
  int lock_key_list_size() const;
  void clear_lock_key_list();
  static const int kLockKeyListFieldNumber = 2;
  const ::std::string& lock_key_list(int index) const;
  ::std::string* mutable_lock_key_list(int index);
  void set_lock_key_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lock_key_list(int index, ::std::string&& value);
  #endif
  void set_lock_key_list(int index, const char* value);
  void set_lock_key_list(int index, const char* value, size_t size);
  ::std::string* add_lock_key_list();
  void add_lock_key_list(const ::std::string& value);
  #if LANG_CXX11
  void add_lock_key_list(::std::string&& value);
  #endif
  void add_lock_key_list(const char* value);
  void add_lock_key_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& lock_key_list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_lock_key_list();

  // bytes latest_blockid = 1;
  void clear_latest_blockid();
  static const int kLatestBlockidFieldNumber = 1;
  const ::std::string& latest_blockid() const;
  void set_latest_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_latest_blockid(::std::string&& value);
  #endif
  void set_latest_blockid(const char* value);
  void set_latest_blockid(const void* value, size_t size);
  ::std::string* mutable_latest_blockid();
  ::std::string* release_latest_blockid();
  void set_allocated_latest_blockid(::std::string* latest_blockid);

  // string utxo_total = 3;
  void clear_utxo_total();
  static const int kUtxoTotalFieldNumber = 3;
  const ::std::string& utxo_total() const;
  void set_utxo_total(const ::std::string& value);
  #if LANG_CXX11
  void set_utxo_total(::std::string&& value);
  #endif
  void set_utxo_total(const char* value);
  void set_utxo_total(const char* value, size_t size);
  ::std::string* mutable_utxo_total();
  ::std::string* release_utxo_total();
  void set_allocated_utxo_total(::std::string* utxo_total);

  // int64 avgDelay = 4;
  void clear_avgdelay();
  static const int kAvgDelayFieldNumber = 4;
  ::google::protobuf::int64 avgdelay() const;
  void set_avgdelay(::google::protobuf::int64 value);

  // int64 unconfirmTxAmount = 5;
  void clear_unconfirmtxamount();
  static const int kUnconfirmTxAmountFieldNumber = 5;
  ::google::protobuf::int64 unconfirmtxamount() const;
  void set_unconfirmtxamount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.UtxoMeta)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> lock_key_list_;
  ::google::protobuf::internal::ArenaStringPtr latest_blockid_;
  ::google::protobuf::internal::ArenaStringPtr utxo_total_;
  ::google::protobuf::int64 avgdelay_;
  ::google::protobuf::int64 unconfirmtxamount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class InternalBlock_FailedTxsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<InternalBlock_FailedTxsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<InternalBlock_FailedTxsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InternalBlock_FailedTxsEntry_DoNotUse();
  InternalBlock_FailedTxsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const InternalBlock_FailedTxsEntry_DoNotUse& other);
  static const InternalBlock_FailedTxsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InternalBlock_FailedTxsEntry_DoNotUse*>(&_InternalBlock_FailedTxsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class InternalBlock :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InternalBlock) */ {
 public:
  InternalBlock();
  virtual ~InternalBlock();

  InternalBlock(const InternalBlock& from);

  inline InternalBlock& operator=(const InternalBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalBlock(InternalBlock&& from) noexcept
    : InternalBlock() {
    *this = ::std::move(from);
  }

  inline InternalBlock& operator=(InternalBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InternalBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalBlock* internal_default_instance() {
    return reinterpret_cast<const InternalBlock*>(
               &_InternalBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(InternalBlock* other);
  friend void swap(InternalBlock& a, InternalBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalBlock* New() const final {
    return CreateMaybeMessage<InternalBlock>(nullptr);
  }

  InternalBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InternalBlock& from);
  void MergeFrom(const InternalBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .pb.Transaction transactions = 11;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 11;
  ::pb::Transaction* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Transaction >*
      mutable_transactions();
  const ::pb::Transaction& transactions(int index) const;
  ::pb::Transaction* add_transactions();
  const ::google::protobuf::RepeatedPtrField< ::pb::Transaction >&
      transactions() const;

  // repeated bytes merkle_tree = 13;
  int merkle_tree_size() const;
  void clear_merkle_tree();
  static const int kMerkleTreeFieldNumber = 13;
  const ::std::string& merkle_tree(int index) const;
  ::std::string* mutable_merkle_tree(int index);
  void set_merkle_tree(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_merkle_tree(int index, ::std::string&& value);
  #endif
  void set_merkle_tree(int index, const char* value);
  void set_merkle_tree(int index, const void* value, size_t size);
  ::std::string* add_merkle_tree();
  void add_merkle_tree(const ::std::string& value);
  #if LANG_CXX11
  void add_merkle_tree(::std::string&& value);
  #endif
  void add_merkle_tree(const char* value);
  void add_merkle_tree(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& merkle_tree() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_merkle_tree();

  // map<string, string> failed_txs = 18;
  int failed_txs_size() const;
  void clear_failed_txs();
  static const int kFailedTxsFieldNumber = 18;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      failed_txs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_failed_txs();

  // bytes blockid = 3;
  void clear_blockid();
  static const int kBlockidFieldNumber = 3;
  const ::std::string& blockid() const;
  void set_blockid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockid(::std::string&& value);
  #endif
  void set_blockid(const char* value);
  void set_blockid(const void* value, size_t size);
  ::std::string* mutable_blockid();
  ::std::string* release_blockid();
  void set_allocated_blockid(::std::string* blockid);

  // bytes pre_hash = 4;
  void clear_pre_hash();
  static const int kPreHashFieldNumber = 4;
  const ::std::string& pre_hash() const;
  void set_pre_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_hash(::std::string&& value);
  #endif
  void set_pre_hash(const char* value);
  void set_pre_hash(const void* value, size_t size);
  ::std::string* mutable_pre_hash();
  ::std::string* release_pre_hash();
  void set_allocated_pre_hash(::std::string* pre_hash);

  // bytes proposer = 5;
  void clear_proposer();
  static const int kProposerFieldNumber = 5;
  const ::std::string& proposer() const;
  void set_proposer(const ::std::string& value);
  #if LANG_CXX11
  void set_proposer(::std::string&& value);
  #endif
  void set_proposer(const char* value);
  void set_proposer(const void* value, size_t size);
  ::std::string* mutable_proposer();
  ::std::string* release_proposer();
  void set_allocated_proposer(::std::string* proposer);

  // bytes sign = 6;
  void clear_sign();
  static const int kSignFieldNumber = 6;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // bytes pubkey = 7;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 7;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // bytes merkle_root = 8;
  void clear_merkle_root();
  static const int kMerkleRootFieldNumber = 8;
  const ::std::string& merkle_root() const;
  void set_merkle_root(const ::std::string& value);
  #if LANG_CXX11
  void set_merkle_root(::std::string&& value);
  #endif
  void set_merkle_root(const char* value);
  void set_merkle_root(const void* value, size_t size);
  ::std::string* mutable_merkle_root();
  ::std::string* release_merkle_root();
  void set_allocated_merkle_root(::std::string* merkle_root);

  // bytes next_hash = 15;
  void clear_next_hash();
  static const int kNextHashFieldNumber = 15;
  const ::std::string& next_hash() const;
  void set_next_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_next_hash(::std::string&& value);
  #endif
  void set_next_hash(const char* value);
  void set_next_hash(const void* value, size_t size);
  ::std::string* mutable_next_hash();
  ::std::string* release_next_hash();
  void set_allocated_next_hash(::std::string* next_hash);

  // int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int32 nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  ::google::protobuf::int32 nonce() const;
  void set_nonce(::google::protobuf::int32 value);

  // int64 height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // int64 timestamp = 10;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 tx_count = 12;
  void clear_tx_count();
  static const int kTxCountFieldNumber = 12;
  ::google::protobuf::int32 tx_count() const;
  void set_tx_count(::google::protobuf::int32 value);

  // bool in_trunk = 14;
  void clear_in_trunk();
  static const int kInTrunkFieldNumber = 14;
  bool in_trunk() const;
  void set_in_trunk(bool value);

  // int64 curTerm = 16;
  void clear_curterm();
  static const int kCurTermFieldNumber = 16;
  ::google::protobuf::int64 curterm() const;
  void set_curterm(::google::protobuf::int64 value);

  // int64 curBlockNum = 17;
  void clear_curblocknum();
  static const int kCurBlockNumFieldNumber = 17;
  ::google::protobuf::int64 curblocknum() const;
  void set_curblocknum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.InternalBlock)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Transaction > transactions_;
  ::google::protobuf::RepeatedPtrField<::std::string> merkle_tree_;
  ::google::protobuf::internal::MapField<
      InternalBlock_FailedTxsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > failed_txs_;
  ::google::protobuf::internal::ArenaStringPtr blockid_;
  ::google::protobuf::internal::ArenaStringPtr pre_hash_;
  ::google::protobuf::internal::ArenaStringPtr proposer_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr merkle_root_;
  ::google::protobuf::internal::ArenaStringPtr next_hash_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 nonce_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 tx_count_;
  bool in_trunk_;
  ::google::protobuf::int64 curterm_;
  ::google::protobuf::int64 curblocknum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class BCStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BCStatus) */ {
 public:
  BCStatus();
  virtual ~BCStatus();

  BCStatus(const BCStatus& from);

  inline BCStatus& operator=(const BCStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BCStatus(BCStatus&& from) noexcept
    : BCStatus() {
    *this = ::std::move(from);
  }

  inline BCStatus& operator=(BCStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BCStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCStatus* internal_default_instance() {
    return reinterpret_cast<const BCStatus*>(
               &_BCStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(BCStatus* other);
  friend void swap(BCStatus& a, BCStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BCStatus* New() const final {
    return CreateMaybeMessage<BCStatus>(nullptr);
  }

  BCStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BCStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BCStatus& from);
  void MergeFrom(const BCStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bcname = 2;
  void clear_bcname();
  static const int kBcnameFieldNumber = 2;
  const ::std::string& bcname() const;
  void set_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bcname(::std::string&& value);
  #endif
  void set_bcname(const char* value);
  void set_bcname(const char* value, size_t size);
  ::std::string* mutable_bcname();
  ::std::string* release_bcname();
  void set_allocated_bcname(::std::string* bcname);

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // .pb.LedgerMeta meta = 3;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 3;
  const ::pb::LedgerMeta& meta() const;
  ::pb::LedgerMeta* release_meta();
  ::pb::LedgerMeta* mutable_meta();
  void set_allocated_meta(::pb::LedgerMeta* meta);

  // .pb.InternalBlock block = 4;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 4;
  const ::pb::InternalBlock& block() const;
  ::pb::InternalBlock* release_block();
  ::pb::InternalBlock* mutable_block();
  void set_allocated_block(::pb::InternalBlock* block);

  // .pb.UtxoMeta utxoMeta = 5;
  bool has_utxometa() const;
  void clear_utxometa();
  static const int kUtxoMetaFieldNumber = 5;
  const ::pb::UtxoMeta& utxometa() const;
  ::pb::UtxoMeta* release_utxometa();
  ::pb::UtxoMeta* mutable_utxometa();
  void set_allocated_utxometa(::pb::UtxoMeta* utxometa);

  // @@protoc_insertion_point(class_scope:pb.BCStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bcname_;
  ::pb::Header* header_;
  ::pb::LedgerMeta* meta_;
  ::pb::InternalBlock* block_;
  ::pb::UtxoMeta* utxometa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class Speeds_SumSpeedsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Speeds_SumSpeedsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Speeds_SumSpeedsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  Speeds_SumSpeedsEntry_DoNotUse();
  Speeds_SumSpeedsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Speeds_SumSpeedsEntry_DoNotUse& other);
  static const Speeds_SumSpeedsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Speeds_SumSpeedsEntry_DoNotUse*>(&_Speeds_SumSpeedsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Speeds_BcSpeedsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Speeds_BcSpeedsEntry_DoNotUse, 
    ::std::string, ::pb::BCSpeeds,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Speeds_BcSpeedsEntry_DoNotUse, 
    ::std::string, ::pb::BCSpeeds,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Speeds_BcSpeedsEntry_DoNotUse();
  Speeds_BcSpeedsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Speeds_BcSpeedsEntry_DoNotUse& other);
  static const Speeds_BcSpeedsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Speeds_BcSpeedsEntry_DoNotUse*>(&_Speeds_BcSpeedsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Speeds :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Speeds) */ {
 public:
  Speeds();
  virtual ~Speeds();

  Speeds(const Speeds& from);

  inline Speeds& operator=(const Speeds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Speeds(Speeds&& from) noexcept
    : Speeds() {
    *this = ::std::move(from);
  }

  inline Speeds& operator=(Speeds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Speeds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Speeds* internal_default_instance() {
    return reinterpret_cast<const Speeds*>(
               &_Speeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Speeds* other);
  friend void swap(Speeds& a, Speeds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Speeds* New() const final {
    return CreateMaybeMessage<Speeds>(nullptr);
  }

  Speeds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Speeds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Speeds& from);
  void MergeFrom(const Speeds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Speeds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, double> SumSpeeds = 1;
  int sumspeeds_size() const;
  void clear_sumspeeds();
  static const int kSumSpeedsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, double >&
      sumspeeds() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_sumspeeds();

  // map<string, .pb.BCSpeeds> BcSpeeds = 2;
  int bcspeeds_size() const;
  void clear_bcspeeds();
  static const int kBcSpeedsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >&
      bcspeeds() const;
  ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >*
      mutable_bcspeeds();

  // @@protoc_insertion_point(class_scope:pb.Speeds)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Speeds_SumSpeedsEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > sumspeeds_;
  ::google::protobuf::internal::MapField<
      Speeds_BcSpeedsEntry_DoNotUse,
      ::std::string, ::pb::BCSpeeds,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bcspeeds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class BCSpeeds_BcSpeedEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BCSpeeds_BcSpeedEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<BCSpeeds_BcSpeedEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  BCSpeeds_BcSpeedEntry_DoNotUse();
  BCSpeeds_BcSpeedEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BCSpeeds_BcSpeedEntry_DoNotUse& other);
  static const BCSpeeds_BcSpeedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BCSpeeds_BcSpeedEntry_DoNotUse*>(&_BCSpeeds_BcSpeedEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BCSpeeds :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BCSpeeds) */ {
 public:
  BCSpeeds();
  virtual ~BCSpeeds();

  BCSpeeds(const BCSpeeds& from);

  inline BCSpeeds& operator=(const BCSpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BCSpeeds(BCSpeeds&& from) noexcept
    : BCSpeeds() {
    *this = ::std::move(from);
  }

  inline BCSpeeds& operator=(BCSpeeds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BCSpeeds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCSpeeds* internal_default_instance() {
    return reinterpret_cast<const BCSpeeds*>(
               &_BCSpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(BCSpeeds* other);
  friend void swap(BCSpeeds& a, BCSpeeds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BCSpeeds* New() const final {
    return CreateMaybeMessage<BCSpeeds>(nullptr);
  }

  BCSpeeds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BCSpeeds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BCSpeeds& from);
  void MergeFrom(const BCSpeeds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCSpeeds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, double> BcSpeed = 1;
  int bcspeed_size() const;
  void clear_bcspeed();
  static const int kBcSpeedFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, double >&
      bcspeed() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_bcspeed();

  // @@protoc_insertion_point(class_scope:pb.BCSpeeds)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BCSpeeds_BcSpeedEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > bcspeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class SystemsStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SystemsStatus) */ {
 public:
  SystemsStatus();
  virtual ~SystemsStatus();

  SystemsStatus(const SystemsStatus& from);

  inline SystemsStatus& operator=(const SystemsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemsStatus(SystemsStatus&& from) noexcept
    : SystemsStatus() {
    *this = ::std::move(from);
  }

  inline SystemsStatus& operator=(SystemsStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SystemsStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemsStatus* internal_default_instance() {
    return reinterpret_cast<const SystemsStatus*>(
               &_SystemsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(SystemsStatus* other);
  friend void swap(SystemsStatus& a, SystemsStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemsStatus* New() const final {
    return CreateMaybeMessage<SystemsStatus>(nullptr);
  }

  SystemsStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemsStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemsStatus& from);
  void MergeFrom(const SystemsStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemsStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BCStatus bcs_status = 2;
  int bcs_status_size() const;
  void clear_bcs_status();
  static const int kBcsStatusFieldNumber = 2;
  ::pb::BCStatus* mutable_bcs_status(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::BCStatus >*
      mutable_bcs_status();
  const ::pb::BCStatus& bcs_status(int index) const;
  ::pb::BCStatus* add_bcs_status();
  const ::google::protobuf::RepeatedPtrField< ::pb::BCStatus >&
      bcs_status() const;

  // repeated string peerUrls = 4;
  int peerurls_size() const;
  void clear_peerurls();
  static const int kPeerUrlsFieldNumber = 4;
  const ::std::string& peerurls(int index) const;
  ::std::string* mutable_peerurls(int index);
  void set_peerurls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peerurls(int index, ::std::string&& value);
  #endif
  void set_peerurls(int index, const char* value);
  void set_peerurls(int index, const char* value, size_t size);
  ::std::string* add_peerurls();
  void add_peerurls(const ::std::string& value);
  #if LANG_CXX11
  void add_peerurls(::std::string&& value);
  #endif
  void add_peerurls(const char* value);
  void add_peerurls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& peerurls() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_peerurls();

  // .pb.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::pb::Header& header() const;
  ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);

  // .pb.Speeds speeds = 3;
  bool has_speeds() const;
  void clear_speeds();
  static const int kSpeedsFieldNumber = 3;
  const ::pb::Speeds& speeds() const;
  ::pb::Speeds* release_speeds();
  ::pb::Speeds* mutable_speeds();
  void set_allocated_speeds(::pb::Speeds* speeds);

  // @@protoc_insertion_point(class_scope:pb.SystemsStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::BCStatus > bcs_status_;
  ::google::protobuf::RepeatedPtrField<::std::string> peerurls_;
  ::pb::Header* header_;
  ::pb::Speeds* speeds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class InvokeRequest_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<InvokeRequest_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<InvokeRequest_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  InvokeRequest_ArgsEntry_DoNotUse();
  InvokeRequest_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const InvokeRequest_ArgsEntry_DoNotUse& other);
  static const InvokeRequest_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeRequest_ArgsEntry_DoNotUse*>(&_InvokeRequest_ArgsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class InvokeRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InvokeRequest) */ {
 public:
  InvokeRequest();
  virtual ~InvokeRequest();

  InvokeRequest(const InvokeRequest& from);

  inline InvokeRequest& operator=(const InvokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InvokeRequest(InvokeRequest&& from) noexcept
    : InvokeRequest() {
    *this = ::std::move(from);
  }

  inline InvokeRequest& operator=(InvokeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InvokeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeRequest*>(
               &_InvokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(InvokeRequest* other);
  friend void swap(InvokeRequest& a, InvokeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InvokeRequest* New() const final {
    return CreateMaybeMessage<InvokeRequest>(nullptr);
  }

  InvokeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InvokeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InvokeRequest& from);
  void MergeFrom(const InvokeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> args = 4;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // repeated .pb.ResourceLimit resource_limits = 5;
  int resource_limits_size() const;
  void clear_resource_limits();
  static const int kResourceLimitsFieldNumber = 5;
  ::pb::ResourceLimit* mutable_resource_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::ResourceLimit >*
      mutable_resource_limits();
  const ::pb::ResourceLimit& resource_limits(int index) const;
  ::pb::ResourceLimit* add_resource_limits();
  const ::google::protobuf::RepeatedPtrField< ::pb::ResourceLimit >&
      resource_limits() const;

  // string module_name = 1;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // string contract_name = 2;
  void clear_contract_name();
  static const int kContractNameFieldNumber = 2;
  const ::std::string& contract_name() const;
  void set_contract_name(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_name(::std::string&& value);
  #endif
  void set_contract_name(const char* value);
  void set_contract_name(const char* value, size_t size);
  ::std::string* mutable_contract_name();
  ::std::string* release_contract_name();
  void set_allocated_contract_name(::std::string* contract_name);

  // string method_name = 3;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // @@protoc_insertion_point(class_scope:pb.InvokeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      InvokeRequest_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > args_;
  ::google::protobuf::RepeatedPtrField< ::pb::ResourceLimit > resource_limits_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr contract_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxInputExt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxInputExt) */ {
 public:
  TxInputExt();
  virtual ~TxInputExt();

  TxInputExt(const TxInputExt& from);

  inline TxInputExt& operator=(const TxInputExt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInputExt(TxInputExt&& from) noexcept
    : TxInputExt() {
    *this = ::std::move(from);
  }

  inline TxInputExt& operator=(TxInputExt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxInputExt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInputExt* internal_default_instance() {
    return reinterpret_cast<const TxInputExt*>(
               &_TxInputExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(TxInputExt* other);
  friend void swap(TxInputExt& a, TxInputExt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInputExt* New() const final {
    return CreateMaybeMessage<TxInputExt>(nullptr);
  }

  TxInputExt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInputExt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxInputExt& from);
  void MergeFrom(const TxInputExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInputExt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes ref_txid = 3;
  void clear_ref_txid();
  static const int kRefTxidFieldNumber = 3;
  const ::std::string& ref_txid() const;
  void set_ref_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_txid(::std::string&& value);
  #endif
  void set_ref_txid(const char* value);
  void set_ref_txid(const void* value, size_t size);
  ::std::string* mutable_ref_txid();
  ::std::string* release_ref_txid();
  void set_allocated_ref_txid(::std::string* ref_txid);

  // int32 ref_offset = 4;
  void clear_ref_offset();
  static const int kRefOffsetFieldNumber = 4;
  ::google::protobuf::int32 ref_offset() const;
  void set_ref_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TxInputExt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr ref_txid_;
  ::google::protobuf::int32 ref_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class TxOutputExt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TxOutputExt) */ {
 public:
  TxOutputExt();
  virtual ~TxOutputExt();

  TxOutputExt(const TxOutputExt& from);

  inline TxOutputExt& operator=(const TxOutputExt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxOutputExt(TxOutputExt&& from) noexcept
    : TxOutputExt() {
    *this = ::std::move(from);
  }

  inline TxOutputExt& operator=(TxOutputExt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TxOutputExt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxOutputExt* internal_default_instance() {
    return reinterpret_cast<const TxOutputExt*>(
               &_TxOutputExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(TxOutputExt* other);
  friend void swap(TxOutputExt& a, TxOutputExt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxOutputExt* New() const final {
    return CreateMaybeMessage<TxOutputExt>(nullptr);
  }

  TxOutputExt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxOutputExt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxOutputExt& from);
  void MergeFrom(const TxOutputExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxOutputExt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.TxOutputExt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class SignatureInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SignatureInfo) */ {
 public:
  SignatureInfo();
  virtual ~SignatureInfo();

  SignatureInfo(const SignatureInfo& from);

  inline SignatureInfo& operator=(const SignatureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignatureInfo(SignatureInfo&& from) noexcept
    : SignatureInfo() {
    *this = ::std::move(from);
  }

  inline SignatureInfo& operator=(SignatureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignatureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureInfo* internal_default_instance() {
    return reinterpret_cast<const SignatureInfo*>(
               &_SignatureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SignatureInfo* other);
  friend void swap(SignatureInfo& a, SignatureInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignatureInfo* New() const final {
    return CreateMaybeMessage<SignatureInfo>(nullptr);
  }

  SignatureInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignatureInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignatureInfo& from);
  void MergeFrom(const SignatureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PublicKey = 1;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes Sign = 2;
  void clear_sign();
  static const int kSignFieldNumber = 2;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:pb.SignatureInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// -------------------------------------------------------------------

class ResourceLimit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ResourceLimit) */ {
 public:
  ResourceLimit();
  virtual ~ResourceLimit();

  ResourceLimit(const ResourceLimit& from);

  inline ResourceLimit& operator=(const ResourceLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceLimit(ResourceLimit&& from) noexcept
    : ResourceLimit() {
    *this = ::std::move(from);
  }

  inline ResourceLimit& operator=(ResourceLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceLimit* internal_default_instance() {
    return reinterpret_cast<const ResourceLimit*>(
               &_ResourceLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ResourceLimit* other);
  friend void swap(ResourceLimit& a, ResourceLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceLimit* New() const final {
    return CreateMaybeMessage<ResourceLimit>(nullptr);
  }

  ResourceLimit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceLimit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceLimit& from);
  void MergeFrom(const ResourceLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // .pb.ResourceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb::ResourceType type() const;
  void set_type(::pb::ResourceType value);

  // @@protoc_insertion_point(class_scope:pb.ResourceLimit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 limit_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string logid = 1;
inline void Header::clear_logid() {
  logid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::logid() const {
  // @@protoc_insertion_point(field_get:pb.Header.logid)
  return logid_.GetNoArena();
}
inline void Header::set_logid(const ::std::string& value) {
  
  logid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Header.logid)
}
#if LANG_CXX11
inline void Header::set_logid(::std::string&& value) {
  
  logid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Header.logid)
}
#endif
inline void Header::set_logid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Header.logid)
}
inline void Header::set_logid(const char* value, size_t size) {
  
  logid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Header.logid)
}
inline ::std::string* Header::mutable_logid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Header.logid)
  return logid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_logid() {
  // @@protoc_insertion_point(field_release:pb.Header.logid)
  
  return logid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_logid(::std::string* logid) {
  if (logid != nullptr) {
    
  } else {
    
  }
  logid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logid);
  // @@protoc_insertion_point(field_set_allocated:pb.Header.logid)
}

// string from_node = 2;
inline void Header::clear_from_node() {
  from_node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::from_node() const {
  // @@protoc_insertion_point(field_get:pb.Header.from_node)
  return from_node_.GetNoArena();
}
inline void Header::set_from_node(const ::std::string& value) {
  
  from_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Header.from_node)
}
#if LANG_CXX11
inline void Header::set_from_node(::std::string&& value) {
  
  from_node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Header.from_node)
}
#endif
inline void Header::set_from_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Header.from_node)
}
inline void Header::set_from_node(const char* value, size_t size) {
  
  from_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Header.from_node)
}
inline ::std::string* Header::mutable_from_node() {
  
  // @@protoc_insertion_point(field_mutable:pb.Header.from_node)
  return from_node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_from_node() {
  // @@protoc_insertion_point(field_release:pb.Header.from_node)
  
  return from_node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_from_node(::std::string* from_node) {
  if (from_node != nullptr) {
    
  } else {
    
  }
  from_node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_node);
  // @@protoc_insertion_point(field_set_allocated:pb.Header.from_node)
}

// .pb.XChainErrorEnum error = 3;
inline void Header::clear_error() {
  error_ = 0;
}
inline ::pb::XChainErrorEnum Header::error() const {
  // @@protoc_insertion_point(field_get:pb.Header.error)
  return static_cast< ::pb::XChainErrorEnum >(error_);
}
inline void Header::set_error(::pb::XChainErrorEnum value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:pb.Header.error)
}

// -------------------------------------------------------------------

// TxDataAccount

// string address = 1;
inline void TxDataAccount::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxDataAccount::address() const {
  // @@protoc_insertion_point(field_get:pb.TxDataAccount.address)
  return address_.GetNoArena();
}
inline void TxDataAccount::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxDataAccount.address)
}
#if LANG_CXX11
inline void TxDataAccount::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxDataAccount.address)
}
#endif
inline void TxDataAccount::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxDataAccount.address)
}
inline void TxDataAccount::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxDataAccount.address)
}
inline ::std::string* TxDataAccount::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxDataAccount.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxDataAccount::release_address() {
  // @@protoc_insertion_point(field_release:pb.TxDataAccount.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxDataAccount::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.TxDataAccount.address)
}

// string amount = 2;
inline void TxDataAccount::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxDataAccount::amount() const {
  // @@protoc_insertion_point(field_get:pb.TxDataAccount.amount)
  return amount_.GetNoArena();
}
inline void TxDataAccount::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxDataAccount.amount)
}
#if LANG_CXX11
inline void TxDataAccount::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxDataAccount.amount)
}
#endif
inline void TxDataAccount::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxDataAccount.amount)
}
inline void TxDataAccount::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxDataAccount.amount)
}
inline ::std::string* TxDataAccount::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxDataAccount.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxDataAccount::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TxDataAccount.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxDataAccount::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TxDataAccount.amount)
}

// int64 frozen_height = 3;
inline void TxDataAccount::clear_frozen_height() {
  frozen_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxDataAccount::frozen_height() const {
  // @@protoc_insertion_point(field_get:pb.TxDataAccount.frozen_height)
  return frozen_height_;
}
inline void TxDataAccount::set_frozen_height(::google::protobuf::int64 value) {
  
  frozen_height_ = value;
  // @@protoc_insertion_point(field_set:pb.TxDataAccount.frozen_height)
}

// -------------------------------------------------------------------

// TxData

// .pb.Header header = 13;
inline bool TxData::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void TxData::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& TxData::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.TxData.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* TxData::release_header() {
  // @@protoc_insertion_point(field_release:pb.TxData.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* TxData::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TxData.header)
  return header_;
}
inline void TxData::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.header)
}

// bytes txid = 1;
inline void TxData::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::txid() const {
  // @@protoc_insertion_point(field_get:pb.TxData.txid)
  return txid_.GetNoArena();
}
inline void TxData::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.txid)
}
#if LANG_CXX11
inline void TxData::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.txid)
}
#endif
inline void TxData::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.txid)
}
inline void TxData::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.txid)
}
inline ::std::string* TxData::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_txid() {
  // @@protoc_insertion_point(field_release:pb.TxData.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_txid(::std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.txid)
}

// string bcname = 2;
inline void TxData::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::bcname() const {
  // @@protoc_insertion_point(field_get:pb.TxData.bcname)
  return bcname_.GetNoArena();
}
inline void TxData::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.bcname)
}
#if LANG_CXX11
inline void TxData::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.bcname)
}
#endif
inline void TxData::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.bcname)
}
inline void TxData::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.bcname)
}
inline ::std::string* TxData::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.TxData.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.bcname)
}

// string from_addr = 3;
inline void TxData::clear_from_addr() {
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::from_addr() const {
  // @@protoc_insertion_point(field_get:pb.TxData.from_addr)
  return from_addr_.GetNoArena();
}
inline void TxData::set_from_addr(const ::std::string& value) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.from_addr)
}
#if LANG_CXX11
inline void TxData::set_from_addr(::std::string&& value) {
  
  from_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.from_addr)
}
#endif
inline void TxData::set_from_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.from_addr)
}
inline void TxData::set_from_addr(const char* value, size_t size) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.from_addr)
}
inline ::std::string* TxData::mutable_from_addr() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.from_addr)
  return from_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_from_addr() {
  // @@protoc_insertion_point(field_release:pb.TxData.from_addr)
  
  return from_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_from_addr(::std::string* from_addr) {
  if (from_addr != nullptr) {
    
  } else {
    
  }
  from_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_addr);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.from_addr)
}

// string from_pubkey = 4;
inline void TxData::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::from_pubkey() const {
  // @@protoc_insertion_point(field_get:pb.TxData.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void TxData::set_from_pubkey(const ::std::string& value) {
  
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.from_pubkey)
}
#if LANG_CXX11
inline void TxData::set_from_pubkey(::std::string&& value) {
  
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.from_pubkey)
}
#endif
inline void TxData::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.from_pubkey)
}
inline void TxData::set_from_pubkey(const char* value, size_t size) {
  
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.from_pubkey)
}
inline ::std::string* TxData::mutable_from_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:pb.TxData.from_pubkey)
  
  return from_pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != nullptr) {
    
  } else {
    
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.from_pubkey)
}

// string from_scrkey = 5;
inline void TxData::clear_from_scrkey() {
  from_scrkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::from_scrkey() const {
  // @@protoc_insertion_point(field_get:pb.TxData.from_scrkey)
  return from_scrkey_.GetNoArena();
}
inline void TxData::set_from_scrkey(const ::std::string& value) {
  
  from_scrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.from_scrkey)
}
#if LANG_CXX11
inline void TxData::set_from_scrkey(::std::string&& value) {
  
  from_scrkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.from_scrkey)
}
#endif
inline void TxData::set_from_scrkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_scrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.from_scrkey)
}
inline void TxData::set_from_scrkey(const char* value, size_t size) {
  
  from_scrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.from_scrkey)
}
inline ::std::string* TxData::mutable_from_scrkey() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.from_scrkey)
  return from_scrkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_from_scrkey() {
  // @@protoc_insertion_point(field_release:pb.TxData.from_scrkey)
  
  return from_scrkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_from_scrkey(::std::string* from_scrkey) {
  if (from_scrkey != nullptr) {
    
  } else {
    
  }
  from_scrkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_scrkey);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.from_scrkey)
}

// bytes user_sign = 14;
inline void TxData::clear_user_sign() {
  user_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::user_sign() const {
  // @@protoc_insertion_point(field_get:pb.TxData.user_sign)
  return user_sign_.GetNoArena();
}
inline void TxData::set_user_sign(const ::std::string& value) {
  
  user_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.user_sign)
}
#if LANG_CXX11
inline void TxData::set_user_sign(::std::string&& value) {
  
  user_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.user_sign)
}
#endif
inline void TxData::set_user_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.user_sign)
}
inline void TxData::set_user_sign(const void* value, size_t size) {
  
  user_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.user_sign)
}
inline ::std::string* TxData::mutable_user_sign() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.user_sign)
  return user_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_user_sign() {
  // @@protoc_insertion_point(field_release:pb.TxData.user_sign)
  
  return user_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_user_sign(::std::string* user_sign) {
  if (user_sign != nullptr) {
    
  } else {
    
  }
  user_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_sign);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.user_sign)
}

// repeated .pb.TxDataAccount account = 6;
inline int TxData::account_size() const {
  return account_.size();
}
inline void TxData::clear_account() {
  account_.Clear();
}
inline ::pb::TxDataAccount* TxData::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TxData.account)
  return account_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxDataAccount >*
TxData::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:pb.TxData.account)
  return &account_;
}
inline const ::pb::TxDataAccount& TxData::account(int index) const {
  // @@protoc_insertion_point(field_get:pb.TxData.account)
  return account_.Get(index);
}
inline ::pb::TxDataAccount* TxData::add_account() {
  // @@protoc_insertion_point(field_add:pb.TxData.account)
  return account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxDataAccount >&
TxData::account() const {
  // @@protoc_insertion_point(field_list:pb.TxData.account)
  return account_;
}

// string nonce = 8;
inline void TxData::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::nonce() const {
  // @@protoc_insertion_point(field_get:pb.TxData.nonce)
  return nonce_.GetNoArena();
}
inline void TxData::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.nonce)
}
#if LANG_CXX11
inline void TxData::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.nonce)
}
#endif
inline void TxData::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.nonce)
}
inline void TxData::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.nonce)
}
inline ::std::string* TxData::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_nonce() {
  // @@protoc_insertion_point(field_release:pb.TxData.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_nonce(::std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.nonce)
}

// int64 timestamp = 9;
inline void TxData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxData::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.TxData.timestamp)
  return timestamp_;
}
inline void TxData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.TxData.timestamp)
}

// bytes desc = 12;
inline void TxData::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxData::desc() const {
  // @@protoc_insertion_point(field_get:pb.TxData.desc)
  return desc_.GetNoArena();
}
inline void TxData::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxData.desc)
}
#if LANG_CXX11
inline void TxData::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxData.desc)
}
#endif
inline void TxData::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxData.desc)
}
inline void TxData::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxData.desc)
}
inline ::std::string* TxData::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxData.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxData::release_desc() {
  // @@protoc_insertion_point(field_release:pb.TxData.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxData::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.TxData.desc)
}

// int32 version = 15;
inline void TxData::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 TxData::version() const {
  // @@protoc_insertion_point(field_get:pb.TxData.version)
  return version_;
}
inline void TxData::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TxData.version)
}

// -------------------------------------------------------------------

// TxStatus

// .pb.Header header = 1;
inline bool TxStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void TxStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& TxStatus::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.TxStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* TxStatus::release_header() {
  // @@protoc_insertion_point(field_release:pb.TxStatus.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* TxStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TxStatus.header)
  return header_;
}
inline void TxStatus::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.TxStatus.header)
}

// string bcname = 2;
inline void TxStatus::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxStatus::bcname() const {
  // @@protoc_insertion_point(field_get:pb.TxStatus.bcname)
  return bcname_.GetNoArena();
}
inline void TxStatus::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxStatus.bcname)
}
#if LANG_CXX11
inline void TxStatus::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxStatus.bcname)
}
#endif
inline void TxStatus::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxStatus.bcname)
}
inline void TxStatus::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxStatus.bcname)
}
inline ::std::string* TxStatus::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxStatus.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxStatus::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.TxStatus.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxStatus::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.TxStatus.bcname)
}

// bytes txid = 3;
inline void TxStatus::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxStatus::txid() const {
  // @@protoc_insertion_point(field_get:pb.TxStatus.txid)
  return txid_.GetNoArena();
}
inline void TxStatus::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxStatus.txid)
}
#if LANG_CXX11
inline void TxStatus::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxStatus.txid)
}
#endif
inline void TxStatus::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxStatus.txid)
}
inline void TxStatus::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxStatus.txid)
}
inline ::std::string* TxStatus::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxStatus.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxStatus::release_txid() {
  // @@protoc_insertion_point(field_release:pb.TxStatus.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxStatus::set_allocated_txid(::std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:pb.TxStatus.txid)
}

// .pb.TransactionStatus status = 4;
inline void TxStatus::clear_status() {
  status_ = 0;
}
inline ::pb::TransactionStatus TxStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.TxStatus.status)
  return static_cast< ::pb::TransactionStatus >(status_);
}
inline void TxStatus::set_status(::pb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TxStatus.status)
}

// int64 distance = 5;
inline void TxStatus::clear_distance() {
  distance_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxStatus::distance() const {
  // @@protoc_insertion_point(field_get:pb.TxStatus.distance)
  return distance_;
}
inline void TxStatus::set_distance(::google::protobuf::int64 value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:pb.TxStatus.distance)
}

// .pb.Transaction tx = 7;
inline bool TxStatus::has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline void TxStatus::clear_tx() {
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
inline const ::pb::Transaction& TxStatus::tx() const {
  const ::pb::Transaction* p = tx_;
  // @@protoc_insertion_point(field_get:pb.TxStatus.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction*>(
      &::pb::_Transaction_default_instance_);
}
inline ::pb::Transaction* TxStatus::release_tx() {
  // @@protoc_insertion_point(field_release:pb.TxStatus.tx)
  
  ::pb::Transaction* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::pb::Transaction* TxStatus::mutable_tx() {
  
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TxStatus.tx)
  return tx_;
}
inline void TxStatus::set_allocated_tx(::pb::Transaction* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:pb.TxStatus.tx)
}

// -------------------------------------------------------------------

// BatchTxs

// .pb.Header header = 1;
inline bool BatchTxs::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void BatchTxs::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& BatchTxs::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.BatchTxs.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* BatchTxs::release_header() {
  // @@protoc_insertion_point(field_release:pb.BatchTxs.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* BatchTxs::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BatchTxs.header)
  return header_;
}
inline void BatchTxs::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.BatchTxs.header)
}

// repeated .pb.TxStatus Txs = 2;
inline int BatchTxs::txs_size() const {
  return txs_.size();
}
inline void BatchTxs::clear_txs() {
  txs_.Clear();
}
inline ::pb::TxStatus* BatchTxs::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BatchTxs.Txs)
  return txs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxStatus >*
BatchTxs::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:pb.BatchTxs.Txs)
  return &txs_;
}
inline const ::pb::TxStatus& BatchTxs::txs(int index) const {
  // @@protoc_insertion_point(field_get:pb.BatchTxs.Txs)
  return txs_.Get(index);
}
inline ::pb::TxStatus* BatchTxs::add_txs() {
  // @@protoc_insertion_point(field_add:pb.BatchTxs.Txs)
  return txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxStatus >&
BatchTxs::txs() const {
  // @@protoc_insertion_point(field_list:pb.BatchTxs.Txs)
  return txs_;
}

// -------------------------------------------------------------------

// Block

// .pb.Header header = 1;
inline bool Block::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void Block::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& Block::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.Block.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* Block::release_header() {
  // @@protoc_insertion_point(field_release:pb.Block.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* Block::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Block.header)
  return header_;
}
inline void Block::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.Block.header)
}

// string bcname = 2;
inline void Block::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::bcname() const {
  // @@protoc_insertion_point(field_get:pb.Block.bcname)
  return bcname_.GetNoArena();
}
inline void Block::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.bcname)
}
#if LANG_CXX11
inline void Block::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.bcname)
}
#endif
inline void Block::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.bcname)
}
inline void Block::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.bcname)
}
inline ::std::string* Block::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.Block.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.bcname)
}

// bytes blockid = 3;
inline void Block::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::blockid() const {
  // @@protoc_insertion_point(field_get:pb.Block.blockid)
  return blockid_.GetNoArena();
}
inline void Block::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Block.blockid)
}
#if LANG_CXX11
inline void Block::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.blockid)
}
#endif
inline void Block::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.blockid)
}
inline void Block::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.blockid)
}
inline ::std::string* Block::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Block.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.Block.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.blockid)
}

// .pb.Block.EBlockStatus status = 4;
inline void Block::clear_status() {
  status_ = 0;
}
inline ::pb::Block_EBlockStatus Block::status() const {
  // @@protoc_insertion_point(field_get:pb.Block.status)
  return static_cast< ::pb::Block_EBlockStatus >(status_);
}
inline void Block::set_status(::pb::Block_EBlockStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.Block.status)
}

// .pb.InternalBlock block = 5;
inline bool Block::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void Block::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::pb::InternalBlock& Block::block() const {
  const ::pb::InternalBlock* p = block_;
  // @@protoc_insertion_point(field_get:pb.Block.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::InternalBlock*>(
      &::pb::_InternalBlock_default_instance_);
}
inline ::pb::InternalBlock* Block::release_block() {
  // @@protoc_insertion_point(field_release:pb.Block.block)
  
  ::pb::InternalBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::pb::InternalBlock* Block::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::InternalBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Block.block)
  return block_;
}
inline void Block::set_allocated_block(::pb::InternalBlock* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:pb.Block.block)
}

// -------------------------------------------------------------------

// BlockID

// .pb.Header header = 4;
inline bool BlockID::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void BlockID::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& BlockID::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.BlockID.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* BlockID::release_header() {
  // @@protoc_insertion_point(field_release:pb.BlockID.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* BlockID::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BlockID.header)
  return header_;
}
inline void BlockID::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.BlockID.header)
}

// string bcname = 1;
inline void BlockID::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockID::bcname() const {
  // @@protoc_insertion_point(field_get:pb.BlockID.bcname)
  return bcname_.GetNoArena();
}
inline void BlockID::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BlockID.bcname)
}
#if LANG_CXX11
inline void BlockID::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockID.bcname)
}
#endif
inline void BlockID::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BlockID.bcname)
}
inline void BlockID::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BlockID.bcname)
}
inline ::std::string* BlockID::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.BlockID.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockID::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.BlockID.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockID::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.BlockID.bcname)
}

// bytes blockid = 2;
inline void BlockID::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockID::blockid() const {
  // @@protoc_insertion_point(field_get:pb.BlockID.blockid)
  return blockid_.GetNoArena();
}
inline void BlockID::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BlockID.blockid)
}
#if LANG_CXX11
inline void BlockID::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockID.blockid)
}
#endif
inline void BlockID::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BlockID.blockid)
}
inline void BlockID::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BlockID.blockid)
}
inline ::std::string* BlockID::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.BlockID.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockID::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.BlockID.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockID::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.BlockID.blockid)
}

// bool need_content = 3;
inline void BlockID::clear_need_content() {
  need_content_ = false;
}
inline bool BlockID::need_content() const {
  // @@protoc_insertion_point(field_get:pb.BlockID.need_content)
  return need_content_;
}
inline void BlockID::set_need_content(bool value) {
  
  need_content_ = value;
  // @@protoc_insertion_point(field_set:pb.BlockID.need_content)
}

// -------------------------------------------------------------------

// BlockHeight

// .pb.Header header = 3;
inline bool BlockHeight::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void BlockHeight::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& BlockHeight::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.BlockHeight.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* BlockHeight::release_header() {
  // @@protoc_insertion_point(field_release:pb.BlockHeight.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* BlockHeight::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BlockHeight.header)
  return header_;
}
inline void BlockHeight::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.BlockHeight.header)
}

// string bcname = 1;
inline void BlockHeight::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeight::bcname() const {
  // @@protoc_insertion_point(field_get:pb.BlockHeight.bcname)
  return bcname_.GetNoArena();
}
inline void BlockHeight::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BlockHeight.bcname)
}
#if LANG_CXX11
inline void BlockHeight::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockHeight.bcname)
}
#endif
inline void BlockHeight::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BlockHeight.bcname)
}
inline void BlockHeight::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BlockHeight.bcname)
}
inline ::std::string* BlockHeight::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.BlockHeight.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeight::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.BlockHeight.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeight::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.BlockHeight.bcname)
}

// int64 height = 2;
inline void BlockHeight::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockHeight::height() const {
  // @@protoc_insertion_point(field_get:pb.BlockHeight.height)
  return height_;
}
inline void BlockHeight::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.BlockHeight.height)
}

// -------------------------------------------------------------------

// CommonReply

// .pb.Header header = 1;
inline bool CommonReply::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void CommonReply::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& CommonReply::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.CommonReply.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* CommonReply::release_header() {
  // @@protoc_insertion_point(field_release:pb.CommonReply.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* CommonReply::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CommonReply.header)
  return header_;
}
inline void CommonReply::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.CommonReply.header)
}

// -------------------------------------------------------------------

// CommonIn

// .pb.Header header = 1;
inline bool CommonIn::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void CommonIn::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& CommonIn::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.CommonIn.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* CommonIn::release_header() {
  // @@protoc_insertion_point(field_release:pb.CommonIn.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* CommonIn::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CommonIn.header)
  return header_;
}
inline void CommonIn::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.CommonIn.header)
}

// -------------------------------------------------------------------

// TokenDetail

// string bcname = 1;
inline void TokenDetail::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TokenDetail::bcname() const {
  // @@protoc_insertion_point(field_get:pb.TokenDetail.bcname)
  return bcname_.GetNoArena();
}
inline void TokenDetail::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TokenDetail.bcname)
}
#if LANG_CXX11
inline void TokenDetail::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TokenDetail.bcname)
}
#endif
inline void TokenDetail::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TokenDetail.bcname)
}
inline void TokenDetail::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TokenDetail.bcname)
}
inline ::std::string* TokenDetail::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.TokenDetail.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TokenDetail::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.TokenDetail.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TokenDetail::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.TokenDetail.bcname)
}

// string balance = 2;
inline void TokenDetail::clear_balance() {
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TokenDetail::balance() const {
  // @@protoc_insertion_point(field_get:pb.TokenDetail.balance)
  return balance_.GetNoArena();
}
inline void TokenDetail::set_balance(const ::std::string& value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TokenDetail.balance)
}
#if LANG_CXX11
inline void TokenDetail::set_balance(::std::string&& value) {
  
  balance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TokenDetail.balance)
}
#endif
inline void TokenDetail::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TokenDetail.balance)
}
inline void TokenDetail::set_balance(const char* value, size_t size) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TokenDetail.balance)
}
inline ::std::string* TokenDetail::mutable_balance() {
  
  // @@protoc_insertion_point(field_mutable:pb.TokenDetail.balance)
  return balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TokenDetail::release_balance() {
  // @@protoc_insertion_point(field_release:pb.TokenDetail.balance)
  
  return balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TokenDetail::set_allocated_balance(::std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:pb.TokenDetail.balance)
}

// .pb.XChainErrorEnum error = 3;
inline void TokenDetail::clear_error() {
  error_ = 0;
}
inline ::pb::XChainErrorEnum TokenDetail::error() const {
  // @@protoc_insertion_point(field_get:pb.TokenDetail.error)
  return static_cast< ::pb::XChainErrorEnum >(error_);
}
inline void TokenDetail::set_error(::pb::XChainErrorEnum value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:pb.TokenDetail.error)
}

// -------------------------------------------------------------------

// AddressStatus

// .pb.Header header = 1;
inline bool AddressStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void AddressStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& AddressStatus::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.AddressStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* AddressStatus::release_header() {
  // @@protoc_insertion_point(field_release:pb.AddressStatus.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* AddressStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.AddressStatus.header)
  return header_;
}
inline void AddressStatus::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.AddressStatus.header)
}

// string address = 2;
inline void AddressStatus::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressStatus::address() const {
  // @@protoc_insertion_point(field_get:pb.AddressStatus.address)
  return address_.GetNoArena();
}
inline void AddressStatus::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.AddressStatus.address)
}
#if LANG_CXX11
inline void AddressStatus::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AddressStatus.address)
}
#endif
inline void AddressStatus::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AddressStatus.address)
}
inline void AddressStatus::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AddressStatus.address)
}
inline ::std::string* AddressStatus::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.AddressStatus.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressStatus::release_address() {
  // @@protoc_insertion_point(field_release:pb.AddressStatus.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressStatus::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.AddressStatus.address)
}

// repeated .pb.TokenDetail bcs = 3;
inline int AddressStatus::bcs_size() const {
  return bcs_.size();
}
inline void AddressStatus::clear_bcs() {
  bcs_.Clear();
}
inline ::pb::TokenDetail* AddressStatus::mutable_bcs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.AddressStatus.bcs)
  return bcs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TokenDetail >*
AddressStatus::mutable_bcs() {
  // @@protoc_insertion_point(field_mutable_list:pb.AddressStatus.bcs)
  return &bcs_;
}
inline const ::pb::TokenDetail& AddressStatus::bcs(int index) const {
  // @@protoc_insertion_point(field_get:pb.AddressStatus.bcs)
  return bcs_.Get(index);
}
inline ::pb::TokenDetail* AddressStatus::add_bcs() {
  // @@protoc_insertion_point(field_add:pb.AddressStatus.bcs)
  return bcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TokenDetail >&
AddressStatus::bcs() const {
  // @@protoc_insertion_point(field_list:pb.AddressStatus.bcs)
  return bcs_;
}

// -------------------------------------------------------------------

// TxInput

// bytes ref_txid = 1;
inline void TxInput::clear_ref_txid() {
  ref_txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::ref_txid() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.ref_txid)
  return ref_txid_.GetNoArena();
}
inline void TxInput::set_ref_txid(const ::std::string& value) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.ref_txid)
}
#if LANG_CXX11
inline void TxInput::set_ref_txid(::std::string&& value) {
  
  ref_txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.ref_txid)
}
#endif
inline void TxInput::set_ref_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.ref_txid)
}
inline void TxInput::set_ref_txid(const void* value, size_t size) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.ref_txid)
}
inline ::std::string* TxInput::mutable_ref_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.ref_txid)
  return ref_txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_ref_txid() {
  // @@protoc_insertion_point(field_release:pb.TxInput.ref_txid)
  
  return ref_txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_ref_txid(::std::string* ref_txid) {
  if (ref_txid != nullptr) {
    
  } else {
    
  }
  ref_txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_txid);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.ref_txid)
}

// int32 ref_offset = 2;
inline void TxInput::clear_ref_offset() {
  ref_offset_ = 0;
}
inline ::google::protobuf::int32 TxInput::ref_offset() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.ref_offset)
  return ref_offset_;
}
inline void TxInput::set_ref_offset(::google::protobuf::int32 value) {
  
  ref_offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TxInput.ref_offset)
}

// bytes from_addr = 5;
inline void TxInput::clear_from_addr() {
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::from_addr() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.from_addr)
  return from_addr_.GetNoArena();
}
inline void TxInput::set_from_addr(const ::std::string& value) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.from_addr)
}
#if LANG_CXX11
inline void TxInput::set_from_addr(::std::string&& value) {
  
  from_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.from_addr)
}
#endif
inline void TxInput::set_from_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.from_addr)
}
inline void TxInput::set_from_addr(const void* value, size_t size) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.from_addr)
}
inline ::std::string* TxInput::mutable_from_addr() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.from_addr)
  return from_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_from_addr() {
  // @@protoc_insertion_point(field_release:pb.TxInput.from_addr)
  
  return from_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_from_addr(::std::string* from_addr) {
  if (from_addr != nullptr) {
    
  } else {
    
  }
  from_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_addr);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.from_addr)
}

// bytes amount = 6;
inline void TxInput::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInput::amount() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.amount)
  return amount_.GetNoArena();
}
inline void TxInput::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInput.amount)
}
#if LANG_CXX11
inline void TxInput::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInput.amount)
}
#endif
inline void TxInput::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInput.amount)
}
inline void TxInput::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInput.amount)
}
inline ::std::string* TxInput::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInput.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInput::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TxInput.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInput::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInput.amount)
}

// int64 frozen_height = 7;
inline void TxInput::clear_frozen_height() {
  frozen_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxInput::frozen_height() const {
  // @@protoc_insertion_point(field_get:pb.TxInput.frozen_height)
  return frozen_height_;
}
inline void TxInput::set_frozen_height(::google::protobuf::int64 value) {
  
  frozen_height_ = value;
  // @@protoc_insertion_point(field_set:pb.TxInput.frozen_height)
}

// -------------------------------------------------------------------

// TxOutput

// bytes amount = 1;
inline void TxOutput::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutput::amount() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.amount)
  return amount_.GetNoArena();
}
inline void TxOutput::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutput.amount)
}
#if LANG_CXX11
inline void TxOutput::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutput.amount)
}
#endif
inline void TxOutput::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutput.amount)
}
inline void TxOutput::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutput.amount)
}
inline ::std::string* TxOutput::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutput.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutput::release_amount() {
  // @@protoc_insertion_point(field_release:pb.TxOutput.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutput::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutput.amount)
}

// bytes to_addr = 2;
inline void TxOutput::clear_to_addr() {
  to_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutput::to_addr() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.to_addr)
  return to_addr_.GetNoArena();
}
inline void TxOutput::set_to_addr(const ::std::string& value) {
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutput.to_addr)
}
#if LANG_CXX11
inline void TxOutput::set_to_addr(::std::string&& value) {
  
  to_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutput.to_addr)
}
#endif
inline void TxOutput::set_to_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutput.to_addr)
}
inline void TxOutput::set_to_addr(const void* value, size_t size) {
  
  to_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutput.to_addr)
}
inline ::std::string* TxOutput::mutable_to_addr() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutput.to_addr)
  return to_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutput::release_to_addr() {
  // @@protoc_insertion_point(field_release:pb.TxOutput.to_addr)
  
  return to_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutput::set_allocated_to_addr(::std::string* to_addr) {
  if (to_addr != nullptr) {
    
  } else {
    
  }
  to_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_addr);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutput.to_addr)
}

// int64 frozen_height = 4;
inline void TxOutput::clear_frozen_height() {
  frozen_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TxOutput::frozen_height() const {
  // @@protoc_insertion_point(field_get:pb.TxOutput.frozen_height)
  return frozen_height_;
}
inline void TxOutput::set_frozen_height(::google::protobuf::int64 value) {
  
  frozen_height_ = value;
  // @@protoc_insertion_point(field_set:pb.TxOutput.frozen_height)
}

// -------------------------------------------------------------------

// Transaction

// bytes txid = 1;
inline void Transaction::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::txid() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.txid)
  return txid_.GetNoArena();
}
inline void Transaction::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.txid)
}
#if LANG_CXX11
inline void Transaction::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.txid)
}
#endif
inline void Transaction::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.txid)
}
inline void Transaction::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.txid)
}
inline ::std::string* Transaction::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_txid() {
  // @@protoc_insertion_point(field_release:pb.Transaction.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_txid(::std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.txid)
}

// bytes blockid = 2;
inline void Transaction::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::blockid() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.blockid)
  return blockid_.GetNoArena();
}
inline void Transaction::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.blockid)
}
#if LANG_CXX11
inline void Transaction::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.blockid)
}
#endif
inline void Transaction::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.blockid)
}
inline void Transaction::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.blockid)
}
inline ::std::string* Transaction::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.Transaction.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.blockid)
}

// repeated .pb.TxInput tx_inputs = 3;
inline int Transaction::tx_inputs_size() const {
  return tx_inputs_.size();
}
inline void Transaction::clear_tx_inputs() {
  tx_inputs_.Clear();
}
inline ::pb::TxInput* Transaction::mutable_tx_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_inputs)
  return tx_inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxInput >*
Transaction::mutable_tx_inputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_inputs)
  return &tx_inputs_;
}
inline const ::pb::TxInput& Transaction::tx_inputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_inputs)
  return tx_inputs_.Get(index);
}
inline ::pb::TxInput* Transaction::add_tx_inputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_inputs)
  return tx_inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxInput >&
Transaction::tx_inputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_inputs)
  return tx_inputs_;
}

// repeated .pb.TxOutput tx_outputs = 4;
inline int Transaction::tx_outputs_size() const {
  return tx_outputs_.size();
}
inline void Transaction::clear_tx_outputs() {
  tx_outputs_.Clear();
}
inline ::pb::TxOutput* Transaction::mutable_tx_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_outputs)
  return tx_outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >*
Transaction::mutable_tx_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_outputs)
  return &tx_outputs_;
}
inline const ::pb::TxOutput& Transaction::tx_outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_outputs)
  return tx_outputs_.Get(index);
}
inline ::pb::TxOutput* Transaction::add_tx_outputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_outputs)
  return tx_outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxOutput >&
Transaction::tx_outputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_outputs)
  return tx_outputs_;
}

// bytes desc = 6;
inline void Transaction::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::desc() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.desc)
  return desc_.GetNoArena();
}
inline void Transaction::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.desc)
}
#if LANG_CXX11
inline void Transaction::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.desc)
}
#endif
inline void Transaction::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.desc)
}
inline void Transaction::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.desc)
}
inline ::std::string* Transaction::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_desc() {
  // @@protoc_insertion_point(field_release:pb.Transaction.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.desc)
}

// bool coinbase = 7;
inline void Transaction::clear_coinbase() {
  coinbase_ = false;
}
inline bool Transaction::coinbase() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.coinbase)
  return coinbase_;
}
inline void Transaction::set_coinbase(bool value) {
  
  coinbase_ = value;
  // @@protoc_insertion_point(field_set:pb.Transaction.coinbase)
}

// string nonce = 8;
inline void Transaction::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.nonce)
  return nonce_.GetNoArena();
}
inline void Transaction::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.nonce)
}
#if LANG_CXX11
inline void Transaction::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.nonce)
}
#endif
inline void Transaction::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.nonce)
}
inline void Transaction::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.nonce)
}
inline ::std::string* Transaction::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_nonce() {
  // @@protoc_insertion_point(field_release:pb.Transaction.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_nonce(::std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.nonce)
}

// int64 timestamp = 9;
inline void Transaction::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.timestamp)
  return timestamp_;
}
inline void Transaction::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.Transaction.timestamp)
}

// int32 version = 10;
inline void Transaction::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.version)
  return version_;
}
inline void Transaction::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.Transaction.version)
}

// bool autogen = 11;
inline void Transaction::clear_autogen() {
  autogen_ = false;
}
inline bool Transaction::autogen() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.autogen)
  return autogen_;
}
inline void Transaction::set_autogen(bool value) {
  
  autogen_ = value;
  // @@protoc_insertion_point(field_set:pb.Transaction.autogen)
}

// repeated .pb.TxInputExt tx_inputs_ext = 23;
inline int Transaction::tx_inputs_ext_size() const {
  return tx_inputs_ext_.size();
}
inline void Transaction::clear_tx_inputs_ext() {
  tx_inputs_ext_.Clear();
}
inline ::pb::TxInputExt* Transaction::mutable_tx_inputs_ext(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_inputs_ext)
  return tx_inputs_ext_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxInputExt >*
Transaction::mutable_tx_inputs_ext() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_inputs_ext)
  return &tx_inputs_ext_;
}
inline const ::pb::TxInputExt& Transaction::tx_inputs_ext(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_inputs_ext)
  return tx_inputs_ext_.Get(index);
}
inline ::pb::TxInputExt* Transaction::add_tx_inputs_ext() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_inputs_ext)
  return tx_inputs_ext_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxInputExt >&
Transaction::tx_inputs_ext() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_inputs_ext)
  return tx_inputs_ext_;
}

// repeated .pb.TxOutputExt tx_outputs_ext = 24;
inline int Transaction::tx_outputs_ext_size() const {
  return tx_outputs_ext_.size();
}
inline void Transaction::clear_tx_outputs_ext() {
  tx_outputs_ext_.Clear();
}
inline ::pb::TxOutputExt* Transaction::mutable_tx_outputs_ext(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.tx_outputs_ext)
  return tx_outputs_ext_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TxOutputExt >*
Transaction::mutable_tx_outputs_ext() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.tx_outputs_ext)
  return &tx_outputs_ext_;
}
inline const ::pb::TxOutputExt& Transaction::tx_outputs_ext(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.tx_outputs_ext)
  return tx_outputs_ext_.Get(index);
}
inline ::pb::TxOutputExt* Transaction::add_tx_outputs_ext() {
  // @@protoc_insertion_point(field_add:pb.Transaction.tx_outputs_ext)
  return tx_outputs_ext_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TxOutputExt >&
Transaction::tx_outputs_ext() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.tx_outputs_ext)
  return tx_outputs_ext_;
}

// repeated .pb.InvokeRequest contract_requests = 25;
inline int Transaction::contract_requests_size() const {
  return contract_requests_.size();
}
inline void Transaction::clear_contract_requests() {
  contract_requests_.Clear();
}
inline ::pb::InvokeRequest* Transaction::mutable_contract_requests(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.contract_requests)
  return contract_requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InvokeRequest >*
Transaction::mutable_contract_requests() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.contract_requests)
  return &contract_requests_;
}
inline const ::pb::InvokeRequest& Transaction::contract_requests(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.contract_requests)
  return contract_requests_.Get(index);
}
inline ::pb::InvokeRequest* Transaction::add_contract_requests() {
  // @@protoc_insertion_point(field_add:pb.Transaction.contract_requests)
  return contract_requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InvokeRequest >&
Transaction::contract_requests() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.contract_requests)
  return contract_requests_;
}

// string initiator = 26;
inline void Transaction::clear_initiator() {
  initiator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::initiator() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.initiator)
  return initiator_.GetNoArena();
}
inline void Transaction::set_initiator(const ::std::string& value) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Transaction.initiator)
}
#if LANG_CXX11
inline void Transaction::set_initiator(::std::string&& value) {
  
  initiator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.initiator)
}
#endif
inline void Transaction::set_initiator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Transaction.initiator)
}
inline void Transaction::set_initiator(const char* value, size_t size) {
  
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.initiator)
}
inline ::std::string* Transaction::mutable_initiator() {
  
  // @@protoc_insertion_point(field_mutable:pb.Transaction.initiator)
  return initiator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_initiator() {
  // @@protoc_insertion_point(field_release:pb.Transaction.initiator)
  
  return initiator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_initiator(::std::string* initiator) {
  if (initiator != nullptr) {
    
  } else {
    
  }
  initiator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initiator);
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.initiator)
}

// repeated string auth_require = 27;
inline int Transaction::auth_require_size() const {
  return auth_require_.size();
}
inline void Transaction::clear_auth_require() {
  auth_require_.Clear();
}
inline const ::std::string& Transaction::auth_require(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.auth_require)
  return auth_require_.Get(index);
}
inline ::std::string* Transaction::mutable_auth_require(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.auth_require)
  return auth_require_.Mutable(index);
}
inline void Transaction::set_auth_require(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Transaction.auth_require)
  auth_require_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Transaction::set_auth_require(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Transaction.auth_require)
  auth_require_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Transaction::set_auth_require(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Transaction.auth_require)
}
inline void Transaction::set_auth_require(int index, const char* value, size_t size) {
  auth_require_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.auth_require)
}
inline ::std::string* Transaction::add_auth_require() {
  // @@protoc_insertion_point(field_add_mutable:pb.Transaction.auth_require)
  return auth_require_.Add();
}
inline void Transaction::add_auth_require(const ::std::string& value) {
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Transaction.auth_require)
}
#if LANG_CXX11
inline void Transaction::add_auth_require(::std::string&& value) {
  auth_require_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Transaction.auth_require)
}
#endif
inline void Transaction::add_auth_require(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_require_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Transaction.auth_require)
}
inline void Transaction::add_auth_require(const char* value, size_t size) {
  auth_require_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Transaction.auth_require)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Transaction::auth_require() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.auth_require)
  return auth_require_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Transaction::mutable_auth_require() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.auth_require)
  return &auth_require_;
}

// repeated .pb.SignatureInfo initiator_signs = 28;
inline int Transaction::initiator_signs_size() const {
  return initiator_signs_.size();
}
inline void Transaction::clear_initiator_signs() {
  initiator_signs_.Clear();
}
inline ::pb::SignatureInfo* Transaction::mutable_initiator_signs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.initiator_signs)
  return initiator_signs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >*
Transaction::mutable_initiator_signs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.initiator_signs)
  return &initiator_signs_;
}
inline const ::pb::SignatureInfo& Transaction::initiator_signs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.initiator_signs)
  return initiator_signs_.Get(index);
}
inline ::pb::SignatureInfo* Transaction::add_initiator_signs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.initiator_signs)
  return initiator_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >&
Transaction::initiator_signs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.initiator_signs)
  return initiator_signs_;
}

// repeated .pb.SignatureInfo auth_require_signs = 29;
inline int Transaction::auth_require_signs_size() const {
  return auth_require_signs_.size();
}
inline void Transaction::clear_auth_require_signs() {
  auth_require_signs_.Clear();
}
inline ::pb::SignatureInfo* Transaction::mutable_auth_require_signs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.auth_require_signs)
  return auth_require_signs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >*
Transaction::mutable_auth_require_signs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.auth_require_signs)
  return &auth_require_signs_;
}
inline const ::pb::SignatureInfo& Transaction::auth_require_signs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.auth_require_signs)
  return auth_require_signs_.Get(index);
}
inline ::pb::SignatureInfo* Transaction::add_auth_require_signs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.auth_require_signs)
  return auth_require_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SignatureInfo >&
Transaction::auth_require_signs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.auth_require_signs)
  return auth_require_signs_;
}

// int64 received_timestamp = 30;
inline void Transaction::clear_received_timestamp() {
  received_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Transaction::received_timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.received_timestamp)
  return received_timestamp_;
}
inline void Transaction::set_received_timestamp(::google::protobuf::int64 value) {
  
  received_timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.Transaction.received_timestamp)
}

// -------------------------------------------------------------------

// LedgerMeta

// bytes root_blockid = 1;
inline void LedgerMeta::clear_root_blockid() {
  root_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerMeta::root_blockid() const {
  // @@protoc_insertion_point(field_get:pb.LedgerMeta.root_blockid)
  return root_blockid_.GetNoArena();
}
inline void LedgerMeta::set_root_blockid(const ::std::string& value) {
  
  root_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.LedgerMeta.root_blockid)
}
#if LANG_CXX11
inline void LedgerMeta::set_root_blockid(::std::string&& value) {
  
  root_blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LedgerMeta.root_blockid)
}
#endif
inline void LedgerMeta::set_root_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LedgerMeta.root_blockid)
}
inline void LedgerMeta::set_root_blockid(const void* value, size_t size) {
  
  root_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LedgerMeta.root_blockid)
}
inline ::std::string* LedgerMeta::mutable_root_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.LedgerMeta.root_blockid)
  return root_blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerMeta::release_root_blockid() {
  // @@protoc_insertion_point(field_release:pb.LedgerMeta.root_blockid)
  
  return root_blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerMeta::set_allocated_root_blockid(::std::string* root_blockid) {
  if (root_blockid != nullptr) {
    
  } else {
    
  }
  root_blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.LedgerMeta.root_blockid)
}

// bytes tip_blockid = 2;
inline void LedgerMeta::clear_tip_blockid() {
  tip_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerMeta::tip_blockid() const {
  // @@protoc_insertion_point(field_get:pb.LedgerMeta.tip_blockid)
  return tip_blockid_.GetNoArena();
}
inline void LedgerMeta::set_tip_blockid(const ::std::string& value) {
  
  tip_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.LedgerMeta.tip_blockid)
}
#if LANG_CXX11
inline void LedgerMeta::set_tip_blockid(::std::string&& value) {
  
  tip_blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LedgerMeta.tip_blockid)
}
#endif
inline void LedgerMeta::set_tip_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LedgerMeta.tip_blockid)
}
inline void LedgerMeta::set_tip_blockid(const void* value, size_t size) {
  
  tip_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LedgerMeta.tip_blockid)
}
inline ::std::string* LedgerMeta::mutable_tip_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.LedgerMeta.tip_blockid)
  return tip_blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerMeta::release_tip_blockid() {
  // @@protoc_insertion_point(field_release:pb.LedgerMeta.tip_blockid)
  
  return tip_blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerMeta::set_allocated_tip_blockid(::std::string* tip_blockid) {
  if (tip_blockid != nullptr) {
    
  } else {
    
  }
  tip_blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tip_blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.LedgerMeta.tip_blockid)
}

// int64 trunk_height = 3;
inline void LedgerMeta::clear_trunk_height() {
  trunk_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LedgerMeta::trunk_height() const {
  // @@protoc_insertion_point(field_get:pb.LedgerMeta.trunk_height)
  return trunk_height_;
}
inline void LedgerMeta::set_trunk_height(::google::protobuf::int64 value) {
  
  trunk_height_ = value;
  // @@protoc_insertion_point(field_set:pb.LedgerMeta.trunk_height)
}

// int64 max_block_size = 4;
inline void LedgerMeta::clear_max_block_size() {
  max_block_size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LedgerMeta::max_block_size() const {
  // @@protoc_insertion_point(field_get:pb.LedgerMeta.max_block_size)
  return max_block_size_;
}
inline void LedgerMeta::set_max_block_size(::google::protobuf::int64 value) {
  
  max_block_size_ = value;
  // @@protoc_insertion_point(field_set:pb.LedgerMeta.max_block_size)
}

// -------------------------------------------------------------------

// UtxoMeta

// bytes latest_blockid = 1;
inline void UtxoMeta::clear_latest_blockid() {
  latest_blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UtxoMeta::latest_blockid() const {
  // @@protoc_insertion_point(field_get:pb.UtxoMeta.latest_blockid)
  return latest_blockid_.GetNoArena();
}
inline void UtxoMeta::set_latest_blockid(const ::std::string& value) {
  
  latest_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.latest_blockid)
}
#if LANG_CXX11
inline void UtxoMeta::set_latest_blockid(::std::string&& value) {
  
  latest_blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UtxoMeta.latest_blockid)
}
#endif
inline void UtxoMeta::set_latest_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UtxoMeta.latest_blockid)
}
inline void UtxoMeta::set_latest_blockid(const void* value, size_t size) {
  
  latest_blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UtxoMeta.latest_blockid)
}
inline ::std::string* UtxoMeta::mutable_latest_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.UtxoMeta.latest_blockid)
  return latest_blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UtxoMeta::release_latest_blockid() {
  // @@protoc_insertion_point(field_release:pb.UtxoMeta.latest_blockid)
  
  return latest_blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UtxoMeta::set_allocated_latest_blockid(::std::string* latest_blockid) {
  if (latest_blockid != nullptr) {
    
  } else {
    
  }
  latest_blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.UtxoMeta.latest_blockid)
}

// repeated string lock_key_list = 2;
inline int UtxoMeta::lock_key_list_size() const {
  return lock_key_list_.size();
}
inline void UtxoMeta::clear_lock_key_list() {
  lock_key_list_.Clear();
}
inline const ::std::string& UtxoMeta::lock_key_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.UtxoMeta.lock_key_list)
  return lock_key_list_.Get(index);
}
inline ::std::string* UtxoMeta::mutable_lock_key_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.UtxoMeta.lock_key_list)
  return lock_key_list_.Mutable(index);
}
inline void UtxoMeta::set_lock_key_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.lock_key_list)
  lock_key_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UtxoMeta::set_lock_key_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.lock_key_list)
  lock_key_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UtxoMeta::set_lock_key_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lock_key_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.UtxoMeta.lock_key_list)
}
inline void UtxoMeta::set_lock_key_list(int index, const char* value, size_t size) {
  lock_key_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.UtxoMeta.lock_key_list)
}
inline ::std::string* UtxoMeta::add_lock_key_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.UtxoMeta.lock_key_list)
  return lock_key_list_.Add();
}
inline void UtxoMeta::add_lock_key_list(const ::std::string& value) {
  lock_key_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.UtxoMeta.lock_key_list)
}
#if LANG_CXX11
inline void UtxoMeta::add_lock_key_list(::std::string&& value) {
  lock_key_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.UtxoMeta.lock_key_list)
}
#endif
inline void UtxoMeta::add_lock_key_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lock_key_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.UtxoMeta.lock_key_list)
}
inline void UtxoMeta::add_lock_key_list(const char* value, size_t size) {
  lock_key_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.UtxoMeta.lock_key_list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UtxoMeta::lock_key_list() const {
  // @@protoc_insertion_point(field_list:pb.UtxoMeta.lock_key_list)
  return lock_key_list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UtxoMeta::mutable_lock_key_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.UtxoMeta.lock_key_list)
  return &lock_key_list_;
}

// string utxo_total = 3;
inline void UtxoMeta::clear_utxo_total() {
  utxo_total_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UtxoMeta::utxo_total() const {
  // @@protoc_insertion_point(field_get:pb.UtxoMeta.utxo_total)
  return utxo_total_.GetNoArena();
}
inline void UtxoMeta::set_utxo_total(const ::std::string& value) {
  
  utxo_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.utxo_total)
}
#if LANG_CXX11
inline void UtxoMeta::set_utxo_total(::std::string&& value) {
  
  utxo_total_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UtxoMeta.utxo_total)
}
#endif
inline void UtxoMeta::set_utxo_total(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utxo_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UtxoMeta.utxo_total)
}
inline void UtxoMeta::set_utxo_total(const char* value, size_t size) {
  
  utxo_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UtxoMeta.utxo_total)
}
inline ::std::string* UtxoMeta::mutable_utxo_total() {
  
  // @@protoc_insertion_point(field_mutable:pb.UtxoMeta.utxo_total)
  return utxo_total_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UtxoMeta::release_utxo_total() {
  // @@protoc_insertion_point(field_release:pb.UtxoMeta.utxo_total)
  
  return utxo_total_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UtxoMeta::set_allocated_utxo_total(::std::string* utxo_total) {
  if (utxo_total != nullptr) {
    
  } else {
    
  }
  utxo_total_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), utxo_total);
  // @@protoc_insertion_point(field_set_allocated:pb.UtxoMeta.utxo_total)
}

// int64 avgDelay = 4;
inline void UtxoMeta::clear_avgdelay() {
  avgdelay_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UtxoMeta::avgdelay() const {
  // @@protoc_insertion_point(field_get:pb.UtxoMeta.avgDelay)
  return avgdelay_;
}
inline void UtxoMeta::set_avgdelay(::google::protobuf::int64 value) {
  
  avgdelay_ = value;
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.avgDelay)
}

// int64 unconfirmTxAmount = 5;
inline void UtxoMeta::clear_unconfirmtxamount() {
  unconfirmtxamount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UtxoMeta::unconfirmtxamount() const {
  // @@protoc_insertion_point(field_get:pb.UtxoMeta.unconfirmTxAmount)
  return unconfirmtxamount_;
}
inline void UtxoMeta::set_unconfirmtxamount(::google::protobuf::int64 value) {
  
  unconfirmtxamount_ = value;
  // @@protoc_insertion_point(field_set:pb.UtxoMeta.unconfirmTxAmount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InternalBlock

// int32 version = 1;
inline void InternalBlock::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 InternalBlock::version() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.version)
  return version_;
}
inline void InternalBlock::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.version)
}

// int32 nonce = 2;
inline void InternalBlock::clear_nonce() {
  nonce_ = 0;
}
inline ::google::protobuf::int32 InternalBlock::nonce() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.nonce)
  return nonce_;
}
inline void InternalBlock::set_nonce(::google::protobuf::int32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.nonce)
}

// bytes blockid = 3;
inline void InternalBlock::clear_blockid() {
  blockid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::blockid() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.blockid)
  return blockid_.GetNoArena();
}
inline void InternalBlock::set_blockid(const ::std::string& value) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.blockid)
}
#if LANG_CXX11
inline void InternalBlock::set_blockid(::std::string&& value) {
  
  blockid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.blockid)
}
#endif
inline void InternalBlock::set_blockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.blockid)
}
inline void InternalBlock::set_blockid(const void* value, size_t size) {
  
  blockid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.blockid)
}
inline ::std::string* InternalBlock::mutable_blockid() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.blockid)
  return blockid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_blockid() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.blockid)
  
  return blockid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_blockid(::std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  blockid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockid);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.blockid)
}

// bytes pre_hash = 4;
inline void InternalBlock::clear_pre_hash() {
  pre_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::pre_hash() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.pre_hash)
  return pre_hash_.GetNoArena();
}
inline void InternalBlock::set_pre_hash(const ::std::string& value) {
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.pre_hash)
}
#if LANG_CXX11
inline void InternalBlock::set_pre_hash(::std::string&& value) {
  
  pre_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.pre_hash)
}
#endif
inline void InternalBlock::set_pre_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.pre_hash)
}
inline void InternalBlock::set_pre_hash(const void* value, size_t size) {
  
  pre_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.pre_hash)
}
inline ::std::string* InternalBlock::mutable_pre_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.pre_hash)
  return pre_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_pre_hash() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.pre_hash)
  
  return pre_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_pre_hash(::std::string* pre_hash) {
  if (pre_hash != nullptr) {
    
  } else {
    
  }
  pre_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.pre_hash)
}

// bytes proposer = 5;
inline void InternalBlock::clear_proposer() {
  proposer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::proposer() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.proposer)
  return proposer_.GetNoArena();
}
inline void InternalBlock::set_proposer(const ::std::string& value) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.proposer)
}
#if LANG_CXX11
inline void InternalBlock::set_proposer(::std::string&& value) {
  
  proposer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.proposer)
}
#endif
inline void InternalBlock::set_proposer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.proposer)
}
inline void InternalBlock::set_proposer(const void* value, size_t size) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.proposer)
}
inline ::std::string* InternalBlock::mutable_proposer() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.proposer)
  return proposer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_proposer() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.proposer)
  
  return proposer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_proposer(::std::string* proposer) {
  if (proposer != nullptr) {
    
  } else {
    
  }
  proposer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.proposer)
}

// bytes sign = 6;
inline void InternalBlock::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::sign() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.sign)
  return sign_.GetNoArena();
}
inline void InternalBlock::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.sign)
}
#if LANG_CXX11
inline void InternalBlock::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.sign)
}
#endif
inline void InternalBlock::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.sign)
}
inline void InternalBlock::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.sign)
}
inline ::std::string* InternalBlock::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_sign() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_sign(::std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.sign)
}

// bytes pubkey = 7;
inline void InternalBlock::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::pubkey() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.pubkey)
  return pubkey_.GetNoArena();
}
inline void InternalBlock::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.pubkey)
}
#if LANG_CXX11
inline void InternalBlock::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.pubkey)
}
#endif
inline void InternalBlock::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.pubkey)
}
inline void InternalBlock::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.pubkey)
}
inline ::std::string* InternalBlock::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_pubkey() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.pubkey)
}

// bytes merkle_root = 8;
inline void InternalBlock::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::merkle_root() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.merkle_root)
  return merkle_root_.GetNoArena();
}
inline void InternalBlock::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.merkle_root)
}
#if LANG_CXX11
inline void InternalBlock::set_merkle_root(::std::string&& value) {
  
  merkle_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.merkle_root)
}
#endif
inline void InternalBlock::set_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.merkle_root)
}
inline void InternalBlock::set_merkle_root(const void* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.merkle_root)
}
inline ::std::string* InternalBlock::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_merkle_root() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.merkle_root)
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != nullptr) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.merkle_root)
}

// int64 height = 9;
inline void InternalBlock::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InternalBlock::height() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.height)
  return height_;
}
inline void InternalBlock::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.height)
}

// int64 timestamp = 10;
inline void InternalBlock::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InternalBlock::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.timestamp)
  return timestamp_;
}
inline void InternalBlock::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.timestamp)
}

// repeated .pb.Transaction transactions = 11;
inline int InternalBlock::transactions_size() const {
  return transactions_.size();
}
inline void InternalBlock::clear_transactions() {
  transactions_.Clear();
}
inline ::pb::Transaction* InternalBlock::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.transactions)
  return transactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Transaction >*
InternalBlock::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.InternalBlock.transactions)
  return &transactions_;
}
inline const ::pb::Transaction& InternalBlock::transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.transactions)
  return transactions_.Get(index);
}
inline ::pb::Transaction* InternalBlock::add_transactions() {
  // @@protoc_insertion_point(field_add:pb.InternalBlock.transactions)
  return transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Transaction >&
InternalBlock::transactions() const {
  // @@protoc_insertion_point(field_list:pb.InternalBlock.transactions)
  return transactions_;
}

// int32 tx_count = 12;
inline void InternalBlock::clear_tx_count() {
  tx_count_ = 0;
}
inline ::google::protobuf::int32 InternalBlock::tx_count() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.tx_count)
  return tx_count_;
}
inline void InternalBlock::set_tx_count(::google::protobuf::int32 value) {
  
  tx_count_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.tx_count)
}

// repeated bytes merkle_tree = 13;
inline int InternalBlock::merkle_tree_size() const {
  return merkle_tree_.size();
}
inline void InternalBlock::clear_merkle_tree() {
  merkle_tree_.Clear();
}
inline const ::std::string& InternalBlock::merkle_tree(int index) const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.merkle_tree)
  return merkle_tree_.Get(index);
}
inline ::std::string* InternalBlock::mutable_merkle_tree(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.merkle_tree)
  return merkle_tree_.Mutable(index);
}
inline void InternalBlock::set_merkle_tree(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.InternalBlock.merkle_tree)
  merkle_tree_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void InternalBlock::set_merkle_tree(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.InternalBlock.merkle_tree)
  merkle_tree_.Mutable(index)->assign(std::move(value));
}
#endif
inline void InternalBlock::set_merkle_tree(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merkle_tree_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.merkle_tree)
}
inline void InternalBlock::set_merkle_tree(int index, const void* value, size_t size) {
  merkle_tree_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.merkle_tree)
}
inline ::std::string* InternalBlock::add_merkle_tree() {
  // @@protoc_insertion_point(field_add_mutable:pb.InternalBlock.merkle_tree)
  return merkle_tree_.Add();
}
inline void InternalBlock::add_merkle_tree(const ::std::string& value) {
  merkle_tree_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.InternalBlock.merkle_tree)
}
#if LANG_CXX11
inline void InternalBlock::add_merkle_tree(::std::string&& value) {
  merkle_tree_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.InternalBlock.merkle_tree)
}
#endif
inline void InternalBlock::add_merkle_tree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merkle_tree_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.InternalBlock.merkle_tree)
}
inline void InternalBlock::add_merkle_tree(const void* value, size_t size) {
  merkle_tree_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.InternalBlock.merkle_tree)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
InternalBlock::merkle_tree() const {
  // @@protoc_insertion_point(field_list:pb.InternalBlock.merkle_tree)
  return merkle_tree_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
InternalBlock::mutable_merkle_tree() {
  // @@protoc_insertion_point(field_mutable_list:pb.InternalBlock.merkle_tree)
  return &merkle_tree_;
}

// int64 curTerm = 16;
inline void InternalBlock::clear_curterm() {
  curterm_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InternalBlock::curterm() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.curTerm)
  return curterm_;
}
inline void InternalBlock::set_curterm(::google::protobuf::int64 value) {
  
  curterm_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.curTerm)
}

// int64 curBlockNum = 17;
inline void InternalBlock::clear_curblocknum() {
  curblocknum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InternalBlock::curblocknum() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.curBlockNum)
  return curblocknum_;
}
inline void InternalBlock::set_curblocknum(::google::protobuf::int64 value) {
  
  curblocknum_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.curBlockNum)
}

// map<string, string> failed_txs = 18;
inline int InternalBlock::failed_txs_size() const {
  return failed_txs_.size();
}
inline void InternalBlock::clear_failed_txs() {
  failed_txs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InternalBlock::failed_txs() const {
  // @@protoc_insertion_point(field_map:pb.InternalBlock.failed_txs)
  return failed_txs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InternalBlock::mutable_failed_txs() {
  // @@protoc_insertion_point(field_mutable_map:pb.InternalBlock.failed_txs)
  return failed_txs_.MutableMap();
}

// bool in_trunk = 14;
inline void InternalBlock::clear_in_trunk() {
  in_trunk_ = false;
}
inline bool InternalBlock::in_trunk() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.in_trunk)
  return in_trunk_;
}
inline void InternalBlock::set_in_trunk(bool value) {
  
  in_trunk_ = value;
  // @@protoc_insertion_point(field_set:pb.InternalBlock.in_trunk)
}

// bytes next_hash = 15;
inline void InternalBlock::clear_next_hash() {
  next_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalBlock::next_hash() const {
  // @@protoc_insertion_point(field_get:pb.InternalBlock.next_hash)
  return next_hash_.GetNoArena();
}
inline void InternalBlock::set_next_hash(const ::std::string& value) {
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InternalBlock.next_hash)
}
#if LANG_CXX11
inline void InternalBlock::set_next_hash(::std::string&& value) {
  
  next_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InternalBlock.next_hash)
}
#endif
inline void InternalBlock::set_next_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InternalBlock.next_hash)
}
inline void InternalBlock::set_next_hash(const void* value, size_t size) {
  
  next_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InternalBlock.next_hash)
}
inline ::std::string* InternalBlock::mutable_next_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.InternalBlock.next_hash)
  return next_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalBlock::release_next_hash() {
  // @@protoc_insertion_point(field_release:pb.InternalBlock.next_hash)
  
  return next_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalBlock::set_allocated_next_hash(::std::string* next_hash) {
  if (next_hash != nullptr) {
    
  } else {
    
  }
  next_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.InternalBlock.next_hash)
}

// -------------------------------------------------------------------

// BCStatus

// .pb.Header header = 1;
inline bool BCStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void BCStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& BCStatus::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.BCStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* BCStatus::release_header() {
  // @@protoc_insertion_point(field_release:pb.BCStatus.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* BCStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BCStatus.header)
  return header_;
}
inline void BCStatus::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.BCStatus.header)
}

// string bcname = 2;
inline void BCStatus::clear_bcname() {
  bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BCStatus::bcname() const {
  // @@protoc_insertion_point(field_get:pb.BCStatus.bcname)
  return bcname_.GetNoArena();
}
inline void BCStatus::set_bcname(const ::std::string& value) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BCStatus.bcname)
}
#if LANG_CXX11
inline void BCStatus::set_bcname(::std::string&& value) {
  
  bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BCStatus.bcname)
}
#endif
inline void BCStatus::set_bcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BCStatus.bcname)
}
inline void BCStatus::set_bcname(const char* value, size_t size) {
  
  bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BCStatus.bcname)
}
inline ::std::string* BCStatus::mutable_bcname() {
  
  // @@protoc_insertion_point(field_mutable:pb.BCStatus.bcname)
  return bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BCStatus::release_bcname() {
  // @@protoc_insertion_point(field_release:pb.BCStatus.bcname)
  
  return bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BCStatus::set_allocated_bcname(::std::string* bcname) {
  if (bcname != nullptr) {
    
  } else {
    
  }
  bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcname);
  // @@protoc_insertion_point(field_set_allocated:pb.BCStatus.bcname)
}

// .pb.LedgerMeta meta = 3;
inline bool BCStatus::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline void BCStatus::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::pb::LedgerMeta& BCStatus::meta() const {
  const ::pb::LedgerMeta* p = meta_;
  // @@protoc_insertion_point(field_get:pb.BCStatus.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::LedgerMeta*>(
      &::pb::_LedgerMeta_default_instance_);
}
inline ::pb::LedgerMeta* BCStatus::release_meta() {
  // @@protoc_insertion_point(field_release:pb.BCStatus.meta)
  
  ::pb::LedgerMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::pb::LedgerMeta* BCStatus::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::LedgerMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BCStatus.meta)
  return meta_;
}
inline void BCStatus::set_allocated_meta(::pb::LedgerMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:pb.BCStatus.meta)
}

// .pb.InternalBlock block = 4;
inline bool BCStatus::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void BCStatus::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::pb::InternalBlock& BCStatus::block() const {
  const ::pb::InternalBlock* p = block_;
  // @@protoc_insertion_point(field_get:pb.BCStatus.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::InternalBlock*>(
      &::pb::_InternalBlock_default_instance_);
}
inline ::pb::InternalBlock* BCStatus::release_block() {
  // @@protoc_insertion_point(field_release:pb.BCStatus.block)
  
  ::pb::InternalBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::pb::InternalBlock* BCStatus::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::InternalBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BCStatus.block)
  return block_;
}
inline void BCStatus::set_allocated_block(::pb::InternalBlock* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:pb.BCStatus.block)
}

// .pb.UtxoMeta utxoMeta = 5;
inline bool BCStatus::has_utxometa() const {
  return this != internal_default_instance() && utxometa_ != nullptr;
}
inline void BCStatus::clear_utxometa() {
  if (GetArenaNoVirtual() == nullptr && utxometa_ != nullptr) {
    delete utxometa_;
  }
  utxometa_ = nullptr;
}
inline const ::pb::UtxoMeta& BCStatus::utxometa() const {
  const ::pb::UtxoMeta* p = utxometa_;
  // @@protoc_insertion_point(field_get:pb.BCStatus.utxoMeta)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::UtxoMeta*>(
      &::pb::_UtxoMeta_default_instance_);
}
inline ::pb::UtxoMeta* BCStatus::release_utxometa() {
  // @@protoc_insertion_point(field_release:pb.BCStatus.utxoMeta)
  
  ::pb::UtxoMeta* temp = utxometa_;
  utxometa_ = nullptr;
  return temp;
}
inline ::pb::UtxoMeta* BCStatus::mutable_utxometa() {
  
  if (utxometa_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::UtxoMeta>(GetArenaNoVirtual());
    utxometa_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.BCStatus.utxoMeta)
  return utxometa_;
}
inline void BCStatus::set_allocated_utxometa(::pb::UtxoMeta* utxometa) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete utxometa_;
  }
  if (utxometa) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      utxometa = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, utxometa, submessage_arena);
    }
    
  } else {
    
  }
  utxometa_ = utxometa;
  // @@protoc_insertion_point(field_set_allocated:pb.BCStatus.utxoMeta)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Speeds

// map<string, double> SumSpeeds = 1;
inline int Speeds::sumspeeds_size() const {
  return sumspeeds_.size();
}
inline void Speeds::clear_sumspeeds() {
  sumspeeds_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
Speeds::sumspeeds() const {
  // @@protoc_insertion_point(field_map:pb.Speeds.SumSpeeds)
  return sumspeeds_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
Speeds::mutable_sumspeeds() {
  // @@protoc_insertion_point(field_mutable_map:pb.Speeds.SumSpeeds)
  return sumspeeds_.MutableMap();
}

// map<string, .pb.BCSpeeds> BcSpeeds = 2;
inline int Speeds::bcspeeds_size() const {
  return bcspeeds_.size();
}
inline void Speeds::clear_bcspeeds() {
  bcspeeds_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >&
Speeds::bcspeeds() const {
  // @@protoc_insertion_point(field_map:pb.Speeds.BcSpeeds)
  return bcspeeds_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::pb::BCSpeeds >*
Speeds::mutable_bcspeeds() {
  // @@protoc_insertion_point(field_mutable_map:pb.Speeds.BcSpeeds)
  return bcspeeds_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BCSpeeds

// map<string, double> BcSpeed = 1;
inline int BCSpeeds::bcspeed_size() const {
  return bcspeed_.size();
}
inline void BCSpeeds::clear_bcspeed() {
  bcspeed_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
BCSpeeds::bcspeed() const {
  // @@protoc_insertion_point(field_map:pb.BCSpeeds.BcSpeed)
  return bcspeed_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
BCSpeeds::mutable_bcspeed() {
  // @@protoc_insertion_point(field_mutable_map:pb.BCSpeeds.BcSpeed)
  return bcspeed_.MutableMap();
}

// -------------------------------------------------------------------

// SystemsStatus

// .pb.Header header = 1;
inline bool SystemsStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void SystemsStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::pb::Header& SystemsStatus::header() const {
  const ::pb::Header* p = header_;
  // @@protoc_insertion_point(field_get:pb.SystemsStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Header*>(
      &::pb::_Header_default_instance_);
}
inline ::pb::Header* SystemsStatus::release_header() {
  // @@protoc_insertion_point(field_release:pb.SystemsStatus.header)
  
  ::pb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::Header* SystemsStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SystemsStatus.header)
  return header_;
}
inline void SystemsStatus::set_allocated_header(::pb::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.SystemsStatus.header)
}

// repeated .pb.BCStatus bcs_status = 2;
inline int SystemsStatus::bcs_status_size() const {
  return bcs_status_.size();
}
inline void SystemsStatus::clear_bcs_status() {
  bcs_status_.Clear();
}
inline ::pb::BCStatus* SystemsStatus::mutable_bcs_status(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SystemsStatus.bcs_status)
  return bcs_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BCStatus >*
SystemsStatus::mutable_bcs_status() {
  // @@protoc_insertion_point(field_mutable_list:pb.SystemsStatus.bcs_status)
  return &bcs_status_;
}
inline const ::pb::BCStatus& SystemsStatus::bcs_status(int index) const {
  // @@protoc_insertion_point(field_get:pb.SystemsStatus.bcs_status)
  return bcs_status_.Get(index);
}
inline ::pb::BCStatus* SystemsStatus::add_bcs_status() {
  // @@protoc_insertion_point(field_add:pb.SystemsStatus.bcs_status)
  return bcs_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BCStatus >&
SystemsStatus::bcs_status() const {
  // @@protoc_insertion_point(field_list:pb.SystemsStatus.bcs_status)
  return bcs_status_;
}

// .pb.Speeds speeds = 3;
inline bool SystemsStatus::has_speeds() const {
  return this != internal_default_instance() && speeds_ != nullptr;
}
inline void SystemsStatus::clear_speeds() {
  if (GetArenaNoVirtual() == nullptr && speeds_ != nullptr) {
    delete speeds_;
  }
  speeds_ = nullptr;
}
inline const ::pb::Speeds& SystemsStatus::speeds() const {
  const ::pb::Speeds* p = speeds_;
  // @@protoc_insertion_point(field_get:pb.SystemsStatus.speeds)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Speeds*>(
      &::pb::_Speeds_default_instance_);
}
inline ::pb::Speeds* SystemsStatus::release_speeds() {
  // @@protoc_insertion_point(field_release:pb.SystemsStatus.speeds)
  
  ::pb::Speeds* temp = speeds_;
  speeds_ = nullptr;
  return temp;
}
inline ::pb::Speeds* SystemsStatus::mutable_speeds() {
  
  if (speeds_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Speeds>(GetArenaNoVirtual());
    speeds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SystemsStatus.speeds)
  return speeds_;
}
inline void SystemsStatus::set_allocated_speeds(::pb::Speeds* speeds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speeds_;
  }
  if (speeds) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speeds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speeds, submessage_arena);
    }
    
  } else {
    
  }
  speeds_ = speeds;
  // @@protoc_insertion_point(field_set_allocated:pb.SystemsStatus.speeds)
}

// repeated string peerUrls = 4;
inline int SystemsStatus::peerurls_size() const {
  return peerurls_.size();
}
inline void SystemsStatus::clear_peerurls() {
  peerurls_.Clear();
}
inline const ::std::string& SystemsStatus::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:pb.SystemsStatus.peerUrls)
  return peerurls_.Get(index);
}
inline ::std::string* SystemsStatus::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SystemsStatus.peerUrls)
  return peerurls_.Mutable(index);
}
inline void SystemsStatus::set_peerurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.SystemsStatus.peerUrls)
  peerurls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemsStatus::set_peerurls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.SystemsStatus.peerUrls)
  peerurls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemsStatus::set_peerurls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SystemsStatus.peerUrls)
}
inline void SystemsStatus::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SystemsStatus.peerUrls)
}
inline ::std::string* SystemsStatus::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:pb.SystemsStatus.peerUrls)
  return peerurls_.Add();
}
inline void SystemsStatus::add_peerurls(const ::std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.SystemsStatus.peerUrls)
}
#if LANG_CXX11
inline void SystemsStatus::add_peerurls(::std::string&& value) {
  peerurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.SystemsStatus.peerUrls)
}
#endif
inline void SystemsStatus::add_peerurls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.SystemsStatus.peerUrls)
}
inline void SystemsStatus::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.SystemsStatus.peerUrls)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SystemsStatus::peerurls() const {
  // @@protoc_insertion_point(field_list:pb.SystemsStatus.peerUrls)
  return peerurls_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SystemsStatus::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:pb.SystemsStatus.peerUrls)
  return &peerurls_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeRequest

// string module_name = 1;
inline void InvokeRequest::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeRequest::module_name() const {
  // @@protoc_insertion_point(field_get:pb.InvokeRequest.module_name)
  return module_name_.GetNoArena();
}
inline void InvokeRequest::set_module_name(const ::std::string& value) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InvokeRequest.module_name)
}
#if LANG_CXX11
inline void InvokeRequest::set_module_name(::std::string&& value) {
  
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InvokeRequest.module_name)
}
#endif
inline void InvokeRequest::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InvokeRequest.module_name)
}
inline void InvokeRequest::set_module_name(const char* value, size_t size) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InvokeRequest.module_name)
}
inline ::std::string* InvokeRequest::mutable_module_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.InvokeRequest.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:pb.InvokeRequest.module_name)
  
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeRequest::set_allocated_module_name(::std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:pb.InvokeRequest.module_name)
}

// string contract_name = 2;
inline void InvokeRequest::clear_contract_name() {
  contract_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeRequest::contract_name() const {
  // @@protoc_insertion_point(field_get:pb.InvokeRequest.contract_name)
  return contract_name_.GetNoArena();
}
inline void InvokeRequest::set_contract_name(const ::std::string& value) {
  
  contract_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InvokeRequest.contract_name)
}
#if LANG_CXX11
inline void InvokeRequest::set_contract_name(::std::string&& value) {
  
  contract_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InvokeRequest.contract_name)
}
#endif
inline void InvokeRequest::set_contract_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InvokeRequest.contract_name)
}
inline void InvokeRequest::set_contract_name(const char* value, size_t size) {
  
  contract_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InvokeRequest.contract_name)
}
inline ::std::string* InvokeRequest::mutable_contract_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.InvokeRequest.contract_name)
  return contract_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeRequest::release_contract_name() {
  // @@protoc_insertion_point(field_release:pb.InvokeRequest.contract_name)
  
  return contract_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeRequest::set_allocated_contract_name(::std::string* contract_name) {
  if (contract_name != nullptr) {
    
  } else {
    
  }
  contract_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_name);
  // @@protoc_insertion_point(field_set_allocated:pb.InvokeRequest.contract_name)
}

// string method_name = 3;
inline void InvokeRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeRequest::method_name() const {
  // @@protoc_insertion_point(field_get:pb.InvokeRequest.method_name)
  return method_name_.GetNoArena();
}
inline void InvokeRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InvokeRequest.method_name)
}
#if LANG_CXX11
inline void InvokeRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InvokeRequest.method_name)
}
#endif
inline void InvokeRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InvokeRequest.method_name)
}
inline void InvokeRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InvokeRequest.method_name)
}
inline ::std::string* InvokeRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.InvokeRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:pb.InvokeRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:pb.InvokeRequest.method_name)
}

// map<string, bytes> args = 4;
inline int InvokeRequest::args_size() const {
  return args_.size();
}
inline void InvokeRequest::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InvokeRequest::args() const {
  // @@protoc_insertion_point(field_map:pb.InvokeRequest.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InvokeRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:pb.InvokeRequest.args)
  return args_.MutableMap();
}

// repeated .pb.ResourceLimit resource_limits = 5;
inline int InvokeRequest::resource_limits_size() const {
  return resource_limits_.size();
}
inline void InvokeRequest::clear_resource_limits() {
  resource_limits_.Clear();
}
inline ::pb::ResourceLimit* InvokeRequest::mutable_resource_limits(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InvokeRequest.resource_limits)
  return resource_limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ResourceLimit >*
InvokeRequest::mutable_resource_limits() {
  // @@protoc_insertion_point(field_mutable_list:pb.InvokeRequest.resource_limits)
  return &resource_limits_;
}
inline const ::pb::ResourceLimit& InvokeRequest::resource_limits(int index) const {
  // @@protoc_insertion_point(field_get:pb.InvokeRequest.resource_limits)
  return resource_limits_.Get(index);
}
inline ::pb::ResourceLimit* InvokeRequest::add_resource_limits() {
  // @@protoc_insertion_point(field_add:pb.InvokeRequest.resource_limits)
  return resource_limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ResourceLimit >&
InvokeRequest::resource_limits() const {
  // @@protoc_insertion_point(field_list:pb.InvokeRequest.resource_limits)
  return resource_limits_;
}

// -------------------------------------------------------------------

// TxInputExt

// string bucket = 1;
inline void TxInputExt::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInputExt::bucket() const {
  // @@protoc_insertion_point(field_get:pb.TxInputExt.bucket)
  return bucket_.GetNoArena();
}
inline void TxInputExt::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInputExt.bucket)
}
#if LANG_CXX11
inline void TxInputExt::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInputExt.bucket)
}
#endif
inline void TxInputExt::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInputExt.bucket)
}
inline void TxInputExt::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInputExt.bucket)
}
inline ::std::string* TxInputExt::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInputExt.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInputExt::release_bucket() {
  // @@protoc_insertion_point(field_release:pb.TxInputExt.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInputExt::set_allocated_bucket(::std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInputExt.bucket)
}

// bytes key = 2;
inline void TxInputExt::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInputExt::key() const {
  // @@protoc_insertion_point(field_get:pb.TxInputExt.key)
  return key_.GetNoArena();
}
inline void TxInputExt::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInputExt.key)
}
#if LANG_CXX11
inline void TxInputExt::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInputExt.key)
}
#endif
inline void TxInputExt::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInputExt.key)
}
inline void TxInputExt::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInputExt.key)
}
inline ::std::string* TxInputExt::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInputExt.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInputExt::release_key() {
  // @@protoc_insertion_point(field_release:pb.TxInputExt.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInputExt::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInputExt.key)
}

// bytes ref_txid = 3;
inline void TxInputExt::clear_ref_txid() {
  ref_txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxInputExt::ref_txid() const {
  // @@protoc_insertion_point(field_get:pb.TxInputExt.ref_txid)
  return ref_txid_.GetNoArena();
}
inline void TxInputExt::set_ref_txid(const ::std::string& value) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxInputExt.ref_txid)
}
#if LANG_CXX11
inline void TxInputExt::set_ref_txid(::std::string&& value) {
  
  ref_txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxInputExt.ref_txid)
}
#endif
inline void TxInputExt::set_ref_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxInputExt.ref_txid)
}
inline void TxInputExt::set_ref_txid(const void* value, size_t size) {
  
  ref_txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxInputExt.ref_txid)
}
inline ::std::string* TxInputExt::mutable_ref_txid() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxInputExt.ref_txid)
  return ref_txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInputExt::release_ref_txid() {
  // @@protoc_insertion_point(field_release:pb.TxInputExt.ref_txid)
  
  return ref_txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInputExt::set_allocated_ref_txid(::std::string* ref_txid) {
  if (ref_txid != nullptr) {
    
  } else {
    
  }
  ref_txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_txid);
  // @@protoc_insertion_point(field_set_allocated:pb.TxInputExt.ref_txid)
}

// int32 ref_offset = 4;
inline void TxInputExt::clear_ref_offset() {
  ref_offset_ = 0;
}
inline ::google::protobuf::int32 TxInputExt::ref_offset() const {
  // @@protoc_insertion_point(field_get:pb.TxInputExt.ref_offset)
  return ref_offset_;
}
inline void TxInputExt::set_ref_offset(::google::protobuf::int32 value) {
  
  ref_offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TxInputExt.ref_offset)
}

// -------------------------------------------------------------------

// TxOutputExt

// string bucket = 1;
inline void TxOutputExt::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutputExt::bucket() const {
  // @@protoc_insertion_point(field_get:pb.TxOutputExt.bucket)
  return bucket_.GetNoArena();
}
inline void TxOutputExt::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutputExt.bucket)
}
#if LANG_CXX11
inline void TxOutputExt::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutputExt.bucket)
}
#endif
inline void TxOutputExt::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutputExt.bucket)
}
inline void TxOutputExt::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutputExt.bucket)
}
inline ::std::string* TxOutputExt::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutputExt.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutputExt::release_bucket() {
  // @@protoc_insertion_point(field_release:pb.TxOutputExt.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutputExt::set_allocated_bucket(::std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutputExt.bucket)
}

// bytes key = 2;
inline void TxOutputExt::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutputExt::key() const {
  // @@protoc_insertion_point(field_get:pb.TxOutputExt.key)
  return key_.GetNoArena();
}
inline void TxOutputExt::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutputExt.key)
}
#if LANG_CXX11
inline void TxOutputExt::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutputExt.key)
}
#endif
inline void TxOutputExt::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutputExt.key)
}
inline void TxOutputExt::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutputExt.key)
}
inline ::std::string* TxOutputExt::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutputExt.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutputExt::release_key() {
  // @@protoc_insertion_point(field_release:pb.TxOutputExt.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutputExt::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutputExt.key)
}

// bytes value = 3;
inline void TxOutputExt::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxOutputExt::value() const {
  // @@protoc_insertion_point(field_get:pb.TxOutputExt.value)
  return value_.GetNoArena();
}
inline void TxOutputExt::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TxOutputExt.value)
}
#if LANG_CXX11
inline void TxOutputExt::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TxOutputExt.value)
}
#endif
inline void TxOutputExt::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TxOutputExt.value)
}
inline void TxOutputExt::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TxOutputExt.value)
}
inline ::std::string* TxOutputExt::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.TxOutputExt.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxOutputExt::release_value() {
  // @@protoc_insertion_point(field_release:pb.TxOutputExt.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutputExt::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.TxOutputExt.value)
}

// -------------------------------------------------------------------

// SignatureInfo

// string PublicKey = 1;
inline void SignatureInfo::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignatureInfo::publickey() const {
  // @@protoc_insertion_point(field_get:pb.SignatureInfo.PublicKey)
  return publickey_.GetNoArena();
}
inline void SignatureInfo::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SignatureInfo.PublicKey)
}
#if LANG_CXX11
inline void SignatureInfo::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SignatureInfo.PublicKey)
}
#endif
inline void SignatureInfo::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SignatureInfo.PublicKey)
}
inline void SignatureInfo::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SignatureInfo.PublicKey)
}
inline ::std::string* SignatureInfo::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:pb.SignatureInfo.PublicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignatureInfo::release_publickey() {
  // @@protoc_insertion_point(field_release:pb.SignatureInfo.PublicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureInfo::set_allocated_publickey(::std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:pb.SignatureInfo.PublicKey)
}

// bytes Sign = 2;
inline void SignatureInfo::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignatureInfo::sign() const {
  // @@protoc_insertion_point(field_get:pb.SignatureInfo.Sign)
  return sign_.GetNoArena();
}
inline void SignatureInfo::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SignatureInfo.Sign)
}
#if LANG_CXX11
inline void SignatureInfo::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SignatureInfo.Sign)
}
#endif
inline void SignatureInfo::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SignatureInfo.Sign)
}
inline void SignatureInfo::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SignatureInfo.Sign)
}
inline ::std::string* SignatureInfo::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:pb.SignatureInfo.Sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignatureInfo::release_sign() {
  // @@protoc_insertion_point(field_release:pb.SignatureInfo.Sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureInfo::set_allocated_sign(::std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:pb.SignatureInfo.Sign)
}

// -------------------------------------------------------------------

// ResourceLimit

// .pb.ResourceType type = 1;
inline void ResourceLimit::clear_type() {
  type_ = 0;
}
inline ::pb::ResourceType ResourceLimit::type() const {
  // @@protoc_insertion_point(field_get:pb.ResourceLimit.type)
  return static_cast< ::pb::ResourceType >(type_);
}
inline void ResourceLimit::set_type(::pb::ResourceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.ResourceLimit.type)
}

// int64 limit = 2;
inline void ResourceLimit::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceLimit::limit() const {
  // @@protoc_insertion_point(field_get:pb.ResourceLimit.limit)
  return limit_;
}
inline void ResourceLimit::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.ResourceLimit.limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Block_EBlockStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Block_EBlockStatus>() {
  return ::pb::Block_EBlockStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::XChainErrorEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::XChainErrorEnum>() {
  return ::pb::XChainErrorEnum_descriptor();
}
template <> struct is_proto_enum< ::pb::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TransactionStatus>() {
  return ::pb::TransactionStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ResourceType>() {
  return ::pb::ResourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_xchain_2eproto
