// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chainedbft.proto

package chainedbft_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// QCState is the phase of hotstuff
type QCState int32

const (
	QCState_NEW_VIEW   QCState = 0
	QCState_PREPARE    QCState = 1
	QCState_PRE_COMMIT QCState = 2
	QCState_COMMIT     QCState = 3
	QCState_DECIDE     QCState = 4
)

var QCState_name = map[int32]string{
	0: "NEW_VIEW",
	1: "PREPARE",
	2: "PRE_COMMIT",
	3: "COMMIT",
	4: "DECIDE",
}

var QCState_value = map[string]int32{
	"NEW_VIEW":   0,
	"PREPARE":    1,
	"PRE_COMMIT": 2,
	"COMMIT":     3,
	"DECIDE":     4,
}

func (x QCState) String() string {
	return proto.EnumName(QCState_name, int32(x))
}

func (QCState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{0}
}

// QuorumCert is a data type that combines a collection of signatures from replicas.
type QuorumCert struct {
	// The id of Proposal this QC certified.
	ProposalId []byte `protobuf:"bytes,1,opt,name=ProposalId,proto3" json:"ProposalId,omitempty"`
	// The msg of Proposal this QC certified.
	ProposalMsg []byte `protobuf:"bytes,2,opt,name=ProposalMsg,proto3" json:"ProposalMsg,omitempty"`
	// The current type of this QC certified.
	// the type contains `NEW_VIEW`, `PREPARE`
	Type QCState `protobuf:"varint,3,opt,name=Type,proto3,enum=chainedbft_pb.QCState" json:"Type,omitempty"`
	// The view number of this QC certified.
	ViewNumber int64 `protobuf:"varint,4,opt,name=ViewNumber,proto3" json:"ViewNumber,omitempty"`
	// SignInfos is the signs of the leader gathered from replicas
	// of a specifically certType.
	SignInfos            *QCSignInfos `protobuf:"bytes,5,opt,name=SignInfos,proto3" json:"SignInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QuorumCert) Reset()         { *m = QuorumCert{} }
func (m *QuorumCert) String() string { return proto.CompactTextString(m) }
func (*QuorumCert) ProtoMessage()    {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{0}
}

func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuorumCert.Unmarshal(m, b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuorumCert.Marshal(b, m, deterministic)
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return xxx_messageInfo_QuorumCert.Size(m)
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *QuorumCert) GetProposalMsg() []byte {
	if m != nil {
		return m.ProposalMsg
	}
	return nil
}

func (m *QuorumCert) GetType() QCState {
	if m != nil {
		return m.Type
	}
	return QCState_NEW_VIEW
}

func (m *QuorumCert) GetViewNumber() int64 {
	if m != nil {
		return m.ViewNumber
	}
	return 0
}

func (m *QuorumCert) GetSignInfos() *QCSignInfos {
	if m != nil {
		return m.SignInfos
	}
	return nil
}

// QCSignInfos is the signs of the leader gathered from replicas of a specifically certType.
// A slice of signs is used at present.
// TODO @qizheng09: It will be change to Threshold-Signatures after
// Crypto lib support Threshold-Signatures.
type QCSignInfos struct {
	// QCSignInfos
	QCSignInfos          []*SignInfo `protobuf:"bytes,1,rep,name=QCSignInfos,proto3" json:"QCSignInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QCSignInfos) Reset()         { *m = QCSignInfos{} }
func (m *QCSignInfos) String() string { return proto.CompactTextString(m) }
func (*QCSignInfos) ProtoMessage()    {}
func (*QCSignInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{1}
}

func (m *QCSignInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QCSignInfos.Unmarshal(m, b)
}
func (m *QCSignInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QCSignInfos.Marshal(b, m, deterministic)
}
func (m *QCSignInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QCSignInfos.Merge(m, src)
}
func (m *QCSignInfos) XXX_Size() int {
	return xxx_messageInfo_QCSignInfos.Size(m)
}
func (m *QCSignInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_QCSignInfos.DiscardUnknown(m)
}

var xxx_messageInfo_QCSignInfos proto.InternalMessageInfo

func (m *QCSignInfos) GetQCSignInfos() []*SignInfo {
	if m != nil {
		return m.QCSignInfos
	}
	return nil
}

// SignInfo is the signature information of the
type SignInfo struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PublicKey            string   `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Sign                 []byte   `protobuf:"bytes,3,opt,name=Sign,proto3" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInfo) Reset()         { *m = SignInfo{} }
func (m *SignInfo) String() string { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()    {}
func (*SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{2}
}

func (m *SignInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignInfo.Unmarshal(m, b)
}
func (m *SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignInfo.Marshal(b, m, deterministic)
}
func (m *SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInfo.Merge(m, src)
}
func (m *SignInfo) XXX_Size() int {
	return xxx_messageInfo_SignInfo.Size(m)
}
func (m *SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignInfo proto.InternalMessageInfo

func (m *SignInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SignInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SignInfo) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// ChainedBftPhaseMessage is the proposal message of the protocal.
// In Hotstuff, there are two kinds of messages, "NEW_VIEW_MESSAGE" and "QC_Message".
// A stable leader can skip this "NEW_VIEW_MESSAGE".
type ChainedBftPhaseMessage struct {
	// Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
	Type QCState `protobuf:"varint,1,opt,name=Type,proto3,enum=chainedbft_pb.QCState" json:"Type,omitempty"`
	// ViewNumber the current view number
	ViewNumber int64 `protobuf:"varint,2,opt,name=ViewNumber,proto3" json:"ViewNumber,omitempty"`
	// The new proposal send to other replicas while the
	ProposalQC *QuorumCert `protobuf:"bytes,3,opt,name=ProposalQC,proto3" json:"ProposalQC,omitempty"`
	// JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
	JustifyQC *QuorumCert `protobuf:"bytes,4,opt,name=JustifyQC,proto3" json:"JustifyQC,omitempty"`
	// MsgDigest is the digest of the msgg
	MsgDigest []byte `protobuf:"bytes,5,opt,name=MsgDigest,proto3" json:"MsgDigest,omitempty"`
	// Signature for this msg
	Signature            *SignInfo `protobuf:"bytes,6,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChainedBftPhaseMessage) Reset()         { *m = ChainedBftPhaseMessage{} }
func (m *ChainedBftPhaseMessage) String() string { return proto.CompactTextString(m) }
func (*ChainedBftPhaseMessage) ProtoMessage()    {}
func (*ChainedBftPhaseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{3}
}

func (m *ChainedBftPhaseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainedBftPhaseMessage.Unmarshal(m, b)
}
func (m *ChainedBftPhaseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainedBftPhaseMessage.Marshal(b, m, deterministic)
}
func (m *ChainedBftPhaseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainedBftPhaseMessage.Merge(m, src)
}
func (m *ChainedBftPhaseMessage) XXX_Size() int {
	return xxx_messageInfo_ChainedBftPhaseMessage.Size(m)
}
func (m *ChainedBftPhaseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainedBftPhaseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChainedBftPhaseMessage proto.InternalMessageInfo

func (m *ChainedBftPhaseMessage) GetType() QCState {
	if m != nil {
		return m.Type
	}
	return QCState_NEW_VIEW
}

func (m *ChainedBftPhaseMessage) GetViewNumber() int64 {
	if m != nil {
		return m.ViewNumber
	}
	return 0
}

func (m *ChainedBftPhaseMessage) GetProposalQC() *QuorumCert {
	if m != nil {
		return m.ProposalQC
	}
	return nil
}

func (m *ChainedBftPhaseMessage) GetJustifyQC() *QuorumCert {
	if m != nil {
		return m.JustifyQC
	}
	return nil
}

func (m *ChainedBftPhaseMessage) GetMsgDigest() []byte {
	if m != nil {
		return m.MsgDigest
	}
	return nil
}

func (m *ChainedBftPhaseMessage) GetSignature() *SignInfo {
	if m != nil {
		return m.Signature
	}
	return nil
}

// ChainedBftVoteMessage is the vote message of the protocal.
type ChainedBftVoteMessage struct {
	// The id of this message votes for.
	ProposalId []byte `protobuf:"bytes,1,opt,name=ProposalId,proto3" json:"ProposalId,omitempty"`
	// Replica will sign the QCMessage if the QuorumCert if valid.
	Signature            *SignInfo `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChainedBftVoteMessage) Reset()         { *m = ChainedBftVoteMessage{} }
func (m *ChainedBftVoteMessage) String() string { return proto.CompactTextString(m) }
func (*ChainedBftVoteMessage) ProtoMessage()    {}
func (*ChainedBftVoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2652a5c831a51bf, []int{4}
}

func (m *ChainedBftVoteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainedBftVoteMessage.Unmarshal(m, b)
}
func (m *ChainedBftVoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainedBftVoteMessage.Marshal(b, m, deterministic)
}
func (m *ChainedBftVoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainedBftVoteMessage.Merge(m, src)
}
func (m *ChainedBftVoteMessage) XXX_Size() int {
	return xxx_messageInfo_ChainedBftVoteMessage.Size(m)
}
func (m *ChainedBftVoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainedBftVoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChainedBftVoteMessage proto.InternalMessageInfo

func (m *ChainedBftVoteMessage) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *ChainedBftVoteMessage) GetSignature() *SignInfo {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("chainedbft_pb.QCState", QCState_name, QCState_value)
	proto.RegisterType((*QuorumCert)(nil), "chainedbft_pb.QuorumCert")
	proto.RegisterType((*QCSignInfos)(nil), "chainedbft_pb.QCSignInfos")
	proto.RegisterType((*SignInfo)(nil), "chainedbft_pb.SignInfo")
	proto.RegisterType((*ChainedBftPhaseMessage)(nil), "chainedbft_pb.ChainedBftPhaseMessage")
	proto.RegisterType((*ChainedBftVoteMessage)(nil), "chainedbft_pb.ChainedBftVoteMessage")
}

func init() { proto.RegisterFile("chainedbft.proto", fileDescriptor_e2652a5c831a51bf) }

var fileDescriptor_e2652a5c831a51bf = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0x9b, 0x40,
	0x14, 0x85, 0x3b, 0xd8, 0xb5, 0xc3, 0xc5, 0x8d, 0xd0, 0x95, 0x9a, 0x4e, 0xab, 0xaa, 0x42, 0xac,
	0x50, 0x16, 0x5e, 0xb8, 0xaa, 0xda, 0x2c, 0x53, 0x8c, 0x54, 0xda, 0x92, 0xe2, 0x49, 0xe4, 0x2c,
	0x2d, 0x88, 0xc7, 0x04, 0x29, 0x01, 0xc4, 0x0c, 0xaa, 0xfc, 0x50, 0x7d, 0x9b, 0x3e, 0x50, 0xc5,
	0x24, 0x78, 0x70, 0xa2, 0xfe, 0xed, 0xe6, 0x9e, 0x39, 0xdc, 0x83, 0xbe, 0x03, 0x60, 0x5f, 0x5d,
	0x27, 0x79, 0xc1, 0xd7, 0xe9, 0x46, 0x4e, 0xab, 0xba, 0x94, 0x25, 0x3e, 0xd3, 0xca, 0xaa, 0x4a,
	0xdd, 0x9f, 0x04, 0x60, 0xd1, 0x94, 0x75, 0x73, 0xeb, 0xf3, 0x5a, 0xe2, 0x1b, 0x80, 0xb8, 0x2e,
	0xab, 0x52, 0x24, 0x37, 0xe1, 0x9a, 0x12, 0x87, 0x78, 0x13, 0xd6, 0x53, 0xd0, 0x01, 0xab, 0x9b,
	0x22, 0x91, 0x51, 0x43, 0x19, 0xfa, 0x12, 0x1e, 0xc3, 0xf0, 0x62, 0x5b, 0x71, 0x3a, 0x70, 0x88,
	0x77, 0x38, 0x3b, 0x9a, 0xee, 0xc5, 0x4d, 0x17, 0xfe, 0xb9, 0x4c, 0x24, 0x67, 0xca, 0xd3, 0xa6,
	0x2d, 0x73, 0xfe, 0xfd, 0xac, 0xb9, 0x4d, 0x79, 0x4d, 0x87, 0x0e, 0xf1, 0x06, 0xac, 0xa7, 0xe0,
	0x07, 0x30, 0xcf, 0xf3, 0xac, 0x08, 0x8b, 0x4d, 0x29, 0xe8, 0x53, 0x87, 0x78, 0xd6, 0xec, 0xd5,
	0xe3, 0x85, 0x9d, 0x83, 0x69, 0xb3, 0xfb, 0x09, 0xac, 0xde, 0x0d, 0x9e, 0xec, 0x8d, 0x94, 0x38,
	0x03, 0xcf, 0x9a, 0xbd, 0x78, 0xb0, 0xaa, 0xbb, 0x67, 0x7d, 0xaf, 0xbb, 0x84, 0x83, 0x6e, 0x40,
	0x0a, 0xe3, 0xd3, 0xf5, 0xba, 0xe6, 0x42, 0x28, 0x34, 0x26, 0xeb, 0x46, 0x7c, 0x0d, 0x66, 0xdc,
	0xa4, 0x37, 0xf9, 0xd5, 0x17, 0xbe, 0x55, 0x54, 0x4c, 0xa6, 0x05, 0x44, 0x18, 0xb6, 0x3b, 0x14,
	0x93, 0x09, 0x53, 0x67, 0xf7, 0x87, 0x01, 0x47, 0xfe, 0x5d, 0xfe, 0xc7, 0x8d, 0x8c, 0xaf, 0x13,
	0xc1, 0x23, 0x2e, 0x44, 0x92, 0xf1, 0x1d, 0x42, 0xf2, 0xdf, 0x08, 0x8d, 0x47, 0x08, 0x4f, 0x74,
	0xa1, 0x0b, 0x5f, 0xbd, 0x80, 0x35, 0x7b, 0xf9, 0x70, 0xe3, 0xae, 0x7f, 0xd6, 0x33, 0xe3, 0x7b,
	0x30, 0x3f, 0x37, 0x42, 0xe6, 0x9b, 0xed, 0xc2, 0x57, 0xe5, 0xfc, 0xf1, 0x49, 0xed, 0x6d, 0x61,
	0x44, 0x22, 0x9b, 0xe7, 0x19, 0x17, 0x52, 0xd5, 0x36, 0x61, 0x5a, 0xc0, 0x77, 0x77, 0xa5, 0x26,
	0xb2, 0xa9, 0x39, 0x1d, 0xa9, 0xb5, 0xbf, 0x6d, 0x42, 0x3b, 0xdd, 0x02, 0x9e, 0x6b, 0x5c, 0xcb,
	0x52, 0xee, 0x68, 0xfd, 0xed, 0x93, 0xdd, 0xcb, 0x33, 0xfe, 0x35, 0xef, 0xf8, 0x2b, 0x8c, 0xef,
	0x49, 0xe3, 0x04, 0x0e, 0xce, 0x82, 0xcb, 0xd5, 0x32, 0x0c, 0x2e, 0xed, 0x27, 0x68, 0xc1, 0x38,
	0x66, 0x41, 0x7c, 0xca, 0x02, 0x9b, 0xe0, 0x21, 0x40, 0xcc, 0x82, 0x95, 0xff, 0x2d, 0x8a, 0xc2,
	0x0b, 0xdb, 0x40, 0x80, 0xd1, 0xfd, 0x79, 0xd0, 0x9e, 0xe7, 0x81, 0x1f, 0xce, 0x03, 0x7b, 0x98,
	0x8e, 0xd4, 0xcf, 0xf7, 0xf6, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xce, 0x2c, 0x5e, 0x90,
	0x03, 0x00, 0x00,
}
