// Code generated by go run generate-int.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"strconv"
	"sync/atomic"
)

// Uint32 provides an atomic uint32.
type Uint32 struct {
	noCopy noCopy
	val    uint32
}

// NewUint32 returns an atomic uint32 with a given value.
func NewUint32(val uint32) *Uint32 {
	return &Uint32{val: val}
}

// Raw returns a pointer to the uint32.
//
// It is only safe to access the pointer with methods from the
// sync/atomic package. Use caution if manually dereferencing.
func (v *Uint32) Raw() *uint32 {
	return &v.val
}

// Load returns the value of the uint32.
func (v *Uint32) Load() (val uint32) {
	return atomic.LoadUint32(&v.val)
}

// Store sets the value of the uint32.
func (v *Uint32) Store(val uint32) {
	atomic.StoreUint32(&v.val, val)
}

// Swap sets the value of the uint32 and returns the old value.
func (v *Uint32) Swap(new uint32) (old uint32) {
	return atomic.SwapUint32(&v.val, new)
}

// CompareAndSwap sets the value of the uint32 to new but only
// if it currently has the value old. It returns true if the swap
// succeeded.
func (v *Uint32) CompareAndSwap(old, new uint32) (swapped bool) {
	return atomic.CompareAndSwapUint32(&v.val, old, new)
}

// Add adds delta to the uint32.
func (v *Uint32) Add(delta uint32) (new uint32) {
	return atomic.AddUint32(&v.val, delta)
}

// Increment is a wrapper for Add(1).
func (v *Uint32) Increment() (new uint32) {
	return v.Add(1)
}

// Subtract subtracts delta from the uint32.
func (v *Uint32) Subtract(delta uint32) (new uint32) {
	return atomic.AddUint32(&v.val, ^(delta - 1))
}

// Decrement is a wrapper for Subtract(1).
func (v *Uint32) Decrement() (new uint32) {
	return v.Subtract(1)
}

// Reset is a wrapper for Swap(0).
func (v *Uint32) Reset() (old uint32) {
	return v.Swap(0)
}

// String implements fmt.Stringer.
func (v *Uint32) String() string {
	return strconv.FormatUint(uint64(v.Load()), 10)
}
