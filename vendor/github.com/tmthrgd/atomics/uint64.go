// Code generated by go run generate-int.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"strconv"
	"sync/atomic"
)

// Uint64 provides an atomic uint64.
type Uint64 struct {
	noCopy noCopy
	val    uint64
}

// NewUint64 returns an atomic uint64 with a given value.
func NewUint64(val uint64) *Uint64 {
	return &Uint64{val: val}
}

// Raw returns a pointer to the uint64.
//
// It is only safe to access the pointer with methods from the
// sync/atomic package. Use caution if manually dereferencing.
func (v *Uint64) Raw() *uint64 {
	return &v.val
}

// Load returns the value of the uint64.
func (v *Uint64) Load() (val uint64) {
	return atomic.LoadUint64(&v.val)
}

// Store sets the value of the uint64.
func (v *Uint64) Store(val uint64) {
	atomic.StoreUint64(&v.val, val)
}

// Swap sets the value of the uint64 and returns the old value.
func (v *Uint64) Swap(new uint64) (old uint64) {
	return atomic.SwapUint64(&v.val, new)
}

// CompareAndSwap sets the value of the uint64 to new but only
// if it currently has the value old. It returns true if the swap
// succeeded.
func (v *Uint64) CompareAndSwap(old, new uint64) (swapped bool) {
	return atomic.CompareAndSwapUint64(&v.val, old, new)
}

// Add adds delta to the uint64.
func (v *Uint64) Add(delta uint64) (new uint64) {
	return atomic.AddUint64(&v.val, delta)
}

// Increment is a wrapper for Add(1).
func (v *Uint64) Increment() (new uint64) {
	return v.Add(1)
}

// Subtract subtracts delta from the uint64.
func (v *Uint64) Subtract(delta uint64) (new uint64) {
	return atomic.AddUint64(&v.val, ^(delta - 1))
}

// Decrement is a wrapper for Subtract(1).
func (v *Uint64) Decrement() (new uint64) {
	return v.Subtract(1)
}

// Reset is a wrapper for Swap(0).
func (v *Uint64) Reset() (old uint64) {
	return v.Swap(0)
}

// String implements fmt.Stringer.
func (v *Uint64) String() string {
	return strconv.FormatUint(uint64(v.Load()), 10)
}
