// Code generated by go run generate-float.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"math"
	"strconv"
	"sync/atomic"
)

// Float64 provides an atomic float64.
type Float64 struct {
	noCopy noCopy
	val    uint64
}

// NewFloat64 returns an atomic float64 with a given value.
func NewFloat64(val float64) *Float64 {
	return &Float64{
		val: math.Float64bits(val),
	}
}

// Raw returns a pointer to the float64.
//
// It is only safe to access the pointer with methods from the
// sync/atomic package. Use caution if manually dereferencing.
//
// This returns the underlying uint64, to convert this
// to and from a float64, use math.Float64frombits
// and math.Float64bits respectively.
func (v *Float64) Raw() *uint64 {
	return &v.val
}

// Load returns the value of the float64.
func (v *Float64) Load() (val float64) {
	return math.Float64frombits(atomic.LoadUint64(&v.val))
}

// Store sets the value of the float64.
func (v *Float64) Store(val float64) {
	atomic.StoreUint64(&v.val, math.Float64bits(val))
}

// Swap sets the value of the float64 and returns the old value.
func (v *Float64) Swap(new float64) (old float64) {
	return math.Float64frombits(atomic.SwapUint64(&v.val, math.Float64bits(new)))
}

// CompareAndSwap sets the value of the float64 to new but only
// if it currently has the value old. It returns true if the swap
// succeeded.
func (v *Float64) CompareAndSwap(old, new float64) (swapped bool) {
	return atomic.CompareAndSwapUint64(&v.val, math.Float64bits(old), math.Float64bits(new))
}

// Add adds delta to the float64.
func (v *Float64) Add(delta float64) (new float64) {
	for {
		old := atomic.LoadUint64(&v.val)
		new := math.Float64frombits(old) + delta

		if atomic.CompareAndSwapUint64(&v.val, old, math.Float64bits(new)) {
			return new
		}
	}
}

// Increment is a wrapper for Add(1).
func (v *Float64) Increment() (new float64) {
	return v.Add(1)
}

// Subtract is a wrapper for Add(-delta)
func (v *Float64) Subtract(delta float64) (new float64) {
	return v.Add(-delta)
}

// Decrement is a wrapper for Add(-1).
func (v *Float64) Decrement() (new float64) {
	return v.Add(-1)
}

// Reset is a wrapper for Swap(0).
func (v *Float64) Reset() (old float64) {
	return v.Swap(0)
}

// String implements fmt.Stringer.
func (v *Float64) String() string {
	return strconv.FormatFloat(float64(v.Load()), 'g', -1, 64)
}
