// Code generated by go run generate-float.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"math"
	"strconv"
	"sync/atomic"
)

// Float32 provides an atomic float32.
type Float32 struct {
	noCopy noCopy
	val    uint32
}

// NewFloat32 returns an atomic float32 with a given value.
func NewFloat32(val float32) *Float32 {
	return &Float32{
		val: math.Float32bits(val),
	}
}

// Raw returns a pointer to the float32.
//
// It is only safe to access the pointer with methods from the
// sync/atomic package. Use caution if manually dereferencing.
//
// This returns the underlying uint32, to convert this
// to and from a float32, use math.Float32frombits
// and math.Float32bits respectively.
func (v *Float32) Raw() *uint32 {
	return &v.val
}

// Load returns the value of the float32.
func (v *Float32) Load() (val float32) {
	return math.Float32frombits(atomic.LoadUint32(&v.val))
}

// Store sets the value of the float32.
func (v *Float32) Store(val float32) {
	atomic.StoreUint32(&v.val, math.Float32bits(val))
}

// Swap sets the value of the float32 and returns the old value.
func (v *Float32) Swap(new float32) (old float32) {
	return math.Float32frombits(atomic.SwapUint32(&v.val, math.Float32bits(new)))
}

// CompareAndSwap sets the value of the float32 to new but only
// if it currently has the value old. It returns true if the swap
// succeeded.
func (v *Float32) CompareAndSwap(old, new float32) (swapped bool) {
	return atomic.CompareAndSwapUint32(&v.val, math.Float32bits(old), math.Float32bits(new))
}

// Add adds delta to the float32.
func (v *Float32) Add(delta float32) (new float32) {
	for {
		old := atomic.LoadUint32(&v.val)
		new := math.Float32frombits(old) + delta

		if atomic.CompareAndSwapUint32(&v.val, old, math.Float32bits(new)) {
			return new
		}
	}
}

// Increment is a wrapper for Add(1).
func (v *Float32) Increment() (new float32) {
	return v.Add(1)
}

// Subtract is a wrapper for Add(-delta)
func (v *Float32) Subtract(delta float32) (new float32) {
	return v.Add(-delta)
}

// Decrement is a wrapper for Add(-1).
func (v *Float32) Decrement() (new float32) {
	return v.Add(-1)
}

// Reset is a wrapper for Swap(0).
func (v *Float32) Reset() (old float32) {
	return v.Swap(0)
}

// String implements fmt.Stringer.
func (v *Float32) String() string {
	return strconv.FormatFloat(float64(v.Load()), 'g', -1, 32)
}
