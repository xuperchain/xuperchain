// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: xcheck.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type XcheckErrorEnum int32

const (
	XcheckErrorEnum_XCHECK_SUCCESS             XcheckErrorEnum = 0
	XcheckErrorEnum_XCHECK_UNKNOW_ERROR        XcheckErrorEnum = 1
	XcheckErrorEnum_XCHECK_CONNECT_REFUSE      XcheckErrorEnum = 2
	XcheckErrorEnum_XCHECK_INCONFORMITY_REFUSE XcheckErrorEnum = 3
)

// Enum value maps for XcheckErrorEnum.
var (
	XcheckErrorEnum_name = map[int32]string{
		0: "XCHECK_SUCCESS",
		1: "XCHECK_UNKNOW_ERROR",
		2: "XCHECK_CONNECT_REFUSE",
		3: "XCHECK_INCONFORMITY_REFUSE",
	}
	XcheckErrorEnum_value = map[string]int32{
		"XCHECK_SUCCESS":             0,
		"XCHECK_UNKNOW_ERROR":        1,
		"XCHECK_CONNECT_REFUSE":      2,
		"XCHECK_INCONFORMITY_REFUSE": 3,
	}
)

func (x XcheckErrorEnum) Enum() *XcheckErrorEnum {
	p := new(XcheckErrorEnum)
	*p = x
	return p
}

func (x XcheckErrorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XcheckErrorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_xcheck_proto_enumTypes[0].Descriptor()
}

func (XcheckErrorEnum) Type() protoreflect.EnumType {
	return &file_xcheck_proto_enumTypes[0]
}

func (x XcheckErrorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XcheckErrorEnum.Descriptor instead.
func (XcheckErrorEnum) EnumDescriptor() ([]byte, []int) {
	return file_xcheck_proto_rawDescGZIP(), []int{0}
}

// Check rpc service
type ComplianceCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// the check mask, reserved 32 bit for up to 32 check mask
	CheckMask int32 `protobuf:"varint,2,opt,name=check_mask,json=checkMask,proto3" json:"check_mask,omitempty"`
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the transaction data to be checked
	TxData *TxStatus `protobuf:"bytes,4,opt,name=tx_data,json=txData,proto3" json:"tx_data,omitempty"`
	// signature of this request
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ComplianceCheckRequest) Reset() {
	*x = ComplianceCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xcheck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckRequest) ProtoMessage() {}

func (x *ComplianceCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xcheck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckRequest.ProtoReflect.Descriptor instead.
func (*ComplianceCheckRequest) Descriptor() ([]byte, []int) {
	return file_xcheck_proto_rawDescGZIP(), []int{0}
}

func (x *ComplianceCheckRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ComplianceCheckRequest) GetCheckMask() int32 {
	if x != nil {
		return x.CheckMask
	}
	return 0
}

func (x *ComplianceCheckRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ComplianceCheckRequest) GetTxData() *TxStatus {
	if x != nil {
		return x.TxData
	}
	return nil
}

func (x *ComplianceCheckRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// ComplianceCheckResponse Compliance check response
type ComplianceCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Signature *SignatureInfo `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ComplianceCheckResponse) Reset() {
	*x = ComplianceCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xcheck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckResponse) ProtoMessage() {}

func (x *ComplianceCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xcheck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckResponse.ProtoReflect.Descriptor instead.
func (*ComplianceCheckResponse) Descriptor() ([]byte, []int) {
	return file_xcheck_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceCheckResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ComplianceCheckResponse) GetSignature() *SignatureInfo {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TransferCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Signature *SignatureInfo `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TransferCheckResponse) Reset() {
	*x = TransferCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xcheck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCheckResponse) ProtoMessage() {}

func (x *TransferCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xcheck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCheckResponse.ProtoReflect.Descriptor instead.
func (*TransferCheckResponse) Descriptor() ([]byte, []int) {
	return file_xcheck_proto_rawDescGZIP(), []int{2}
}

func (x *TransferCheckResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransferCheckResponse) GetSignature() *SignatureInfo {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_xcheck_proto protoreflect.FileDescriptor

var file_xcheck_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x78, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x74, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x6e, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x6c, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x79, 0x0a,
	0x0f, 0x58, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x0e, 0x58, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x58, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x58, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x58, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x03, 0x32, 0xce, 0x01, 0x0a, 0x06, 0x58, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_xcheck_proto_rawDescOnce sync.Once
	file_xcheck_proto_rawDescData = file_xcheck_proto_rawDesc
)

func file_xcheck_proto_rawDescGZIP() []byte {
	file_xcheck_proto_rawDescOnce.Do(func() {
		file_xcheck_proto_rawDescData = protoimpl.X.CompressGZIP(file_xcheck_proto_rawDescData)
	})
	return file_xcheck_proto_rawDescData
}

var file_xcheck_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xcheck_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_xcheck_proto_goTypes = []interface{}{
	(XcheckErrorEnum)(0),            // 0: pb.XcheckErrorEnum
	(*ComplianceCheckRequest)(nil),  // 1: pb.ComplianceCheckRequest
	(*ComplianceCheckResponse)(nil), // 2: pb.ComplianceCheckResponse
	(*TransferCheckResponse)(nil),   // 3: pb.TransferCheckResponse
	(*Header)(nil),                  // 4: pb.Header
	(*TxStatus)(nil),                // 5: pb.TxStatus
	(*SignatureInfo)(nil),           // 6: pb.SignatureInfo
}
var file_xcheck_proto_depIdxs = []int32{
	4, // 0: pb.ComplianceCheckRequest.header:type_name -> pb.Header
	5, // 1: pb.ComplianceCheckRequest.tx_data:type_name -> pb.TxStatus
	4, // 2: pb.ComplianceCheckResponse.header:type_name -> pb.Header
	6, // 3: pb.ComplianceCheckResponse.signature:type_name -> pb.SignatureInfo
	4, // 4: pb.TransferCheckResponse.header:type_name -> pb.Header
	6, // 5: pb.TransferCheckResponse.signature:type_name -> pb.SignatureInfo
	5, // 6: pb.Xcheck.ComplianceCheck:input_type -> pb.TxStatus
	5, // 7: pb.Xcheck.TransferCheck:input_type -> pb.TxStatus
	1, // 8: pb.Xcheck.ComplianceCheckV2:input_type -> pb.ComplianceCheckRequest
	2, // 9: pb.Xcheck.ComplianceCheck:output_type -> pb.ComplianceCheckResponse
	3, // 10: pb.Xcheck.TransferCheck:output_type -> pb.TransferCheckResponse
	2, // 11: pb.Xcheck.ComplianceCheckV2:output_type -> pb.ComplianceCheckResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_xcheck_proto_init() }
func file_xcheck_proto_init() {
	if File_xcheck_proto != nil {
		return
	}
	file_xchain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xcheck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xcheck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xcheck_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xcheck_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xcheck_proto_goTypes,
		DependencyIndexes: file_xcheck_proto_depIdxs,
		EnumInfos:         file_xcheck_proto_enumTypes,
		MessageInfos:      file_xcheck_proto_msgTypes,
	}.Build()
	File_xcheck_proto = out.File
	file_xcheck_proto_rawDesc = nil
	file_xcheck_proto_goTypes = nil
	file_xcheck_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XcheckClient is the client API for Xcheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XcheckClient interface {
	// ComplianceCheck check transaction
	ComplianceCheck(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*ComplianceCheckResponse, error)
	TransferCheck(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TransferCheckResponse, error)
	// Add ComplianceCheckV2 to support compliance check mask
	ComplianceCheckV2(ctx context.Context, in *ComplianceCheckRequest, opts ...grpc.CallOption) (*ComplianceCheckResponse, error)
}

type xcheckClient struct {
	cc grpc.ClientConnInterface
}

func NewXcheckClient(cc grpc.ClientConnInterface) XcheckClient {
	return &xcheckClient{cc}
}

func (c *xcheckClient) ComplianceCheck(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*ComplianceCheckResponse, error) {
	out := new(ComplianceCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.Xcheck/ComplianceCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcheckClient) TransferCheck(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TransferCheckResponse, error) {
	out := new(TransferCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.Xcheck/TransferCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcheckClient) ComplianceCheckV2(ctx context.Context, in *ComplianceCheckRequest, opts ...grpc.CallOption) (*ComplianceCheckResponse, error) {
	out := new(ComplianceCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.Xcheck/ComplianceCheckV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XcheckServer is the server API for Xcheck service.
type XcheckServer interface {
	// ComplianceCheck check transaction
	ComplianceCheck(context.Context, *TxStatus) (*ComplianceCheckResponse, error)
	TransferCheck(context.Context, *TxStatus) (*TransferCheckResponse, error)
	// Add ComplianceCheckV2 to support compliance check mask
	ComplianceCheckV2(context.Context, *ComplianceCheckRequest) (*ComplianceCheckResponse, error)
}

// UnimplementedXcheckServer can be embedded to have forward compatible implementations.
type UnimplementedXcheckServer struct {
}

func (*UnimplementedXcheckServer) ComplianceCheck(context.Context, *TxStatus) (*ComplianceCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplianceCheck not implemented")
}
func (*UnimplementedXcheckServer) TransferCheck(context.Context, *TxStatus) (*TransferCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCheck not implemented")
}
func (*UnimplementedXcheckServer) ComplianceCheckV2(context.Context, *ComplianceCheckRequest) (*ComplianceCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplianceCheckV2 not implemented")
}

func RegisterXcheckServer(s *grpc.Server, srv XcheckServer) {
	s.RegisterService(&_Xcheck_serviceDesc, srv)
}

func _Xcheck_ComplianceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcheckServer).ComplianceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xcheck/ComplianceCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcheckServer).ComplianceCheck(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xcheck_TransferCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcheckServer).TransferCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xcheck/TransferCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcheckServer).TransferCheck(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xcheck_ComplianceCheckV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcheckServer).ComplianceCheckV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xcheck/ComplianceCheckV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcheckServer).ComplianceCheckV2(ctx, req.(*ComplianceCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xcheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Xcheck",
	HandlerType: (*XcheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComplianceCheck",
			Handler:    _Xcheck_ComplianceCheck_Handler,
		},
		{
			MethodName: "TransferCheck",
			Handler:    _Xcheck_TransferCheck_Handler,
		},
		{
			MethodName: "ComplianceCheckV2",
			Handler:    _Xcheck_ComplianceCheckV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xcheck.proto",
}
