// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: xchain.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type XChainErrorEnum int32

const (
	XChainErrorEnum_SUCCESS                        XChainErrorEnum = 0
	XChainErrorEnum_UNKNOW_ERROR                   XChainErrorEnum = 1
	XChainErrorEnum_CONNECT_REFUSE                 XChainErrorEnum = 2
	XChainErrorEnum_NOT_ENOUGH_UTXO_ERROR          XChainErrorEnum = 3
	XChainErrorEnum_UTXOVM_ALREADY_UNCONFIRM_ERROR XChainErrorEnum = 4
	XChainErrorEnum_UTXOVM_NOT_FOUND_ERROR         XChainErrorEnum = 5
	XChainErrorEnum_INPUT_OUTPUT_NOT_EQUAL_ERROR   XChainErrorEnum = 6
	XChainErrorEnum_TX_NOT_FOUND_ERROR             XChainErrorEnum = 7
	XChainErrorEnum_TX_SIGN_ERROR                  XChainErrorEnum = 8
	XChainErrorEnum_BLOCKCHAIN_NOTEXIST            XChainErrorEnum = 9
	XChainErrorEnum_VALIDATE_ERROR                 XChainErrorEnum = 10
	XChainErrorEnum_CANNOT_SYNC_BLOCK_ERROR        XChainErrorEnum = 11
	XChainErrorEnum_CONFIRM_BLOCK_ERROR            XChainErrorEnum = 12
	XChainErrorEnum_UTXOVM_PLAY_ERROR              XChainErrorEnum = 13
	XChainErrorEnum_WALK_ERROR                     XChainErrorEnum = 14
	XChainErrorEnum_NOT_READY_ERROR                XChainErrorEnum = 15
	XChainErrorEnum_BLOCK_EXIST_ERROR              XChainErrorEnum = 16
	XChainErrorEnum_ROOT_BLOCK_EXIST_ERROR         XChainErrorEnum = 17
	XChainErrorEnum_TX_DUPLICATE_ERROR             XChainErrorEnum = 19
	XChainErrorEnum_SERVICE_REFUSED_ERROR          XChainErrorEnum = 20
	XChainErrorEnum_TXDATA_SIGN_ERROR              XChainErrorEnum = 21
	XChainErrorEnum_TX_SLE_ERROR                   XChainErrorEnum = 25
	XChainErrorEnum_TX_FEE_NOT_ENOUGH_ERROR        XChainErrorEnum = 26
	XChainErrorEnum_UTXO_SIGN_ERROR                XChainErrorEnum = 28
	XChainErrorEnum_DPOS_QUERY_ERROR               XChainErrorEnum = 31
	XChainErrorEnum_RWSET_INVALID_ERROR            XChainErrorEnum = 33
	XChainErrorEnum_RWACL_INVALID_ERROR            XChainErrorEnum = 34
	XChainErrorEnum_GAS_NOT_ENOUGH_ERROR           XChainErrorEnum = 35
	XChainErrorEnum_TX_VERSION_INVALID_ERROR       XChainErrorEnum = 36
	XChainErrorEnum_COMPLIANCE_CHECK_NOT_APPROVED  XChainErrorEnum = 37
	XChainErrorEnum_ACCOUNT_CONTRACT_STATUS_ERROR  XChainErrorEnum = 38
	XChainErrorEnum_TX_VERIFICATION_ERROR          XChainErrorEnum = 40
)

// Enum value maps for XChainErrorEnum.
var (
	XChainErrorEnum_name = map[int32]string{
		0:  "SUCCESS",
		1:  "UNKNOW_ERROR",
		2:  "CONNECT_REFUSE",
		3:  "NOT_ENOUGH_UTXO_ERROR",
		4:  "UTXOVM_ALREADY_UNCONFIRM_ERROR",
		5:  "UTXOVM_NOT_FOUND_ERROR",
		6:  "INPUT_OUTPUT_NOT_EQUAL_ERROR",
		7:  "TX_NOT_FOUND_ERROR",
		8:  "TX_SIGN_ERROR",
		9:  "BLOCKCHAIN_NOTEXIST",
		10: "VALIDATE_ERROR",
		11: "CANNOT_SYNC_BLOCK_ERROR",
		12: "CONFIRM_BLOCK_ERROR",
		13: "UTXOVM_PLAY_ERROR",
		14: "WALK_ERROR",
		15: "NOT_READY_ERROR",
		16: "BLOCK_EXIST_ERROR",
		17: "ROOT_BLOCK_EXIST_ERROR",
		19: "TX_DUPLICATE_ERROR",
		20: "SERVICE_REFUSED_ERROR",
		21: "TXDATA_SIGN_ERROR",
		25: "TX_SLE_ERROR",
		26: "TX_FEE_NOT_ENOUGH_ERROR",
		28: "UTXO_SIGN_ERROR",
		31: "DPOS_QUERY_ERROR",
		33: "RWSET_INVALID_ERROR",
		34: "RWACL_INVALID_ERROR",
		35: "GAS_NOT_ENOUGH_ERROR",
		36: "TX_VERSION_INVALID_ERROR",
		37: "COMPLIANCE_CHECK_NOT_APPROVED",
		38: "ACCOUNT_CONTRACT_STATUS_ERROR",
		40: "TX_VERIFICATION_ERROR",
	}
	XChainErrorEnum_value = map[string]int32{
		"SUCCESS":                        0,
		"UNKNOW_ERROR":                   1,
		"CONNECT_REFUSE":                 2,
		"NOT_ENOUGH_UTXO_ERROR":          3,
		"UTXOVM_ALREADY_UNCONFIRM_ERROR": 4,
		"UTXOVM_NOT_FOUND_ERROR":         5,
		"INPUT_OUTPUT_NOT_EQUAL_ERROR":   6,
		"TX_NOT_FOUND_ERROR":             7,
		"TX_SIGN_ERROR":                  8,
		"BLOCKCHAIN_NOTEXIST":            9,
		"VALIDATE_ERROR":                 10,
		"CANNOT_SYNC_BLOCK_ERROR":        11,
		"CONFIRM_BLOCK_ERROR":            12,
		"UTXOVM_PLAY_ERROR":              13,
		"WALK_ERROR":                     14,
		"NOT_READY_ERROR":                15,
		"BLOCK_EXIST_ERROR":              16,
		"ROOT_BLOCK_EXIST_ERROR":         17,
		"TX_DUPLICATE_ERROR":             19,
		"SERVICE_REFUSED_ERROR":          20,
		"TXDATA_SIGN_ERROR":              21,
		"TX_SLE_ERROR":                   25,
		"TX_FEE_NOT_ENOUGH_ERROR":        26,
		"UTXO_SIGN_ERROR":                28,
		"DPOS_QUERY_ERROR":               31,
		"RWSET_INVALID_ERROR":            33,
		"RWACL_INVALID_ERROR":            34,
		"GAS_NOT_ENOUGH_ERROR":           35,
		"TX_VERSION_INVALID_ERROR":       36,
		"COMPLIANCE_CHECK_NOT_APPROVED":  37,
		"ACCOUNT_CONTRACT_STATUS_ERROR":  38,
		"TX_VERIFICATION_ERROR":          40,
	}
)

func (x XChainErrorEnum) Enum() *XChainErrorEnum {
	p := new(XChainErrorEnum)
	*p = x
	return p
}

func (x XChainErrorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XChainErrorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[0].Descriptor()
}

func (XChainErrorEnum) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[0]
}

func (x XChainErrorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XChainErrorEnum.Descriptor instead.
func (XChainErrorEnum) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{0}
}

// TransactionStatus is the status of transaction
type TransactionStatus int32

const (
	// Undefined status
	TransactionStatus_UNDEFINE TransactionStatus = 0
	// Transaction not exist
	TransactionStatus_NOEXIST TransactionStatus = 1
	// Transaction have been confirmed
	TransactionStatus_CONFIRM TransactionStatus = 2
	// Transaction is on the furcation
	TransactionStatus_FURCATION TransactionStatus = 3
	// Transaction have not been confirmed
	TransactionStatus_UNCONFIRM TransactionStatus = 4
	// Transaction occurs error
	TransactionStatus_FAILED TransactionStatus = 5
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "UNDEFINE",
		1: "NOEXIST",
		2: "CONFIRM",
		3: "FURCATION",
		4: "UNCONFIRM",
		5: "FAILED",
	}
	TransactionStatus_value = map[string]int32{
		"UNDEFINE":  0,
		"NOEXIST":   1,
		"CONFIRM":   2,
		"FURCATION": 3,
		"UNCONFIRM": 4,
		"FAILED":    5,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{1}
}

// View option to be choosed (only used in status filter currently)
type ViewOption int32

const (
	// Without any flag: Default
	ViewOption_NONE ViewOption = 0
	// Ledger flag: Get Ledger Info
	ViewOption_LEDGER ViewOption = 1
	// Utxo flag: Get UTXO Info
	ViewOption_UTXOINFO ViewOption = 2
	// Branch flag: Get BranchId Info
	ViewOption_BRANCHINFO ViewOption = 3
	// Peers flag: Get Peers Info
	ViewOption_PEERS ViewOption = 4
)

// Enum value maps for ViewOption.
var (
	ViewOption_name = map[int32]string{
		0: "NONE",
		1: "LEDGER",
		2: "UTXOINFO",
		3: "BRANCHINFO",
		4: "PEERS",
	}
	ViewOption_value = map[string]int32{
		"NONE":       0,
		"LEDGER":     1,
		"UTXOINFO":   2,
		"BRANCHINFO": 3,
		"PEERS":      4,
	}
)

func (x ViewOption) Enum() *ViewOption {
	p := new(ViewOption)
	*p = x
	return p
}

func (x ViewOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewOption) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[2].Descriptor()
}

func (ViewOption) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[2]
}

func (x ViewOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewOption.Descriptor instead.
func (ViewOption) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{2}
}

// --------   Account and Permission Section --------
type PermissionRule int32

const (
	PermissionRule_NULL           PermissionRule = 0 // 无权限控制
	PermissionRule_SIGN_THRESHOLD PermissionRule = 1 // 签名阈值策略
	PermissionRule_SIGN_AKSET     PermissionRule = 2 // AKSet签名策略
	PermissionRule_SIGN_RATE      PermissionRule = 3 // 签名率策略
	PermissionRule_SIGN_SUM       PermissionRule = 4 // 签名个数策略
	PermissionRule_CA_SERVER      PermissionRule = 5 // CA服务器鉴权
	PermissionRule_COMMUNITY_VOTE PermissionRule = 6 // 社区治理
)

// Enum value maps for PermissionRule.
var (
	PermissionRule_name = map[int32]string{
		0: "NULL",
		1: "SIGN_THRESHOLD",
		2: "SIGN_AKSET",
		3: "SIGN_RATE",
		4: "SIGN_SUM",
		5: "CA_SERVER",
		6: "COMMUNITY_VOTE",
	}
	PermissionRule_value = map[string]int32{
		"NULL":           0,
		"SIGN_THRESHOLD": 1,
		"SIGN_AKSET":     2,
		"SIGN_RATE":      3,
		"SIGN_SUM":       4,
		"CA_SERVER":      5,
		"COMMUNITY_VOTE": 6,
	}
)

func (x PermissionRule) Enum() *PermissionRule {
	p := new(PermissionRule)
	*p = x
	return p
}

func (x PermissionRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionRule) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[3].Descriptor()
}

func (PermissionRule) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[3]
}

func (x PermissionRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionRule.Descriptor instead.
func (PermissionRule) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{3}
}

type ResourceType int32

const (
	ResourceType_CPU    ResourceType = 0
	ResourceType_MEMORY ResourceType = 1
	ResourceType_DISK   ResourceType = 2
	ResourceType_XFEE   ResourceType = 3 // the fee used in kernel contract
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "CPU",
		1: "MEMORY",
		2: "DISK",
		3: "XFEE",
	}
	ResourceType_value = map[string]int32{
		"CPU":    0,
		"MEMORY": 1,
		"DISK":   2,
		"XFEE":   3,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[4].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[4]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{4}
}

type Block_EBlockStatus int32

const (
	Block_ERROR   Block_EBlockStatus = 0
	Block_TRUNK   Block_EBlockStatus = 1
	Block_BRANCH  Block_EBlockStatus = 2
	Block_NOEXIST Block_EBlockStatus = 3
)

// Enum value maps for Block_EBlockStatus.
var (
	Block_EBlockStatus_name = map[int32]string{
		0: "ERROR",
		1: "TRUNK",
		2: "BRANCH",
		3: "NOEXIST",
	}
	Block_EBlockStatus_value = map[string]int32{
		"ERROR":   0,
		"TRUNK":   1,
		"BRANCH":  2,
		"NOEXIST": 3,
	}
)

func (x Block_EBlockStatus) Enum() *Block_EBlockStatus {
	p := new(Block_EBlockStatus)
	*p = x
	return p
}

func (x Block_EBlockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_EBlockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_xchain_proto_enumTypes[5].Descriptor()
}

func (Block_EBlockStatus) Type() protoreflect.EnumType {
	return &file_xchain_proto_enumTypes[5]
}

func (x Block_EBlockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_EBlockStatus.Descriptor instead.
func (Block_EBlockStatus) EnumDescriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{5, 0}
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logid    string          `protobuf:"bytes,1,opt,name=logid,proto3" json:"logid,omitempty"`                       //如果logid没填写，生成一个
	FromNode string          `protobuf:"bytes,2,opt,name=from_node,json=fromNode,proto3" json:"from_node,omitempty"` // call rpc client address，客户端可以为空，节点一定要写自己的address
	Error    XChainErrorEnum `protobuf:"varint,3,opt,name=error,proto3,enum=pb.XChainErrorEnum" json:"error,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetLogid() string {
	if x != nil {
		return x.Logid
	}
	return ""
}

func (x *Header) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Header) GetError() XChainErrorEnum {
	if x != nil {
		return x.Error
	}
	return XChainErrorEnum_SUCCESS
}

type TxDataAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                //地址
	Amount       string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`                                  //金额
	FrozenHeight int64  `protobuf:"varint,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"` //冻结高度
}

func (x *TxDataAccount) Reset() {
	*x = TxDataAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataAccount) ProtoMessage() {}

func (x *TxDataAccount) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataAccount.ProtoReflect.Descriptor instead.
func (*TxDataAccount) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{1}
}

func (x *TxDataAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxDataAccount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TxDataAccount) GetFrozenHeight() int64 {
	if x != nil {
		return x.FrozenHeight
	}
	return 0
}

type TxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	// Transaction id
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// Block name
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// Account which start the transaction
	FromAddr string `protobuf:"bytes,3,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	// The pk of the account which start the transaction
	FromPubkey string `protobuf:"bytes,4,opt,name=from_pubkey,json=fromPubkey,proto3" json:"from_pubkey,omitempty"`
	// The sk of the account which start the transaction
	FromScrkey string `protobuf:"bytes,5,opt,name=from_scrkey,json=fromScrkey,proto3" json:"from_scrkey,omitempty"`
	// if user don't want to provide scrkey, he should sign the txdata into
	// user_sign
	UserSign []byte `protobuf:"bytes,14,opt,name=user_sign,json=userSign,proto3" json:"user_sign,omitempty"`
	// The account list accept tx
	Account []*TxDataAccount `protobuf:"bytes,6,rep,name=account,proto3" json:"account,omitempty"`
	// Random number used to avoid replay attacks
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp to launch the Tx
	Timestamp int64  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Desc      []byte `protobuf:"bytes,12,opt,name=desc,proto3" json:"desc,omitempty"`
	// tx version
	Version int32 `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TxData) Reset() {
	*x = TxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxData) ProtoMessage() {}

func (x *TxData) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxData.ProtoReflect.Descriptor instead.
func (*TxData) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{2}
}

func (x *TxData) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxData) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *TxData) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *TxData) GetFromAddr() string {
	if x != nil {
		return x.FromAddr
	}
	return ""
}

func (x *TxData) GetFromPubkey() string {
	if x != nil {
		return x.FromPubkey
	}
	return ""
}

func (x *TxData) GetFromScrkey() string {
	if x != nil {
		return x.FromScrkey
	}
	return ""
}

func (x *TxData) GetUserSign() []byte {
	if x != nil {
		return x.UserSign
	}
	return nil
}

func (x *TxData) GetAccount() []*TxDataAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TxData) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *TxData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TxData) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *TxData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname   string            `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Txid     []byte            `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Status   TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.TransactionStatus" json:"status,omitempty"` //当前状态
	Distance int64             `protobuf:"varint,5,opt,name=distance,proto3" json:"distance,omitempty"`                       //离主干末端的距离（如果在主干上)
	Tx       *Transaction      `protobuf:"bytes,7,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *TxStatus) Reset() {
	*x = TxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStatus) ProtoMessage() {}

func (x *TxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStatus.ProtoReflect.Descriptor instead.
func (*TxStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{3}
}

func (x *TxStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxStatus) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *TxStatus) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *TxStatus) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_UNDEFINE
}

func (x *TxStatus) GetDistance() int64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *TxStatus) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type BatchTxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Txs    []*TxStatus `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`
}

func (x *BatchTxs) Reset() {
	*x = BatchTxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTxs) ProtoMessage() {}

func (x *BatchTxs) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTxs.ProtoReflect.Descriptor instead.
func (*BatchTxs) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{4}
}

func (x *BatchTxs) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BatchTxs) GetTxs() []*TxStatus {
	if x != nil {
		return x.Txs
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string             `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Blockid []byte             `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	Status  Block_EBlockStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.Block_EBlockStatus" json:"status,omitempty"`
	Block   *InternalBlock     `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{5}
}

func (x *Block) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *Block) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *Block) GetStatus() Block_EBlockStatus {
	if x != nil {
		return x.Status
	}
	return Block_ERROR
}

func (x *Block) GetBlock() *InternalBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type BlockID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Blockid []byte  `protobuf:"bytes,2,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// if need content
	NeedContent bool `protobuf:"varint,3,opt,name=need_content,json=needContent,proto3" json:"need_content,omitempty"` //是否需要内容
}

func (x *BlockID) Reset() {
	*x = BlockID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockID) ProtoMessage() {}

func (x *BlockID) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockID.ProtoReflect.Descriptor instead.
func (*BlockID) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{6}
}

func (x *BlockID) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockID) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *BlockID) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *BlockID) GetNeedContent() bool {
	if x != nil {
		return x.NeedContent
	}
	return false
}

type BlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Height int64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *BlockHeight) Reset() {
	*x = BlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeight) ProtoMessage() {}

func (x *BlockHeight) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeight.ProtoReflect.Descriptor instead.
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{7}
}

func (x *BlockHeight) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockHeight) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *BlockHeight) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type CommonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *CommonReply) Reset() {
	*x = CommonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReply) ProtoMessage() {}

func (x *CommonReply) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReply.ProtoReflect.Descriptor instead.
func (*CommonReply) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{8}
}

func (x *CommonReply) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type CommonIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ViewOption ViewOption `protobuf:"varint,2,opt,name=view_option,json=viewOption,proto3,enum=pb.ViewOption" json:"view_option,omitempty"`
}

func (x *CommonIn) Reset() {
	*x = CommonIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonIn) ProtoMessage() {}

func (x *CommonIn) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonIn.ProtoReflect.Descriptor instead.
func (*CommonIn) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{9}
}

func (x *CommonIn) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CommonIn) GetViewOption() ViewOption {
	if x != nil {
		return x.ViewOption
	}
	return ViewOption_NONE
}

type TokenDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bcname  string          `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Balance string          `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Error   XChainErrorEnum `protobuf:"varint,3,opt,name=error,proto3,enum=pb.XChainErrorEnum" json:"error,omitempty"`
}

func (x *TokenDetail) Reset() {
	*x = TokenDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenDetail) ProtoMessage() {}

func (x *TokenDetail) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenDetail.ProtoReflect.Descriptor instead.
func (*TokenDetail) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{10}
}

func (x *TokenDetail) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *TokenDetail) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenDetail) GetError() XChainErrorEnum {
	if x != nil {
		return x.Error
	}
	return XChainErrorEnum_SUCCESS
}

type AddressStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Address string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Bcs     []*TokenDetail `protobuf:"bytes,3,rep,name=bcs,proto3" json:"bcs,omitempty"`
}

func (x *AddressStatus) Reset() {
	*x = AddressStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressStatus) ProtoMessage() {}

func (x *AddressStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressStatus.ProtoReflect.Descriptor instead.
func (*AddressStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{11}
}

func (x *AddressStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddressStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressStatus) GetBcs() []*TokenDetail {
	if x != nil {
		return x.Bcs
	}
	return nil
}

type TokenFrozenDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	IsFrozen bool   `protobuf:"varint,2,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`
}

func (x *TokenFrozenDetail) Reset() {
	*x = TokenFrozenDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFrozenDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFrozenDetail) ProtoMessage() {}

func (x *TokenFrozenDetail) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFrozenDetail.ProtoReflect.Descriptor instead.
func (*TokenFrozenDetail) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{12}
}

func (x *TokenFrozenDetail) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenFrozenDetail) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

type TokenFrozenDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bcname string               `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Tfd    []*TokenFrozenDetail `protobuf:"bytes,2,rep,name=tfd,proto3" json:"tfd,omitempty"`
	Error  XChainErrorEnum      `protobuf:"varint,3,opt,name=error,proto3,enum=pb.XChainErrorEnum" json:"error,omitempty"`
}

func (x *TokenFrozenDetails) Reset() {
	*x = TokenFrozenDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFrozenDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFrozenDetails) ProtoMessage() {}

func (x *TokenFrozenDetails) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFrozenDetails.ProtoReflect.Descriptor instead.
func (*TokenFrozenDetails) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{13}
}

func (x *TokenFrozenDetails) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *TokenFrozenDetails) GetTfd() []*TokenFrozenDetail {
	if x != nil {
		return x.Tfd
	}
	return nil
}

func (x *TokenFrozenDetails) GetError() XChainErrorEnum {
	if x != nil {
		return x.Error
	}
	return XChainErrorEnum_SUCCESS
}

type AddressBalanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header               `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Address string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Tfds    []*TokenFrozenDetails `protobuf:"bytes,3,rep,name=tfds,proto3" json:"tfds,omitempty"`
}

func (x *AddressBalanceStatus) Reset() {
	*x = AddressBalanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressBalanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressBalanceStatus) ProtoMessage() {}

func (x *AddressBalanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressBalanceStatus.ProtoReflect.Descriptor instead.
func (*AddressBalanceStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{14}
}

func (x *AddressBalanceStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddressBalanceStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressBalanceStatus) GetTfds() []*TokenFrozenDetails {
	if x != nil {
		return x.Tfds
	}
	return nil
}

// Transaction input
type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id referenced to
	RefTxid []byte `protobuf:"bytes,1,opt,name=ref_txid,json=refTxid,proto3" json:"ref_txid,omitempty"`
	// The output offset of the transaction referenced to
	RefOffset int32 `protobuf:"varint,2,opt,name=ref_offset,json=refOffset,proto3" json:"ref_offset,omitempty"`
	// The address of the launcher
	FromAddr []byte `protobuf:"bytes,5,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	// The amount of the transaction
	Amount []byte `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// Frozen height
	FrozenHeight int64 `protobuf:"varint,7,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{15}
}

func (x *TxInput) GetRefTxid() []byte {
	if x != nil {
		return x.RefTxid
	}
	return nil
}

func (x *TxInput) GetRefOffset() int32 {
	if x != nil {
		return x.RefOffset
	}
	return 0
}

func (x *TxInput) GetFromAddr() []byte {
	if x != nil {
		return x.FromAddr
	}
	return nil
}

func (x *TxInput) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TxInput) GetFrozenHeight() int64 {
	if x != nil {
		return x.FrozenHeight
	}
	return 0
}

// Transaction output
type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of the transaction
	Amount []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The address of the launcher
	ToAddr []byte `protobuf:"bytes,2,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`
	// Fronzen height
	FrozenHeight int64 `protobuf:"varint,4,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{16}
}

func (x *TxOutput) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TxOutput) GetToAddr() []byte {
	if x != nil {
		return x.ToAddr
	}
	return nil
}

func (x *TxOutput) GetFrozenHeight() int64 {
	if x != nil {
		return x.FrozenHeight
	}
	return 0
}

// Unified Xuper Signature
type XuperSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	Signature  []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *XuperSignature) Reset() {
	*x = XuperSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XuperSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XuperSignature) ProtoMessage() {}

func (x *XuperSignature) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XuperSignature.ProtoReflect.Descriptor instead.
func (*XuperSignature) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{17}
}

func (x *XuperSignature) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *XuperSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Transaction is the information of the transaction
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// txid is the id of this transaction
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// the blockid the transaction belong to
	Blockid []byte `protobuf:"bytes,2,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// Transaction input list
	TxInputs []*TxInput `protobuf:"bytes,3,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	// Transaction output list
	TxOutputs []*TxOutput `protobuf:"bytes,4,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	// Transaction description or system contract
	Desc []byte `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// Mining rewards
	Coinbase bool `protobuf:"varint,7,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Random number used to avoid replay attacks
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp to launch the transaction
	Timestamp int64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// tx format version; tx格式版本号
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	// auto generated tx
	Autogen          bool             `protobuf:"varint,11,opt,name=autogen,proto3" json:"autogen,omitempty"`
	TxInputsExt      []*TxInputExt    `protobuf:"bytes,23,rep,name=tx_inputs_ext,json=txInputsExt,proto3" json:"tx_inputs_ext,omitempty"`
	TxOutputsExt     []*TxOutputExt   `protobuf:"bytes,24,rep,name=tx_outputs_ext,json=txOutputsExt,proto3" json:"tx_outputs_ext,omitempty"`
	ContractRequests []*InvokeRequest `protobuf:"bytes,25,rep,name=contract_requests,json=contractRequests,proto3" json:"contract_requests,omitempty"`
	// 权限系统新增字段
	// 交易发起者, 可以是一个Address或者一个Account
	Initiator string `protobuf:"bytes,26,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
	AuthRequire []string `protobuf:"bytes,27,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
	// 交易发起者对交易元数据签名，签名的内容包括auth_require字段
	InitiatorSigns []*SignatureInfo `protobuf:"bytes,28,rep,name=initiator_signs,json=initiatorSigns,proto3" json:"initiator_signs,omitempty"`
	// 收集到的签名
	AuthRequireSigns []*SignatureInfo `protobuf:"bytes,29,rep,name=auth_require_signs,json=authRequireSigns,proto3" json:"auth_require_signs,omitempty"`
	// 节点收到tx的时间戳，不参与签名
	ReceivedTimestamp int64 `protobuf:"varint,30,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	// 统一签名(支持多重签名/环签名等，与initiator_signs/auth_require_signs不同时使用)
	XuperSign *XuperSignature `protobuf:"bytes,31,opt,name=xuper_sign,json=xuperSign,proto3" json:"xuper_sign,omitempty"`
	// 可修改区块链标记
	ModifyBlock *ModifyBlock `protobuf:"bytes,32,opt,name=modify_block,json=modifyBlock,proto3" json:"modify_block,omitempty"`
	// HD加解密相关信息
	HDInfo *HDInfo `protobuf:"bytes,33,opt,name=HD_info,json=HDInfo,proto3" json:"HD_info,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{18}
}

func (x *Transaction) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *Transaction) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *Transaction) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *Transaction) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *Transaction) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Transaction) GetCoinbase() bool {
	if x != nil {
		return x.Coinbase
	}
	return false
}

func (x *Transaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetAutogen() bool {
	if x != nil {
		return x.Autogen
	}
	return false
}

func (x *Transaction) GetTxInputsExt() []*TxInputExt {
	if x != nil {
		return x.TxInputsExt
	}
	return nil
}

func (x *Transaction) GetTxOutputsExt() []*TxOutputExt {
	if x != nil {
		return x.TxOutputsExt
	}
	return nil
}

func (x *Transaction) GetContractRequests() []*InvokeRequest {
	if x != nil {
		return x.ContractRequests
	}
	return nil
}

func (x *Transaction) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *Transaction) GetAuthRequire() []string {
	if x != nil {
		return x.AuthRequire
	}
	return nil
}

func (x *Transaction) GetInitiatorSigns() []*SignatureInfo {
	if x != nil {
		return x.InitiatorSigns
	}
	return nil
}

func (x *Transaction) GetAuthRequireSigns() []*SignatureInfo {
	if x != nil {
		return x.AuthRequireSigns
	}
	return nil
}

func (x *Transaction) GetReceivedTimestamp() int64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *Transaction) GetXuperSign() *XuperSignature {
	if x != nil {
		return x.XuperSign
	}
	return nil
}

func (x *Transaction) GetModifyBlock() *ModifyBlock {
	if x != nil {
		return x.ModifyBlock
	}
	return nil
}

func (x *Transaction) GetHDInfo() *HDInfo {
	if x != nil {
		return x.HDInfo
	}
	return nil
}

// Ledger metadata
type LedgerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root block id
	RootBlockid []byte `protobuf:"bytes,1,opt,name=root_blockid,json=rootBlockid,proto3" json:"root_blockid,omitempty"`
	// tip block id
	TipBlockid []byte `protobuf:"bytes,2,opt,name=tip_blockid,json=tipBlockid,proto3" json:"tip_blockid,omitempty"`
	// the height of the trunk
	TrunkHeight int64 `protobuf:"varint,3,opt,name=trunk_height,json=trunkHeight,proto3" json:"trunk_height,omitempty"`
}

func (x *LedgerMeta) Reset() {
	*x = LedgerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerMeta) ProtoMessage() {}

func (x *LedgerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerMeta.ProtoReflect.Descriptor instead.
func (*LedgerMeta) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{19}
}

func (x *LedgerMeta) GetRootBlockid() []byte {
	if x != nil {
		return x.RootBlockid
	}
	return nil
}

func (x *LedgerMeta) GetTipBlockid() []byte {
	if x != nil {
		return x.TipBlockid
	}
	return nil
}

func (x *LedgerMeta) GetTrunkHeight() int64 {
	if x != nil {
		return x.TrunkHeight
	}
	return 0
}

// Utxo metadata
type UtxoMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestBlockid            []byte           `protobuf:"bytes,1,opt,name=latest_blockid,json=latestBlockid,proto3" json:"latest_blockid,omitempty"` // utxo vm目前执行到的blockid
	LockKeyList              []string         `protobuf:"bytes,2,rep,name=lock_key_list,json=lockKeyList,proto3" json:"lock_key_list,omitempty"`
	UtxoTotal                string           `protobuf:"bytes,3,opt,name=utxo_total,json=utxoTotal,proto3" json:"utxo_total,omitempty"`                                                   // 当前utxo vm上的总资产
	AvgDelay                 int64            `protobuf:"varint,4,opt,name=avgDelay,proto3" json:"avgDelay,omitempty"`                                                                     // 平均上链延时
	UnconfirmTxAmount        int64            `protobuf:"varint,5,opt,name=unconfirmTxAmount,proto3" json:"unconfirmTxAmount,omitempty"`                                                   // 待确认交易量
	MaxBlockSize             int64            `protobuf:"varint,6,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`                                       // max block size
	ReservedContracts        []*InvokeRequest `protobuf:"bytes,7,rep,name=reserved_contracts,json=reservedContracts,proto3" json:"reserved_contracts,omitempty"`                           // preset contracts
	ForbiddenContract        *InvokeRequest   `protobuf:"bytes,8,opt,name=forbidden_contract,json=forbiddenContract,proto3" json:"forbidden_contract,omitempty"`                           // reset forbidden contract configuration
	NewAccountResourceAmount int64            `protobuf:"varint,9,opt,name=new_account_resource_amount,json=newAccountResourceAmount,proto3" json:"new_account_resource_amount,omitempty"` // the resource amount of creating an account
	IrreversibleBlockHeight  int64            `protobuf:"varint,10,opt,name=irreversibleBlockHeight,proto3" json:"irreversibleBlockHeight,omitempty"`                                      // 当前不可逆区块高度，与utxo对齐
	IrreversibleSlideWindow  int64            `protobuf:"varint,11,opt,name=irreversibleSlideWindow,proto3" json:"irreversibleSlideWindow,omitempty"`                                      // 当前不可逆区块高度调整窗口
	GasPrice                 *GasPrice        `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	GroupChainContract       *InvokeRequest   `protobuf:"bytes,13,opt,name=group_chain_contract,json=groupChainContract,proto3" json:"group_chain_contract,omitempty"` // 群组合约相关
}

func (x *UtxoMeta) Reset() {
	*x = UtxoMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoMeta) ProtoMessage() {}

func (x *UtxoMeta) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoMeta.ProtoReflect.Descriptor instead.
func (*UtxoMeta) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{20}
}

func (x *UtxoMeta) GetLatestBlockid() []byte {
	if x != nil {
		return x.LatestBlockid
	}
	return nil
}

func (x *UtxoMeta) GetLockKeyList() []string {
	if x != nil {
		return x.LockKeyList
	}
	return nil
}

func (x *UtxoMeta) GetUtxoTotal() string {
	if x != nil {
		return x.UtxoTotal
	}
	return ""
}

func (x *UtxoMeta) GetAvgDelay() int64 {
	if x != nil {
		return x.AvgDelay
	}
	return 0
}

func (x *UtxoMeta) GetUnconfirmTxAmount() int64 {
	if x != nil {
		return x.UnconfirmTxAmount
	}
	return 0
}

func (x *UtxoMeta) GetMaxBlockSize() int64 {
	if x != nil {
		return x.MaxBlockSize
	}
	return 0
}

func (x *UtxoMeta) GetReservedContracts() []*InvokeRequest {
	if x != nil {
		return x.ReservedContracts
	}
	return nil
}

func (x *UtxoMeta) GetForbiddenContract() *InvokeRequest {
	if x != nil {
		return x.ForbiddenContract
	}
	return nil
}

func (x *UtxoMeta) GetNewAccountResourceAmount() int64 {
	if x != nil {
		return x.NewAccountResourceAmount
	}
	return 0
}

func (x *UtxoMeta) GetIrreversibleBlockHeight() int64 {
	if x != nil {
		return x.IrreversibleBlockHeight
	}
	return 0
}

func (x *UtxoMeta) GetIrreversibleSlideWindow() int64 {
	if x != nil {
		return x.IrreversibleSlideWindow
	}
	return 0
}

func (x *UtxoMeta) GetGasPrice() *GasPrice {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *UtxoMeta) GetGroupChainContract() *InvokeRequest {
	if x != nil {
		return x.GroupChainContract
	}
	return nil
}

type GasPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRate  int64 `protobuf:"varint,1,opt,name=cpu_rate,json=cpuRate,proto3" json:"cpu_rate,omitempty"`
	MemRate  int64 `protobuf:"varint,2,opt,name=mem_rate,json=memRate,proto3" json:"mem_rate,omitempty"`
	DiskRate int64 `protobuf:"varint,3,opt,name=disk_rate,json=diskRate,proto3" json:"disk_rate,omitempty"`
	XfeeRate int64 `protobuf:"varint,4,opt,name=xfee_rate,json=xfeeRate,proto3" json:"xfee_rate,omitempty"`
}

func (x *GasPrice) Reset() {
	*x = GasPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasPrice) ProtoMessage() {}

func (x *GasPrice) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasPrice.ProtoReflect.Descriptor instead.
func (*GasPrice) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{21}
}

func (x *GasPrice) GetCpuRate() int64 {
	if x != nil {
		return x.CpuRate
	}
	return 0
}

func (x *GasPrice) GetMemRate() int64 {
	if x != nil {
		return x.MemRate
	}
	return 0
}

func (x *GasPrice) GetDiskRate() int64 {
	if x != nil {
		return x.DiskRate
	}
	return 0
}

func (x *GasPrice) GetXfeeRate() int64 {
	if x != nil {
		return x.XfeeRate
	}
	return 0
}

// The internal block struct
type InternalBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block version
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Random number used to avoid replay attacks
	Nonce int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// blockid generate the hash sign of the block used by sha256
	Blockid []byte `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// pre_hash is the parent blockid of the block
	PreHash []byte `protobuf:"bytes,4,opt,name=pre_hash,json=preHash,proto3" json:"pre_hash,omitempty"`
	// The miner id
	Proposer []byte `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// The sign which miner signed: blockid + nonce + timestamp
	Sign []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	// The pk of the miner
	Pubkey []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The Merkle Tree root
	MerkleRoot []byte `protobuf:"bytes,8,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The height of the blockchain
	Height int64 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// Timestamp of the block
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transactions of the block, only txid stored on kv, the detail information
	// stored in another table
	Transactions []*Transaction `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The transaction count of the block
	TxCount int32 `protobuf:"varint,12,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// 所有交易hash的merkle tree
	MerkleTree  [][]byte          `protobuf:"bytes,13,rep,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
	CurTerm     int64             `protobuf:"varint,16,opt,name=curTerm,proto3" json:"curTerm,omitempty"`
	CurBlockNum int64             `protobuf:"varint,17,opt,name=curBlockNum,proto3" json:"curBlockNum,omitempty"`
	FailedTxs   map[string]string `protobuf:"bytes,18,rep,name=failed_txs,json=failedTxs,proto3" json:"failed_txs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // txid -> failed reason
	TargetBits  int32             `protobuf:"varint,19,opt,name=targetBits,proto3" json:"targetBits,omitempty"`
	// Justify used in chained-bft
	Justify *QuorumCert `protobuf:"bytes,20,opt,name=Justify,proto3" json:"Justify,omitempty"`
	// 下面的属性会动态变化
	// If the block is on the trunk
	InTrunk bool `protobuf:"varint,14,opt,name=in_trunk,json=inTrunk,proto3" json:"in_trunk,omitempty"`
	// Next next block which on trunk
	NextHash []byte `protobuf:"bytes,15,opt,name=next_hash,json=nextHash,proto3" json:"next_hash,omitempty"`
}

func (x *InternalBlock) Reset() {
	*x = InternalBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalBlock) ProtoMessage() {}

func (x *InternalBlock) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalBlock.ProtoReflect.Descriptor instead.
func (*InternalBlock) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{22}
}

func (x *InternalBlock) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InternalBlock) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *InternalBlock) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *InternalBlock) GetPreHash() []byte {
	if x != nil {
		return x.PreHash
	}
	return nil
}

func (x *InternalBlock) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *InternalBlock) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *InternalBlock) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *InternalBlock) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *InternalBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *InternalBlock) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InternalBlock) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *InternalBlock) GetTxCount() int32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *InternalBlock) GetMerkleTree() [][]byte {
	if x != nil {
		return x.MerkleTree
	}
	return nil
}

func (x *InternalBlock) GetCurTerm() int64 {
	if x != nil {
		return x.CurTerm
	}
	return 0
}

func (x *InternalBlock) GetCurBlockNum() int64 {
	if x != nil {
		return x.CurBlockNum
	}
	return 0
}

func (x *InternalBlock) GetFailedTxs() map[string]string {
	if x != nil {
		return x.FailedTxs
	}
	return nil
}

func (x *InternalBlock) GetTargetBits() int32 {
	if x != nil {
		return x.TargetBits
	}
	return 0
}

func (x *InternalBlock) GetJustify() *QuorumCert {
	if x != nil {
		return x.Justify
	}
	return nil
}

func (x *InternalBlock) GetInTrunk() bool {
	if x != nil {
		return x.InTrunk
	}
	return false
}

func (x *InternalBlock) GetNextHash() []byte {
	if x != nil {
		return x.NextHash
	}
	return nil
}

// BlockChain status
type BCStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// block name
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// ledger metadata
	Meta *LedgerMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// The information of the longest block
	Block *InternalBlock `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	// Utox information
	UtxoMeta *UtxoMeta `protobuf:"bytes,5,opt,name=utxoMeta,proto3" json:"utxoMeta,omitempty"`
	// Branch info
	BranchBlockid []string `protobuf:"bytes,6,rep,name=branchBlockid,proto3" json:"branchBlockid,omitempty"`
}

func (x *BCStatus) Reset() {
	*x = BCStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCStatus) ProtoMessage() {}

func (x *BCStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCStatus.ProtoReflect.Descriptor instead.
func (*BCStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{23}
}

func (x *BCStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BCStatus) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *BCStatus) GetMeta() *LedgerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BCStatus) GetBlock() *InternalBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BCStatus) GetUtxoMeta() *UtxoMeta {
	if x != nil {
		return x.UtxoMeta
	}
	return nil
}

func (x *BCStatus) GetBranchBlockid() []string {
	if x != nil {
		return x.BranchBlockid
	}
	return nil
}

type BCTipStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	IsTrunkTip bool    `protobuf:"varint,2,opt,name=is_trunk_tip,json=isTrunkTip,proto3" json:"is_trunk_tip,omitempty"`
}

func (x *BCTipStatus) Reset() {
	*x = BCTipStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCTipStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCTipStatus) ProtoMessage() {}

func (x *BCTipStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCTipStatus.ProtoReflect.Descriptor instead.
func (*BCTipStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{24}
}

func (x *BCTipStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BCTipStatus) GetIsTrunkTip() bool {
	if x != nil {
		return x.IsTrunkTip
	}
	return false
}

type BlockChains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Blockchains []string `protobuf:"bytes,2,rep,name=blockchains,proto3" json:"blockchains,omitempty"`
}

func (x *BlockChains) Reset() {
	*x = BlockChains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockChains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockChains) ProtoMessage() {}

func (x *BlockChains) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockChains.ProtoReflect.Descriptor instead.
func (*BlockChains) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{25}
}

func (x *BlockChains) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockChains) GetBlockchains() []string {
	if x != nil {
		return x.Blockchains
	}
	return nil
}

type Speeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SumSpeeds map[string]float64   `protobuf:"bytes,1,rep,name=SumSpeeds,proto3" json:"SumSpeeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BcSpeeds  map[string]*BCSpeeds `protobuf:"bytes,2,rep,name=BcSpeeds,proto3" json:"BcSpeeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Speeds) Reset() {
	*x = Speeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speeds) ProtoMessage() {}

func (x *Speeds) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speeds.ProtoReflect.Descriptor instead.
func (*Speeds) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{26}
}

func (x *Speeds) GetSumSpeeds() map[string]float64 {
	if x != nil {
		return x.SumSpeeds
	}
	return nil
}

func (x *Speeds) GetBcSpeeds() map[string]*BCSpeeds {
	if x != nil {
		return x.BcSpeeds
	}
	return nil
}

type BCSpeeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BcSpeed map[string]float64 `protobuf:"bytes,1,rep,name=BcSpeed,proto3" json:"BcSpeed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *BCSpeeds) Reset() {
	*x = BCSpeeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCSpeeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCSpeeds) ProtoMessage() {}

func (x *BCSpeeds) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCSpeeds.ProtoReflect.Descriptor instead.
func (*BCSpeeds) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{27}
}

func (x *BCSpeeds) GetBcSpeed() map[string]float64 {
	if x != nil {
		return x.BcSpeed
	}
	return nil
}

type SystemsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BcsStatus []*BCStatus `protobuf:"bytes,2,rep,name=bcs_status,json=bcsStatus,proto3" json:"bcs_status,omitempty"`
	Speeds    *Speeds     `protobuf:"bytes,3,opt,name=speeds,proto3" json:"speeds,omitempty"`
	PeerUrls  []string    `protobuf:"bytes,4,rep,name=peerUrls,proto3" json:"peerUrls,omitempty"`
}

func (x *SystemsStatus) Reset() {
	*x = SystemsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemsStatus) ProtoMessage() {}

func (x *SystemsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemsStatus.ProtoReflect.Descriptor instead.
func (*SystemsStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{28}
}

func (x *SystemsStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SystemsStatus) GetBcsStatus() []*BCStatus {
	if x != nil {
		return x.BcsStatus
	}
	return nil
}

func (x *SystemsStatus) GetSpeeds() *Speeds {
	if x != nil {
		return x.Speeds
	}
	return nil
}

func (x *SystemsStatus) GetPeerUrls() []string {
	if x != nil {
		return x.PeerUrls
	}
	return nil
}

type SystemsStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SystemsStatus *SystemsStatus `protobuf:"bytes,2,opt,name=systems_status,json=systemsStatus,proto3" json:"systems_status,omitempty"`
}

func (x *SystemsStatusReply) Reset() {
	*x = SystemsStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemsStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemsStatusReply) ProtoMessage() {}

func (x *SystemsStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemsStatusReply.ProtoReflect.Descriptor instead.
func (*SystemsStatusReply) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{29}
}

func (x *SystemsStatusReply) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SystemsStatusReply) GetSystemsStatus() *SystemsStatus {
	if x != nil {
		return x.SystemsStatus
	}
	return nil
}

// RawUrl return the node's  connect url
type RawUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RawUrl string  `protobuf:"bytes,2,opt,name=rawUrl,proto3" json:"rawUrl,omitempty"`
}

func (x *RawUrl) Reset() {
	*x = RawUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawUrl) ProtoMessage() {}

func (x *RawUrl) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawUrl.ProtoReflect.Descriptor instead.
func (*RawUrl) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{30}
}

func (x *RawUrl) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RawUrl) GetRawUrl() string {
	if x != nil {
		return x.RawUrl
	}
	return ""
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	ToAddr    []byte `protobuf:"bytes,2,opt,name=toAddr,proto3" json:"toAddr,omitempty"`
	ToPubkey  []byte `protobuf:"bytes,3,opt,name=toPubkey,proto3" json:"toPubkey,omitempty"`
	RefTxid   []byte `protobuf:"bytes,4,opt,name=refTxid,proto3" json:"refTxid,omitempty"`
	RefOffset int32  `protobuf:"varint,5,opt,name=refOffset,proto3" json:"refOffset,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{31}
}

func (x *Utxo) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Utxo) GetToAddr() []byte {
	if x != nil {
		return x.ToAddr
	}
	return nil
}

func (x *Utxo) GetToPubkey() []byte {
	if x != nil {
		return x.ToPubkey
	}
	return nil
}

func (x *Utxo) GetRefTxid() []byte {
	if x != nil {
		return x.RefTxid
	}
	return nil
}

func (x *Utxo) GetRefOffset() int32 {
	if x != nil {
		return x.RefOffset
	}
	return 0
}

// UtxoInput query info to query utxos
type UtxoInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// which bcname to select
	Bcname string `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	// address to select
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// publickey of the address
	Publickey string `protobuf:"bytes,4,opt,name=publickey,proto3" json:"publickey,omitempty"`
	// totalNeed refer the total need utxos to select
	TotalNeed string `protobuf:"bytes,5,opt,name=totalNeed,proto3" json:"totalNeed,omitempty"`
	// userSign of input
	UserSign []byte `protobuf:"bytes,7,opt,name=userSign,proto3" json:"userSign,omitempty"`
	// need lock
	NeedLock bool `protobuf:"varint,8,opt,name=needLock,proto3" json:"needLock,omitempty"`
}

func (x *UtxoInput) Reset() {
	*x = UtxoInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoInput) ProtoMessage() {}

func (x *UtxoInput) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoInput.ProtoReflect.Descriptor instead.
func (*UtxoInput) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{32}
}

func (x *UtxoInput) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UtxoInput) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *UtxoInput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UtxoInput) GetPublickey() string {
	if x != nil {
		return x.Publickey
	}
	return ""
}

func (x *UtxoInput) GetTotalNeed() string {
	if x != nil {
		return x.TotalNeed
	}
	return ""
}

func (x *UtxoInput) GetUserSign() []byte {
	if x != nil {
		return x.UserSign
	}
	return nil
}

func (x *UtxoInput) GetNeedLock() bool {
	if x != nil {
		return x.NeedLock
	}
	return false
}

// UtxoOutput query results
type UtxoOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// outSign return the output
	// bytes outSign = 2;
	// utxo list
	UtxoList []*Utxo `protobuf:"bytes,2,rep,name=utxoList,proto3" json:"utxoList,omitempty"`
	// total selected amount
	TotalSelected string `protobuf:"bytes,3,opt,name=totalSelected,proto3" json:"totalSelected,omitempty"`
}

func (x *UtxoOutput) Reset() {
	*x = UtxoOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoOutput) ProtoMessage() {}

func (x *UtxoOutput) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoOutput.ProtoReflect.Descriptor instead.
func (*UtxoOutput) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{33}
}

func (x *UtxoOutput) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UtxoOutput) GetUtxoList() []*Utxo {
	if x != nil {
		return x.UtxoList
	}
	return nil
}

func (x *UtxoOutput) GetTotalSelected() string {
	if x != nil {
		return x.TotalSelected
	}
	return ""
}

type NativeCodeDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// native code name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// code version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// digest of binary
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// the previous verion
	PrevVersion string `protobuf:"bytes,4,opt,name=prevVersion,proto3" json:"prevVersion,omitempty"`
	// xuper api version
	XuperApiVersion int32 `protobuf:"varint,5,opt,name=xuperApiVersion,proto3" json:"xuperApiVersion,omitempty"`
}

func (x *NativeCodeDesc) Reset() {
	*x = NativeCodeDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCodeDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCodeDesc) ProtoMessage() {}

func (x *NativeCodeDesc) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCodeDesc.ProtoReflect.Descriptor instead.
func (*NativeCodeDesc) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{34}
}

func (x *NativeCodeDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NativeCodeDesc) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NativeCodeDesc) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *NativeCodeDesc) GetPrevVersion() string {
	if x != nil {
		return x.PrevVersion
	}
	return ""
}

func (x *NativeCodeDesc) GetXuperApiVersion() int32 {
	if x != nil {
		return x.XuperApiVersion
	}
	return 0
}

type WasmCodeDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime      string `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Compiler     string `protobuf:"bytes,2,opt,name=compiler,proto3" json:"compiler,omitempty"`
	Digest       []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	VmCompiler   string `protobuf:"bytes,4,opt,name=vm_compiler,json=vmCompiler,proto3" json:"vm_compiler,omitempty"`
	ContractType string `protobuf:"bytes,5,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
}

func (x *WasmCodeDesc) Reset() {
	*x = WasmCodeDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmCodeDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmCodeDesc) ProtoMessage() {}

func (x *WasmCodeDesc) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmCodeDesc.ProtoReflect.Descriptor instead.
func (*WasmCodeDesc) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{35}
}

func (x *WasmCodeDesc) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *WasmCodeDesc) GetCompiler() string {
	if x != nil {
		return x.Compiler
	}
	return ""
}

func (x *WasmCodeDesc) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *WasmCodeDesc) GetVmCompiler() string {
	if x != nil {
		return x.VmCompiler
	}
	return ""
}

func (x *WasmCodeDesc) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

type NativeCodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc    *NativeCodeDesc `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Status  int32           `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Healthy bool            `protobuf:"varint,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
}

func (x *NativeCodeStatus) Reset() {
	*x = NativeCodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCodeStatus) ProtoMessage() {}

func (x *NativeCodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCodeStatus.ProtoReflect.Descriptor instead.
func (*NativeCodeStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{36}
}

func (x *NativeCodeStatus) GetDesc() *NativeCodeDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *NativeCodeStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NativeCodeStatus) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

// 候选人列表接口
type DposCandidatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
}

func (x *DposCandidatesRequest) Reset() {
	*x = DposCandidatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposCandidatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposCandidatesRequest) ProtoMessage() {}

func (x *DposCandidatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposCandidatesRequest.ProtoReflect.Descriptor instead.
func (*DposCandidatesRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{37}
}

func (x *DposCandidatesRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposCandidatesRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

// 候选人列表返回
type DposCandidatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CandidatesInfo []string `protobuf:"bytes,2,rep,name=candidatesInfo,proto3" json:"candidatesInfo,omitempty"`
}

func (x *DposCandidatesResponse) Reset() {
	*x = DposCandidatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposCandidatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposCandidatesResponse) ProtoMessage() {}

func (x *DposCandidatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposCandidatesResponse.ProtoReflect.Descriptor instead.
func (*DposCandidatesResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{38}
}

func (x *DposCandidatesResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposCandidatesResponse) GetCandidatesInfo() []string {
	if x != nil {
		return x.CandidatesInfo
	}
	return nil
}

// 提名者提名记录请求
type DposNominateRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DposNominateRecordsRequest) Reset() {
	*x = DposNominateRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposNominateRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposNominateRecordsRequest) ProtoMessage() {}

func (x *DposNominateRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposNominateRecordsRequest.ProtoReflect.Descriptor instead.
func (*DposNominateRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{39}
}

func (x *DposNominateRecordsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposNominateRecordsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *DposNominateRecordsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 候选人信息
type DposNominateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Txid      string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *DposNominateInfo) Reset() {
	*x = DposNominateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposNominateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposNominateInfo) ProtoMessage() {}

func (x *DposNominateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposNominateInfo.ProtoReflect.Descriptor instead.
func (*DposNominateInfo) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{40}
}

func (x *DposNominateInfo) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *DposNominateInfo) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 提名者提名记录返回
type DposNominateRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header          *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NominateRecords []*DposNominateInfo `protobuf:"bytes,2,rep,name=nominateRecords,proto3" json:"nominateRecords,omitempty"`
}

func (x *DposNominateRecordsResponse) Reset() {
	*x = DposNominateRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposNominateRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposNominateRecordsResponse) ProtoMessage() {}

func (x *DposNominateRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposNominateRecordsResponse.ProtoReflect.Descriptor instead.
func (*DposNominateRecordsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{41}
}

func (x *DposNominateRecordsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposNominateRecordsResponse) GetNominateRecords() []*DposNominateInfo {
	if x != nil {
		return x.NominateRecords
	}
	return nil
}

// 候选人被提名记录请求
type DposNomineeRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DposNomineeRecordsRequest) Reset() {
	*x = DposNomineeRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposNomineeRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposNomineeRecordsRequest) ProtoMessage() {}

func (x *DposNomineeRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposNomineeRecordsRequest.ProtoReflect.Descriptor instead.
func (*DposNomineeRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{42}
}

func (x *DposNomineeRecordsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposNomineeRecordsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *DposNomineeRecordsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 候选人被提名记录返回
type DposNomineeRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Txid   string  `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *DposNomineeRecordsResponse) Reset() {
	*x = DposNomineeRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposNomineeRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposNomineeRecordsResponse) ProtoMessage() {}

func (x *DposNomineeRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposNomineeRecordsResponse.ProtoReflect.Descriptor instead.
func (*DposNomineeRecordsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{43}
}

func (x *DposNomineeRecordsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposNomineeRecordsResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 选民投票记录请求
type DposVoteRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DposVoteRecordsRequest) Reset() {
	*x = DposVoteRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposVoteRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposVoteRecordsRequest) ProtoMessage() {}

func (x *DposVoteRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposVoteRecordsRequest.ProtoReflect.Descriptor instead.
func (*DposVoteRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{44}
}

func (x *DposVoteRecordsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposVoteRecordsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *DposVoteRecordsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 选民投票记录
type VoteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Txid      string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *VoteRecord) Reset() {
	*x = VoteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRecord) ProtoMessage() {}

func (x *VoteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRecord.ProtoReflect.Descriptor instead.
func (*VoteRecord) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{45}
}

func (x *VoteRecord) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *VoteRecord) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 选民投票记录返回
type DposVoteRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 选民投票txid记录
	VoteTxidRecords []*VoteRecord `protobuf:"bytes,2,rep,name=voteTxidRecords,proto3" json:"voteTxidRecords,omitempty"`
}

func (x *DposVoteRecordsResponse) Reset() {
	*x = DposVoteRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposVoteRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposVoteRecordsResponse) ProtoMessage() {}

func (x *DposVoteRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposVoteRecordsResponse.ProtoReflect.Descriptor instead.
func (*DposVoteRecordsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{46}
}

func (x *DposVoteRecordsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposVoteRecordsResponse) GetVoteTxidRecords() []*VoteRecord {
	if x != nil {
		return x.VoteTxidRecords
	}
	return nil
}

// 候选人被投票记录请求
type DposVotedRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DposVotedRecordsRequest) Reset() {
	*x = DposVotedRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposVotedRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposVotedRecordsRequest) ProtoMessage() {}

func (x *DposVotedRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposVotedRecordsRequest.ProtoReflect.Descriptor instead.
func (*DposVotedRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{47}
}

func (x *DposVotedRecordsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposVotedRecordsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *DposVotedRecordsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 候选人被投票记录
type VotedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voter string `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Txid  string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *VotedRecord) Reset() {
	*x = VotedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotedRecord) ProtoMessage() {}

func (x *VotedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotedRecord.ProtoReflect.Descriptor instead.
func (*VotedRecord) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{48}
}

func (x *VotedRecord) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *VotedRecord) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 候选人被投票记录返回
type DposVotedRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 候选人被投票的txid记录
	VotedTxidRecords []*VotedRecord `protobuf:"bytes,2,rep,name=votedTxidRecords,proto3" json:"votedTxidRecords,omitempty"`
}

func (x *DposVotedRecordsResponse) Reset() {
	*x = DposVotedRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposVotedRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposVotedRecordsResponse) ProtoMessage() {}

func (x *DposVotedRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposVotedRecordsResponse.ProtoReflect.Descriptor instead.
func (*DposVotedRecordsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{49}
}

func (x *DposVotedRecordsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposVotedRecordsResponse) GetVotedTxidRecords() []*VotedRecord {
	if x != nil {
		return x.VotedTxidRecords
	}
	return nil
}

// 查询检票结果记录请求
type DposCheckResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Term   int64   `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *DposCheckResultsRequest) Reset() {
	*x = DposCheckResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposCheckResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposCheckResultsRequest) ProtoMessage() {}

func (x *DposCheckResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposCheckResultsRequest.ProtoReflect.Descriptor instead.
func (*DposCheckResultsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{50}
}

func (x *DposCheckResultsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposCheckResultsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *DposCheckResultsRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

// 查询检票结果记录返回
type DposCheckResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term        int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	CheckResult []string `protobuf:"bytes,3,rep,name=checkResult,proto3" json:"checkResult,omitempty"`
}

func (x *DposCheckResultsResponse) Reset() {
	*x = DposCheckResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposCheckResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposCheckResultsResponse) ProtoMessage() {}

func (x *DposCheckResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposCheckResultsResponse.ProtoReflect.Descriptor instead.
func (*DposCheckResultsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{51}
}

func (x *DposCheckResultsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposCheckResultsResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *DposCheckResultsResponse) GetCheckResult() []string {
	if x != nil {
		return x.CheckResult
	}
	return nil
}

// query dpos consensus current status request
type DposStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
}

func (x *DposStatusRequest) Reset() {
	*x = DposStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposStatusRequest) ProtoMessage() {}

func (x *DposStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposStatusRequest.ProtoReflect.Descriptor instead.
func (*DposStatusRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{52}
}

func (x *DposStatusRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposStatusRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

// query dpos consensus current status reply
type DposStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status *DposStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DposStatusResponse) Reset() {
	*x = DposStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposStatusResponse) ProtoMessage() {}

func (x *DposStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposStatusResponse.ProtoReflect.Descriptor instead.
func (*DposStatusResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{53}
}

func (x *DposStatusResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DposStatusResponse) GetStatus() *DposStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DposStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term        int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	BlockNum    int64    `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Proposer    string   `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	ProposerNum int64    `protobuf:"varint,4,opt,name=proposer_num,json=proposerNum,proto3" json:"proposer_num,omitempty"`
	CheckResult []string `protobuf:"bytes,5,rep,name=checkResult,proto3" json:"checkResult,omitempty"`
}

func (x *DposStatus) Reset() {
	*x = DposStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DposStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DposStatus) ProtoMessage() {}

func (x *DposStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DposStatus.ProtoReflect.Descriptor instead.
func (*DposStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{54}
}

func (x *DposStatus) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *DposStatus) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *DposStatus) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *DposStatus) GetProposerNum() int64 {
	if x != nil {
		return x.ProposerNum
	}
	return 0
}

func (x *DposStatus) GetCheckResult() []string {
	if x != nil {
		return x.CheckResult
	}
	return nil
}

type InvokeRPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname      string           `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Requests    []*InvokeRequest `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
	Initiator   string           `protobuf:"bytes,4,opt,name=initiator,proto3" json:"initiator,omitempty"`
	AuthRequire []string         `protobuf:"bytes,5,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
}

func (x *InvokeRPCRequest) Reset() {
	*x = InvokeRPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRPCRequest) ProtoMessage() {}

func (x *InvokeRPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRPCRequest.ProtoReflect.Descriptor instead.
func (*InvokeRPCRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{55}
}

func (x *InvokeRPCRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InvokeRPCRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *InvokeRPCRequest) GetRequests() []*InvokeRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *InvokeRPCRequest) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *InvokeRPCRequest) GetAuthRequire() []string {
	if x != nil {
		return x.AuthRequire
	}
	return nil
}

type InvokeRPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname   string          `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Response *InvokeResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *InvokeRPCResponse) Reset() {
	*x = InvokeRPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRPCResponse) ProtoMessage() {}

func (x *InvokeRPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRPCResponse.ProtoReflect.Descriptor instead.
func (*InvokeRPCResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{56}
}

func (x *InvokeRPCResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InvokeRPCResponse) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *InvokeRPCResponse) GetResponse() *InvokeResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// 预执行的请求结构
type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName     string            `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractName   string            `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	MethodName     string            `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Args           map[string][]byte `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceLimits []*ResourceLimit  `protobuf:"bytes,5,rep,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	// amount is the amount transfer to the contract
	// attention: In one transaction, transfer to only one contract is allowed
	Amount string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{57}
}

func (x *InvokeRequest) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *InvokeRequest) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *InvokeRequest) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *InvokeRequest) GetArgs() map[string][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InvokeRequest) GetResourceLimits() []*ResourceLimit {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *InvokeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// 预执行的返回结构
type InvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs      []*TxInputExt       `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs     []*TxOutputExt      `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Response    [][]byte            `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty"`
	GasUsed     int64               `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Requests    []*InvokeRequest    `protobuf:"bytes,5,rep,name=requests,proto3" json:"requests,omitempty"`
	Responses   []*ContractResponse `protobuf:"bytes,6,rep,name=responses,proto3" json:"responses,omitempty"`
	UtxoInputs  []*TxInput          `protobuf:"bytes,7,rep,name=utxoInputs,proto3" json:"utxoInputs,omitempty"`
	UtxoOutputs []*TxOutput         `protobuf:"bytes,8,rep,name=utxoOutputs,proto3" json:"utxoOutputs,omitempty"`
}

func (x *InvokeResponse) Reset() {
	*x = InvokeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeResponse) ProtoMessage() {}

func (x *InvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeResponse.ProtoReflect.Descriptor instead.
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{58}
}

func (x *InvokeResponse) GetInputs() []*TxInputExt {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *InvokeResponse) GetOutputs() []*TxOutputExt {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *InvokeResponse) GetResponse() [][]byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *InvokeResponse) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *InvokeResponse) GetRequests() []*InvokeRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *InvokeResponse) GetResponses() []*ContractResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *InvokeResponse) GetUtxoInputs() []*TxInput {
	if x != nil {
		return x.UtxoInputs
	}
	return nil
}

func (x *InvokeResponse) GetUtxoOutputs() []*TxOutput {
	if x != nil {
		return x.UtxoOutputs
	}
	return nil
}

// 扩展输入
type TxInputExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	RefTxid   []byte `protobuf:"bytes,3,opt,name=ref_txid,json=refTxid,proto3" json:"ref_txid,omitempty"`
	RefOffset int32  `protobuf:"varint,4,opt,name=ref_offset,json=refOffset,proto3" json:"ref_offset,omitempty"`
}

func (x *TxInputExt) Reset() {
	*x = TxInputExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInputExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInputExt) ProtoMessage() {}

func (x *TxInputExt) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInputExt.ProtoReflect.Descriptor instead.
func (*TxInputExt) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{59}
}

func (x *TxInputExt) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TxInputExt) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TxInputExt) GetRefTxid() []byte {
	if x != nil {
		return x.RefTxid
	}
	return nil
}

func (x *TxInputExt) GetRefOffset() int32 {
	if x != nil {
		return x.RefOffset
	}
	return 0
}

// 扩展输出
type TxOutputExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TxOutputExt) Reset() {
	*x = TxOutputExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutputExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutputExt) ProtoMessage() {}

func (x *TxOutputExt) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutputExt.ProtoReflect.Descriptor instead.
func (*TxOutputExt) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{60}
}

func (x *TxOutputExt) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TxOutputExt) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TxOutputExt) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// 签名详情
type SignatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Sign      []byte `protobuf:"bytes,2,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *SignatureInfo) Reset() {
	*x = SignatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInfo) ProtoMessage() {}

func (x *SignatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInfo.ProtoReflect.Descriptor instead.
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{61}
}

func (x *SignatureInfo) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SignatureInfo) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type PermissionModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule        PermissionRule `protobuf:"varint,1,opt,name=rule,proto3,enum=pb.PermissionRule" json:"rule,omitempty"`
	AcceptValue float64        `protobuf:"fixed64,2,opt,name=acceptValue,proto3" json:"acceptValue,omitempty"` // 取决于用哪种rule, 可以表示签名率，签名数或权重阈值
}

func (x *PermissionModel) Reset() {
	*x = PermissionModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionModel) ProtoMessage() {}

func (x *PermissionModel) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionModel.ProtoReflect.Descriptor instead.
func (*PermissionModel) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{62}
}

func (x *PermissionModel) GetRule() PermissionRule {
	if x != nil {
		return x.Rule
	}
	return PermissionRule_NULL
}

func (x *PermissionModel) GetAcceptValue() float64 {
	if x != nil {
		return x.AcceptValue
	}
	return 0
}

// AK集的表示方法
type AkSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aks []string `protobuf:"bytes,1,rep,name=aks,proto3" json:"aks,omitempty"` // 一堆公钥
}

func (x *AkSet) Reset() {
	*x = AkSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AkSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AkSet) ProtoMessage() {}

func (x *AkSet) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AkSet.ProtoReflect.Descriptor instead.
func (*AkSet) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{63}
}

func (x *AkSet) GetAks() []string {
	if x != nil {
		return x.Aks
	}
	return nil
}

type AkSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sets       map[string]*AkSet `protobuf:"bytes,1,rep,name=sets,proto3" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 公钥or账户名集
	Expression string            `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`                                                                             // 表达式，一期不支持表达式，默认集合内是and，集合间是or
}

func (x *AkSets) Reset() {
	*x = AkSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AkSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AkSets) ProtoMessage() {}

func (x *AkSets) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AkSets.ProtoReflect.Descriptor instead.
func (*AkSets) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{64}
}

func (x *AkSets) GetSets() map[string]*AkSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

func (x *AkSets) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// Acl实际使用的结构
type Acl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pm        *PermissionModel   `protobuf:"bytes,1,opt,name=pm,proto3" json:"pm,omitempty"`                                                                                                         // 采用的权限模型
	AksWeight map[string]float64 `protobuf:"bytes,2,rep,name=aksWeight,proto3" json:"aksWeight,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // 公钥or账户名  -> 权重
	AkSets    *AkSets            `protobuf:"bytes,3,opt,name=akSets,proto3" json:"akSets,omitempty"`
}

func (x *Acl) Reset() {
	*x = Acl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl) ProtoMessage() {}

func (x *Acl) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl.ProtoReflect.Descriptor instead.
func (*Acl) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{65}
}

func (x *Acl) GetPm() *PermissionModel {
	if x != nil {
		return x.Pm
	}
	return nil
}

func (x *Acl) GetAksWeight() map[string]float64 {
	if x != nil {
		return x.AksWeight
	}
	return nil
}

func (x *Acl) GetAkSets() *AkSets {
	if x != nil {
		return x.AkSets
	}
	return nil
}

// 查询Acl
type AclStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname       string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	AccountName  string  `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	ContractName string  `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`
	MethodName   string  `protobuf:"bytes,5,opt,name=methodName,proto3" json:"methodName,omitempty"`
	Confirmed    bool    `protobuf:"varint,6,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Acl          *Acl    `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *AclStatus) Reset() {
	*x = AclStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclStatus) ProtoMessage() {}

func (x *AclStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclStatus.ProtoReflect.Descriptor instead.
func (*AclStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{66}
}

func (x *AclStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AclStatus) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *AclStatus) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AclStatus) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *AclStatus) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *AclStatus) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *AclStatus) GetAcl() *Acl {
	if x != nil {
		return x.Acl
	}
	return nil
}

// Identity authentication request
type IdentityAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign      []byte `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Pubkey    []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Addr      string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	PeerID    string `protobuf:"bytes,4,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *IdentityAuth) Reset() {
	*x = IdentityAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAuth) ProtoMessage() {}

func (x *IdentityAuth) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAuth.ProtoReflect.Descriptor instead.
func (*IdentityAuth) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{67}
}

func (x *IdentityAuth) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *IdentityAuth) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *IdentityAuth) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IdentityAuth) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

func (x *IdentityAuth) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Identity authentication requests
type IdentityAuths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth []*IdentityAuth `protobuf:"bytes,1,rep,name=auth,proto3" json:"auth,omitempty"`
}

func (x *IdentityAuths) Reset() {
	*x = IdentityAuths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAuths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAuths) ProtoMessage() {}

func (x *IdentityAuths) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAuths.ProtoReflect.Descriptor instead.
func (*IdentityAuths) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{68}
}

func (x *IdentityAuths) GetAuth() []*IdentityAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ResourceLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ResourceType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.ResourceType" json:"type,omitempty"`
	Limit int64        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ResourceLimit) Reset() {
	*x = ResourceLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimit) ProtoMessage() {}

func (x *ResourceLimit) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimit.ProtoReflect.Descriptor instead.
func (*ResourceLimit) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{69}
}

func (x *ResourceLimit) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_CPU
}

func (x *ResourceLimit) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AK2AccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AK2AccountRequest) Reset() {
	*x = AK2AccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AK2AccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AK2AccountRequest) ProtoMessage() {}

func (x *AK2AccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AK2AccountRequest.ProtoReflect.Descriptor instead.
func (*AK2AccountRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{70}
}

func (x *AK2AccountRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AK2AccountRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *AK2AccountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AK2AccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Account []string `protobuf:"bytes,3,rep,name=account,proto3" json:"account,omitempty"`
}

func (x *AK2AccountResponse) Reset() {
	*x = AK2AccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AK2AccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AK2AccountResponse) ProtoMessage() {}

func (x *AK2AccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AK2AccountResponse.ProtoReflect.Descriptor instead.
func (*AK2AccountResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{71}
}

func (x *AK2AccountResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AK2AccountResponse) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *AK2AccountResponse) GetAccount() []string {
	if x != nil {
		return x.Account
	}
	return nil
}

// Query account contracts request
type GetAccountContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname  string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Account string  `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountContractsRequest) Reset() {
	*x = GetAccountContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountContractsRequest) ProtoMessage() {}

func (x *GetAccountContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountContractsRequest.ProtoReflect.Descriptor instead.
func (*GetAccountContractsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{72}
}

func (x *GetAccountContractsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAccountContractsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *GetAccountContractsRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

// Query account contracts response
type GetAccountContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header          *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ContractsStatus []*ContractStatus `protobuf:"bytes,2,rep,name=contracts_status,json=contractsStatus,proto3" json:"contracts_status,omitempty"`
}

func (x *GetAccountContractsResponse) Reset() {
	*x = GetAccountContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountContractsResponse) ProtoMessage() {}

func (x *GetAccountContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountContractsResponse.ProtoReflect.Descriptor instead.
func (*GetAccountContractsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{73}
}

func (x *GetAccountContractsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAccountContractsResponse) GetContractsStatus() []*ContractStatus {
	if x != nil {
		return x.ContractsStatus
	}
	return nil
}

// Status of a contract
type ContractStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	Txid         string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Desc         []byte `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	IsBanned     bool   `protobuf:"varint,4,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
	Timestamp    int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Runtime      string `protobuf:"bytes,6,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (x *ContractStatus) Reset() {
	*x = ContractStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStatus) ProtoMessage() {}

func (x *ContractStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStatus.ProtoReflect.Descriptor instead.
func (*ContractStatus) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{74}
}

func (x *ContractStatus) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractStatus) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ContractStatus) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ContractStatus) GetIsBanned() bool {
	if x != nil {
		return x.IsBanned
	}
	return false
}

func (x *ContractStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ContractStatus) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

// PreExecWithSelectUTXORequest preExec + selectUtxo for request
type PreExecWithSelectUTXORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname      string            `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address     string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TotalAmount int64             `protobuf:"varint,4,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	SignInfo    *SignatureInfo    `protobuf:"bytes,6,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
	NeedLock    bool              `protobuf:"varint,7,opt,name=needLock,proto3" json:"needLock,omitempty"`
	Request     *InvokeRPCRequest `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PreExecWithSelectUTXORequest) Reset() {
	*x = PreExecWithSelectUTXORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreExecWithSelectUTXORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreExecWithSelectUTXORequest) ProtoMessage() {}

func (x *PreExecWithSelectUTXORequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreExecWithSelectUTXORequest.ProtoReflect.Descriptor instead.
func (*PreExecWithSelectUTXORequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{75}
}

func (x *PreExecWithSelectUTXORequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PreExecWithSelectUTXORequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *PreExecWithSelectUTXORequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PreExecWithSelectUTXORequest) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PreExecWithSelectUTXORequest) GetSignInfo() *SignatureInfo {
	if x != nil {
		return x.SignInfo
	}
	return nil
}

func (x *PreExecWithSelectUTXORequest) GetNeedLock() bool {
	if x != nil {
		return x.NeedLock
	}
	return false
}

func (x *PreExecWithSelectUTXORequest) GetRequest() *InvokeRPCRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// PreExecWithSelectUTXOResponse preExec + selectUtxo for response
type PreExecWithSelectUTXOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname   string          `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Response *InvokeResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	// for preExec & selectUTXO
	UtxoOutput *UtxoOutput `protobuf:"bytes,4,opt,name=utxoOutput,proto3" json:"utxoOutput,omitempty"`
}

func (x *PreExecWithSelectUTXOResponse) Reset() {
	*x = PreExecWithSelectUTXOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreExecWithSelectUTXOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreExecWithSelectUTXOResponse) ProtoMessage() {}

func (x *PreExecWithSelectUTXOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreExecWithSelectUTXOResponse.ProtoReflect.Descriptor instead.
func (*PreExecWithSelectUTXOResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{76}
}

func (x *PreExecWithSelectUTXOResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PreExecWithSelectUTXOResponse) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *PreExecWithSelectUTXOResponse) GetResponse() *InvokeResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PreExecWithSelectUTXOResponse) GetUtxoOutput() *UtxoOutput {
	if x != nil {
		return x.UtxoOutput
	}
	return nil
}

// ContractResponse is the response returnd by contract
type ContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Body    []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ContractResponse) Reset() {
	*x = ContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResponse) ProtoMessage() {}

func (x *ContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResponse.ProtoReflect.Descriptor instead.
func (*ContractResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{77}
}

func (x *ContractResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ContractResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContractResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ModifyBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// txid交易被effective_txid的交易提出可修改区块链的请求
	EffectiveTxid string `protobuf:"bytes,1,opt,name=effective_txid,json=effectiveTxid,proto3" json:"effective_txid,omitempty"`
	// 本交易是否已被修改标记
	Marked bool `protobuf:"varint,2,opt,name=marked,proto3" json:"marked,omitempty"`
	// txid交易被修改生效的高度
	EffectiveHeight int64 `protobuf:"varint,3,opt,name=effective_height,json=effectiveHeight,proto3" json:"effective_height,omitempty"`
	// 监管的public key
	PublicKey string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// 监管地址对修改的交易id的签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *ModifyBlock) Reset() {
	*x = ModifyBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlock) ProtoMessage() {}

func (x *ModifyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlock.ProtoReflect.Descriptor instead.
func (*ModifyBlock) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{78}
}

func (x *ModifyBlock) GetEffectiveTxid() string {
	if x != nil {
		return x.EffectiveTxid
	}
	return ""
}

func (x *ModifyBlock) GetMarked() bool {
	if x != nil {
		return x.Marked
	}
	return false
}

func (x *ModifyBlock) GetEffectiveHeight() int64 {
	if x != nil {
		return x.EffectiveHeight
	}
	return 0
}

func (x *ModifyBlock) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ModifyBlock) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type HDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HDPublickey
	HdPublicKey []byte `protobuf:"bytes,1,opt,name=hd_public_key,json=hdPublicKey,proto3" json:"hd_public_key,omitempty"`
	// original_hash
	OriginalHash []byte `protobuf:"bytes,2,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (x *HDInfo) Reset() {
	*x = HDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDInfo) ProtoMessage() {}

func (x *HDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDInfo.ProtoReflect.Descriptor instead.
func (*HDInfo) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{79}
}

func (x *HDInfo) GetHdPublicKey() []byte {
	if x != nil {
		return x.HdPublicKey
	}
	return nil
}

func (x *HDInfo) GetOriginalHash() []byte {
	if x != nil {
		return x.OriginalHash
	}
	return nil
}

type UtxoRecordDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header           *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname           string      `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	AccountName      string      `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	OpenUtxoRecord   *UtxoRecord `protobuf:"bytes,4,opt,name=openUtxoRecord,proto3" json:"openUtxoRecord,omitempty"`
	LockedUtxoRecord *UtxoRecord `protobuf:"bytes,5,opt,name=lockedUtxoRecord,proto3" json:"lockedUtxoRecord,omitempty"`
	FrozenUtxoRecord *UtxoRecord `protobuf:"bytes,6,opt,name=frozenUtxoRecord,proto3" json:"frozenUtxoRecord,omitempty"`
	DisplayCount     int64       `protobuf:"varint,7,opt,name=displayCount,proto3" json:"displayCount,omitempty"`
}

func (x *UtxoRecordDetail) Reset() {
	*x = UtxoRecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoRecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoRecordDetail) ProtoMessage() {}

func (x *UtxoRecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoRecordDetail.ProtoReflect.Descriptor instead.
func (*UtxoRecordDetail) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{80}
}

func (x *UtxoRecordDetail) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UtxoRecordDetail) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *UtxoRecordDetail) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *UtxoRecordDetail) GetOpenUtxoRecord() *UtxoRecord {
	if x != nil {
		return x.OpenUtxoRecord
	}
	return nil
}

func (x *UtxoRecordDetail) GetLockedUtxoRecord() *UtxoRecord {
	if x != nil {
		return x.LockedUtxoRecord
	}
	return nil
}

func (x *UtxoRecordDetail) GetFrozenUtxoRecord() *UtxoRecord {
	if x != nil {
		return x.FrozenUtxoRecord
	}
	return nil
}

func (x *UtxoRecordDetail) GetDisplayCount() int64 {
	if x != nil {
		return x.DisplayCount
	}
	return 0
}

type UtxoRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoCount  string     `protobuf:"bytes,1,opt,name=utxoCount,proto3" json:"utxoCount,omitempty"`
	UtxoAmount string     `protobuf:"bytes,2,opt,name=utxoAmount,proto3" json:"utxoAmount,omitempty"`
	Item       []*UtxoKey `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *UtxoRecord) Reset() {
	*x = UtxoRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoRecord) ProtoMessage() {}

func (x *UtxoRecord) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoRecord.ProtoReflect.Descriptor instead.
func (*UtxoRecord) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{81}
}

func (x *UtxoRecord) GetUtxoCount() string {
	if x != nil {
		return x.UtxoCount
	}
	return ""
}

func (x *UtxoRecord) GetUtxoAmount() string {
	if x != nil {
		return x.UtxoAmount
	}
	return ""
}

func (x *UtxoRecord) GetItem() []*UtxoKey {
	if x != nil {
		return x.Item
	}
	return nil
}

type UtxoKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTxid string `protobuf:"bytes,1,opt,name=refTxid,proto3" json:"refTxid,omitempty"`
	Offset  string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Amount  string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UtxoKey) Reset() {
	*x = UtxoKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoKey) ProtoMessage() {}

func (x *UtxoKey) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoKey.ProtoReflect.Descriptor instead.
func (*UtxoKey) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{82}
}

func (x *UtxoKey) GetRefTxid() string {
	if x != nil {
		return x.RefTxid
	}
	return ""
}

func (x *UtxoKey) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *UtxoKey) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ContractStatDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
}

func (x *ContractStatDataRequest) Reset() {
	*x = ContractStatDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStatDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStatDataRequest) ProtoMessage() {}

func (x *ContractStatDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStatDataRequest.ProtoReflect.Descriptor instead.
func (*ContractStatDataRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{83}
}

func (x *ContractStatDataRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContractStatDataRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

type ContractStatDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string            `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Data   *ContractStatData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractStatDataResponse) Reset() {
	*x = ContractStatDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStatDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStatDataResponse) ProtoMessage() {}

func (x *ContractStatDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStatDataResponse.ProtoReflect.Descriptor instead.
func (*ContractStatDataResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{84}
}

func (x *ContractStatDataResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContractStatDataResponse) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *ContractStatDataResponse) GetData() *ContractStatData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContractStatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountCount  int64 `protobuf:"varint,1,opt,name=accountCount,proto3" json:"accountCount,omitempty"`
	ContractCount int64 `protobuf:"varint,2,opt,name=contractCount,proto3" json:"contractCount,omitempty"`
}

func (x *ContractStatData) Reset() {
	*x = ContractStatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStatData) ProtoMessage() {}

func (x *ContractStatData) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStatData.ProtoReflect.Descriptor instead.
func (*ContractStatData) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{85}
}

func (x *ContractStatData) GetAccountCount() int64 {
	if x != nil {
		return x.AccountCount
	}
	return 0
}

func (x *ContractStatData) GetContractCount() int64 {
	if x != nil {
		return x.ContractCount
	}
	return 0
}

// Query address contracts request
type AddressContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname      string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address     string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	NeedContent bool    `protobuf:"varint,4,opt,name=need_content,json=needContent,proto3" json:"need_content,omitempty"`
}

func (x *AddressContractsRequest) Reset() {
	*x = AddressContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressContractsRequest) ProtoMessage() {}

func (x *AddressContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressContractsRequest.ProtoReflect.Descriptor instead.
func (*AddressContractsRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{86}
}

func (x *AddressContractsRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddressContractsRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *AddressContractsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressContractsRequest) GetNeedContent() bool {
	if x != nil {
		return x.NeedContent
	}
	return false
}

type ContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractStatus []*ContractStatus `protobuf:"bytes,1,rep,name=contract_status,json=contractStatus,proto3" json:"contract_status,omitempty"`
}

func (x *ContractList) Reset() {
	*x = ContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractList) ProtoMessage() {}

func (x *ContractList) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractList.ProtoReflect.Descriptor instead.
func (*ContractList) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{87}
}

func (x *ContractList) GetContractStatus() []*ContractStatus {
	if x != nil {
		return x.ContractStatus
	}
	return nil
}

// Query address contracts response
type AddressContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header                  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Contracts map[string]*ContractList `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddressContractsResponse) Reset() {
	*x = AddressContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressContractsResponse) ProtoMessage() {}

func (x *AddressContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressContractsResponse.ProtoReflect.Descriptor instead.
func (*AddressContractsResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{88}
}

func (x *AddressContractsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddressContractsResponse) GetContracts() map[string]*ContractList {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type CrossQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bcname      string         `protobuf:"bytes,1,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Timestamp   int64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Initiator   string         `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	AuthRequire []string       `protobuf:"bytes,4,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
	Request     *InvokeRequest `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *CrossQueryRequest) Reset() {
	*x = CrossQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossQueryRequest) ProtoMessage() {}

func (x *CrossQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossQueryRequest.ProtoReflect.Descriptor instead.
func (*CrossQueryRequest) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{89}
}

func (x *CrossQueryRequest) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *CrossQueryRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CrossQueryRequest) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *CrossQueryRequest) GetAuthRequire() []string {
	if x != nil {
		return x.AuthRequire
	}
	return nil
}

func (x *CrossQueryRequest) GetRequest() *InvokeRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CrossQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ContractResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CrossQueryResponse) Reset() {
	*x = CrossQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossQueryResponse) ProtoMessage() {}

func (x *CrossQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossQueryResponse.ProtoReflect.Descriptor instead.
func (*CrossQueryResponse) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{90}
}

func (x *CrossQueryResponse) GetResponse() *ContractResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type CrossChainMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	MinEndorsorNum int64  `protobuf:"varint,2,opt,name=min_endorsor_num,json=minEndorsorNum,proto3" json:"min_endorsor_num,omitempty"`
}

func (x *CrossChainMeta) Reset() {
	*x = CrossChainMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainMeta) ProtoMessage() {}

func (x *CrossChainMeta) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainMeta.ProtoReflect.Descriptor instead.
func (*CrossChainMeta) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{91}
}

func (x *CrossChainMeta) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CrossChainMeta) GetMinEndorsorNum() int64 {
	if x != nil {
		return x.MinEndorsorNum
	}
	return 0
}

type CrossEndorsor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey  string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// ip+port
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *CrossEndorsor) Reset() {
	*x = CrossEndorsor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossEndorsor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossEndorsor) ProtoMessage() {}

func (x *CrossEndorsor) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossEndorsor.ProtoReflect.Descriptor instead.
func (*CrossEndorsor) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{92}
}

func (x *CrossEndorsor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CrossEndorsor) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *CrossEndorsor) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type CrossQueryMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainMeta *CrossChainMeta  `protobuf:"bytes,1,opt,name=chain_meta,json=chainMeta,proto3" json:"chain_meta,omitempty"`
	Endorsors []*CrossEndorsor `protobuf:"bytes,2,rep,name=endorsors,proto3" json:"endorsors,omitempty"`
}

func (x *CrossQueryMeta) Reset() {
	*x = CrossQueryMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossQueryMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossQueryMeta) ProtoMessage() {}

func (x *CrossQueryMeta) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossQueryMeta.ProtoReflect.Descriptor instead.
func (*CrossQueryMeta) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{93}
}

func (x *CrossQueryMeta) GetChainMeta() *CrossChainMeta {
	if x != nil {
		return x.ChainMeta
	}
	return nil
}

func (x *CrossQueryMeta) GetEndorsors() []*CrossEndorsor {
	if x != nil {
		return x.Endorsors
	}
	return nil
}

type CrossQueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *CrossQueryRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *CrossQueryResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	Signs    []*SignatureInfo    `protobuf:"bytes,3,rep,name=signs,proto3" json:"signs,omitempty"`
}

func (x *CrossQueryInfo) Reset() {
	*x = CrossQueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossQueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossQueryInfo) ProtoMessage() {}

func (x *CrossQueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossQueryInfo.ProtoReflect.Descriptor instead.
func (*CrossQueryInfo) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{94}
}

func (x *CrossQueryInfo) GetRequest() *CrossQueryRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CrossQueryInfo) GetResponse() *CrossQueryResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CrossQueryInfo) GetSigns() []*SignatureInfo {
	if x != nil {
		return x.Signs
	}
	return nil
}

type ContractEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ContractEvent) Reset() {
	*x = ContractEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEvent) ProtoMessage() {}

func (x *ContractEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEvent.ProtoReflect.Descriptor instead.
func (*ContractEvent) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{95}
}

func (x *ContractEvent) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ContractEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContractEvent) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ContractCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname string  `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Name   string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code   []byte  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ContractCode) Reset() {
	*x = ContractCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCode) ProtoMessage() {}

func (x *ContractCode) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCode.ProtoReflect.Descriptor instead.
func (*ContractCode) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{96}
}

func (x *ContractCode) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContractCode) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *ContractCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContractCode) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Fileter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname    string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	FromBlock string   `protobuf:"bytes,3,opt,name=fromBlock,proto3" json:"fromBlock,omitempty"`
	ToBlock   string   `protobuf:"bytes,4,opt,name=toBlock,proto3" json:"toBlock,omitempty"`
	Address   []string `protobuf:"bytes,5,rep,name=address,proto3" json:"address,omitempty"`
	Topics    []string `protobuf:"bytes,6,rep,name=topics,proto3" json:"topics,omitempty"`
	BlockId   string   `protobuf:"bytes,7,opt,name=blockId,proto3" json:"blockId,omitempty"`
}

func (x *Fileter) Reset() {
	*x = Fileter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fileter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fileter) ProtoMessage() {}

func (x *Fileter) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fileter.ProtoReflect.Descriptor instead.
func (*Fileter) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{97}
}

func (x *Fileter) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Fileter) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *Fileter) GetFromBlock() string {
	if x != nil {
		return x.FromBlock
	}
	return ""
}

func (x *Fileter) GetToBlock() string {
	if x != nil {
		return x.ToBlock
	}
	return ""
}

func (x *Fileter) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Fileter) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Fileter) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bcname      string   `protobuf:"bytes,2,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Address     string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Topics      []string `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	Data        []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	BlockNumber int64    `protobuf:"varint,6,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxId        []byte   `protobuf:"bytes,7,opt,name=txId,proto3" json:"txId,omitempty"`
	TxIndex     string   `protobuf:"bytes,8,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	BlockId     []byte   `protobuf:"bytes,9,opt,name=blockId,proto3" json:"blockId,omitempty"`
	LogIndex    string   `protobuf:"bytes,10,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{98}
}

func (x *Log) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Log) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Log) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Log) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *Log) GetTxIndex() string {
	if x != nil {
		return x.TxIndex
	}
	return ""
}

func (x *Log) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Log) GetLogIndex() string {
	if x != nil {
		return x.LogIndex
	}
	return ""
}

type TxReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TxStatus    *TxStatus `protobuf:"bytes,2,opt,name=txStatus,proto3" json:"txStatus,omitempty"`
	BlockNumber int64     `protobuf:"varint,3,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Log         []*Log    `protobuf:"bytes,4,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *TxReceipt) Reset() {
	*x = TxReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xchain_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceipt) ProtoMessage() {}

func (x *TxReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_xchain_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceipt.ProtoReflect.Descriptor instead.
func (*TxReceipt) Descriptor() ([]byte, []int) {
	return file_xchain_proto_rawDescGZIP(), []int{99}
}

func (x *TxReceipt) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxReceipt) GetTxStatus() *TxStatus {
	if x != nil {
		return x.TxStatus
	}
	return nil
}

func (x *TxReceipt) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TxReceipt) GetLog() []*Log {
	if x != nil {
		return x.Log
	}
	return nil
}

var File_xchain_proto protoreflect.FileDescriptor

var file_xchain_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x66, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x58, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x0d, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x06, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x72, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74,
	0x78, 0x22, 0x4e, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x73, 0x12, 0x22, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x03, 0x54, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x54, 0x78,
	0x73, 0x22, 0xf5, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3d, 0x0a, 0x0c, 0x45, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x4f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x61,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x31, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e,
	0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x70, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x62, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03,
	0x62, 0x63, 0x73, 0x22, 0x49, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0x80,
	0x01, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x03, 0x74, 0x66, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x03, 0x74, 0x66, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x66, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04,
	0x74, 0x66, 0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x60, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4f, 0x0a, 0x0e, 0x58, 0x75, 0x70, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xce, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x52, 0x0b, 0x74, 0x78, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x74, 0x52, 0x0c, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x12,
	0x3e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x12, 0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0a,
	0x78, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x75, 0x70, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x78, 0x75, 0x70, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x32, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x07, 0x48, 0x44, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x70,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x74, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8a, 0x05,
	0x0a, 0x08, 0x55, 0x74, 0x78, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x7a, 0x0a, 0x08, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x78, 0x66,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x4a, 0x75,
	0x73, 0x74, 0x69, 0x66, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x07, 0x4a, 0x75, 0x73,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x3c, 0x0a, 0x0e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x08, 0x42,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64,
	0x22, 0x53, 0x0a, 0x0b, 0x42, 0x43, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f,
	0x74, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x54, 0x69, 0x70, 0x22, 0x53, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x53, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x42, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x42, 0x63, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x42, 0x63, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0d, 0x42, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x43, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a,
	0x08, 0x42, 0x43, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x42, 0x63, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x43, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x42, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x42, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x3a,
	0x0a, 0x0c, 0x42, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x62, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x52, 0x06, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x72, 0x0a,
	0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x44, 0x0a, 0x06, 0x52, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x55, 0x74, 0x78, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x6f, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x7c, 0x0a, 0x0a,
	0x55, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x08, 0x75, 0x74, 0x78, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x78, 0x75, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x78, 0x75, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa2, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x73, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x22, 0x53, 0x0a, 0x15, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x44, 0x70, 0x6f, 0x73, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a,
	0x1a, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x44, 0x0a, 0x10, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x44, 0x70, 0x6f, 0x73,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x19, 0x44,
	0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x54,
	0x0a, 0x1a, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x16, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x17, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x76, 0x6f,
	0x74, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6f, 0x0a,
	0x17, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37,
	0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x18, 0x44, 0x70, 0x6f, 0x73, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x69, 0x0a, 0x17, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22,
	0x74, 0x0a, 0x18, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x11, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x44, 0x70, 0x6f,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x22, 0x7f, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xda, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x0b, 0x75, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x75, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22,
	0x70, 0x0a, 0x0a, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x78,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x41, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x22, 0x5b, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x19, 0x0a, 0x05, 0x41, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6b, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x06,
	0x41, 0x6b, 0x53, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6b, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x42, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x03, 0x41, 0x63, 0x6c, 0x12, 0x23, 0x0a, 0x02,
	0x70, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x02, 0x70,
	0x6d, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x6b, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x6b,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6b,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x6b, 0x53, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6b, 0x53,
	0x65, 0x74, 0x73, 0x52, 0x06, 0x61, 0x6b, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x41,
	0x6b, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x41, 0x63,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x03, 0x61,
	0x63, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x35, 0x0a, 0x0d, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x75, 0x74, 0x68, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x69, 0x0a,
	0x11, 0x41, 0x4b, 0x32, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x12, 0x41, 0x4b, 0x32, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x91, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xaa, 0x01, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x51, 0x0a, 0x06, 0x48, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc4, 0x02, 0x0a,
	0x10, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x0a, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x53, 0x0a, 0x07, 0x55, 0x74, 0x78, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x54, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xd9, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a,
	0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x56, 0x0a,
	0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x72, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x22, 0x8d, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x74, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x22, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x2a, 0xad, 0x06, 0x0a, 0x0f, 0x58,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f,
	0x55, 0x54, 0x58, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x55, 0x54, 0x58, 0x4f, 0x56, 0x4d, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x54, 0x58, 0x4f, 0x56, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x54, 0x58, 0x4f, 0x56, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x41, 0x4c, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x58, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x58, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x58, 0x5f, 0x53, 0x4c, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x50, 0x4f,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1f, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x57, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x57, 0x41, 0x43,
	0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x22, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f,
	0x55, 0x47, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x58, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x25, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x26, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x58, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x28, 0x2a, 0x65, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x52, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0x4b, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x44,
	0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x54, 0x58, 0x4f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x45, 0x45, 0x52, 0x53, 0x10, 0x04, 0x2a, 0x7e,
	0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x4b, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x37,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x58, 0x46, 0x45, 0x45, 0x10, 0x03, 0x32, 0xc2, 0x13, 0x0a, 0x06, 0x58, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x54, 0x58, 0x4f,
	0x42, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x3f, 0x0a, 0x06, 0x50, 0x6f, 0x73,
	0x74, 0x54, 0x78, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x42, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x5f,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12,
	0x7b, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x3e, 0x0a, 0x07, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x78, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a,
	0x12, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x63, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x49, 0x6e, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x63, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x27, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x55, 0x52, 0x4c, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x6e, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x5f, 0x76, 0x32, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x54, 0x58,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55,
	0x54, 0x58, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x3a, 0x01, 0x2a, 0x12,
	0x47, 0x0a, 0x0e, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x70, 0x6f, 0x73,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x44, 0x70, 0x6f, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70,
	0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x56, 0x6f, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x10, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x70, 0x6f, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x4b, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x4b, 0x32, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x4b, 0x32, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6b, 0x3a, 0x01, 0x2a, 0x12,
	0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x50,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65,
	0x65, 0x78, 0x65, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x2d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x74, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xchain_proto_rawDescOnce sync.Once
	file_xchain_proto_rawDescData = file_xchain_proto_rawDesc
)

func file_xchain_proto_rawDescGZIP() []byte {
	file_xchain_proto_rawDescOnce.Do(func() {
		file_xchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_xchain_proto_rawDescData)
	})
	return file_xchain_proto_rawDescData
}

var file_xchain_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_xchain_proto_msgTypes = make([]protoimpl.MessageInfo, 108)
var file_xchain_proto_goTypes = []interface{}{
	(XChainErrorEnum)(0),                  // 0: pb.XChainErrorEnum
	(TransactionStatus)(0),                // 1: pb.TransactionStatus
	(ViewOption)(0),                       // 2: pb.ViewOption
	(PermissionRule)(0),                   // 3: pb.PermissionRule
	(ResourceType)(0),                     // 4: pb.ResourceType
	(Block_EBlockStatus)(0),               // 5: pb.Block.EBlockStatus
	(*Header)(nil),                        // 6: pb.Header
	(*TxDataAccount)(nil),                 // 7: pb.TxDataAccount
	(*TxData)(nil),                        // 8: pb.TxData
	(*TxStatus)(nil),                      // 9: pb.TxStatus
	(*BatchTxs)(nil),                      // 10: pb.BatchTxs
	(*Block)(nil),                         // 11: pb.Block
	(*BlockID)(nil),                       // 12: pb.BlockID
	(*BlockHeight)(nil),                   // 13: pb.BlockHeight
	(*CommonReply)(nil),                   // 14: pb.CommonReply
	(*CommonIn)(nil),                      // 15: pb.CommonIn
	(*TokenDetail)(nil),                   // 16: pb.TokenDetail
	(*AddressStatus)(nil),                 // 17: pb.AddressStatus
	(*TokenFrozenDetail)(nil),             // 18: pb.TokenFrozenDetail
	(*TokenFrozenDetails)(nil),            // 19: pb.TokenFrozenDetails
	(*AddressBalanceStatus)(nil),          // 20: pb.AddressBalanceStatus
	(*TxInput)(nil),                       // 21: pb.TxInput
	(*TxOutput)(nil),                      // 22: pb.TxOutput
	(*XuperSignature)(nil),                // 23: pb.XuperSignature
	(*Transaction)(nil),                   // 24: pb.Transaction
	(*LedgerMeta)(nil),                    // 25: pb.LedgerMeta
	(*UtxoMeta)(nil),                      // 26: pb.UtxoMeta
	(*GasPrice)(nil),                      // 27: pb.GasPrice
	(*InternalBlock)(nil),                 // 28: pb.InternalBlock
	(*BCStatus)(nil),                      // 29: pb.BCStatus
	(*BCTipStatus)(nil),                   // 30: pb.BCTipStatus
	(*BlockChains)(nil),                   // 31: pb.BlockChains
	(*Speeds)(nil),                        // 32: pb.Speeds
	(*BCSpeeds)(nil),                      // 33: pb.BCSpeeds
	(*SystemsStatus)(nil),                 // 34: pb.SystemsStatus
	(*SystemsStatusReply)(nil),            // 35: pb.SystemsStatusReply
	(*RawUrl)(nil),                        // 36: pb.RawUrl
	(*Utxo)(nil),                          // 37: pb.Utxo
	(*UtxoInput)(nil),                     // 38: pb.UtxoInput
	(*UtxoOutput)(nil),                    // 39: pb.UtxoOutput
	(*NativeCodeDesc)(nil),                // 40: pb.NativeCodeDesc
	(*WasmCodeDesc)(nil),                  // 41: pb.WasmCodeDesc
	(*NativeCodeStatus)(nil),              // 42: pb.NativeCodeStatus
	(*DposCandidatesRequest)(nil),         // 43: pb.DposCandidatesRequest
	(*DposCandidatesResponse)(nil),        // 44: pb.DposCandidatesResponse
	(*DposNominateRecordsRequest)(nil),    // 45: pb.DposNominateRecordsRequest
	(*DposNominateInfo)(nil),              // 46: pb.DposNominateInfo
	(*DposNominateRecordsResponse)(nil),   // 47: pb.DposNominateRecordsResponse
	(*DposNomineeRecordsRequest)(nil),     // 48: pb.DposNomineeRecordsRequest
	(*DposNomineeRecordsResponse)(nil),    // 49: pb.DposNomineeRecordsResponse
	(*DposVoteRecordsRequest)(nil),        // 50: pb.DposVoteRecordsRequest
	(*VoteRecord)(nil),                    // 51: pb.voteRecord
	(*DposVoteRecordsResponse)(nil),       // 52: pb.DposVoteRecordsResponse
	(*DposVotedRecordsRequest)(nil),       // 53: pb.DposVotedRecordsRequest
	(*VotedRecord)(nil),                   // 54: pb.votedRecord
	(*DposVotedRecordsResponse)(nil),      // 55: pb.DposVotedRecordsResponse
	(*DposCheckResultsRequest)(nil),       // 56: pb.DposCheckResultsRequest
	(*DposCheckResultsResponse)(nil),      // 57: pb.DposCheckResultsResponse
	(*DposStatusRequest)(nil),             // 58: pb.DposStatusRequest
	(*DposStatusResponse)(nil),            // 59: pb.DposStatusResponse
	(*DposStatus)(nil),                    // 60: pb.DposStatus
	(*InvokeRPCRequest)(nil),              // 61: pb.InvokeRPCRequest
	(*InvokeRPCResponse)(nil),             // 62: pb.InvokeRPCResponse
	(*InvokeRequest)(nil),                 // 63: pb.InvokeRequest
	(*InvokeResponse)(nil),                // 64: pb.InvokeResponse
	(*TxInputExt)(nil),                    // 65: pb.TxInputExt
	(*TxOutputExt)(nil),                   // 66: pb.TxOutputExt
	(*SignatureInfo)(nil),                 // 67: pb.SignatureInfo
	(*PermissionModel)(nil),               // 68: pb.PermissionModel
	(*AkSet)(nil),                         // 69: pb.AkSet
	(*AkSets)(nil),                        // 70: pb.AkSets
	(*Acl)(nil),                           // 71: pb.Acl
	(*AclStatus)(nil),                     // 72: pb.AclStatus
	(*IdentityAuth)(nil),                  // 73: pb.IdentityAuth
	(*IdentityAuths)(nil),                 // 74: pb.IdentityAuths
	(*ResourceLimit)(nil),                 // 75: pb.ResourceLimit
	(*AK2AccountRequest)(nil),             // 76: pb.AK2AccountRequest
	(*AK2AccountResponse)(nil),            // 77: pb.AK2AccountResponse
	(*GetAccountContractsRequest)(nil),    // 78: pb.GetAccountContractsRequest
	(*GetAccountContractsResponse)(nil),   // 79: pb.GetAccountContractsResponse
	(*ContractStatus)(nil),                // 80: pb.ContractStatus
	(*PreExecWithSelectUTXORequest)(nil),  // 81: pb.PreExecWithSelectUTXORequest
	(*PreExecWithSelectUTXOResponse)(nil), // 82: pb.PreExecWithSelectUTXOResponse
	(*ContractResponse)(nil),              // 83: pb.ContractResponse
	(*ModifyBlock)(nil),                   // 84: pb.ModifyBlock
	(*HDInfo)(nil),                        // 85: pb.HDInfo
	(*UtxoRecordDetail)(nil),              // 86: pb.UtxoRecordDetail
	(*UtxoRecord)(nil),                    // 87: pb.UtxoRecord
	(*UtxoKey)(nil),                       // 88: pb.UtxoKey
	(*ContractStatDataRequest)(nil),       // 89: pb.ContractStatDataRequest
	(*ContractStatDataResponse)(nil),      // 90: pb.ContractStatDataResponse
	(*ContractStatData)(nil),              // 91: pb.ContractStatData
	(*AddressContractsRequest)(nil),       // 92: pb.AddressContractsRequest
	(*ContractList)(nil),                  // 93: pb.ContractList
	(*AddressContractsResponse)(nil),      // 94: pb.AddressContractsResponse
	(*CrossQueryRequest)(nil),             // 95: pb.CrossQueryRequest
	(*CrossQueryResponse)(nil),            // 96: pb.CrossQueryResponse
	(*CrossChainMeta)(nil),                // 97: pb.CrossChainMeta
	(*CrossEndorsor)(nil),                 // 98: pb.CrossEndorsor
	(*CrossQueryMeta)(nil),                // 99: pb.CrossQueryMeta
	(*CrossQueryInfo)(nil),                // 100: pb.CrossQueryInfo
	(*ContractEvent)(nil),                 // 101: pb.ContractEvent
	(*ContractCode)(nil),                  // 102: pb.ContractCode
	(*Fileter)(nil),                       // 103: pb.Fileter
	(*Log)(nil),                           // 104: pb.Log
	(*TxReceipt)(nil),                     // 105: pb.txReceipt
	nil,                                   // 106: pb.InternalBlock.FailedTxsEntry
	nil,                                   // 107: pb.Speeds.SumSpeedsEntry
	nil,                                   // 108: pb.Speeds.BcSpeedsEntry
	nil,                                   // 109: pb.BCSpeeds.BcSpeedEntry
	nil,                                   // 110: pb.InvokeRequest.ArgsEntry
	nil,                                   // 111: pb.AkSets.SetsEntry
	nil,                                   // 112: pb.Acl.AksWeightEntry
	nil,                                   // 113: pb.AddressContractsResponse.ContractsEntry
	(*QuorumCert)(nil),                    // 114: pb.QuorumCert
}
var file_xchain_proto_depIdxs = []int32{
	0,   // 0: pb.Header.error:type_name -> pb.XChainErrorEnum
	6,   // 1: pb.TxData.header:type_name -> pb.Header
	7,   // 2: pb.TxData.account:type_name -> pb.TxDataAccount
	6,   // 3: pb.TxStatus.header:type_name -> pb.Header
	1,   // 4: pb.TxStatus.status:type_name -> pb.TransactionStatus
	24,  // 5: pb.TxStatus.tx:type_name -> pb.Transaction
	6,   // 6: pb.BatchTxs.header:type_name -> pb.Header
	9,   // 7: pb.BatchTxs.Txs:type_name -> pb.TxStatus
	6,   // 8: pb.Block.header:type_name -> pb.Header
	5,   // 9: pb.Block.status:type_name -> pb.Block.EBlockStatus
	28,  // 10: pb.Block.block:type_name -> pb.InternalBlock
	6,   // 11: pb.BlockID.header:type_name -> pb.Header
	6,   // 12: pb.BlockHeight.header:type_name -> pb.Header
	6,   // 13: pb.CommonReply.header:type_name -> pb.Header
	6,   // 14: pb.CommonIn.header:type_name -> pb.Header
	2,   // 15: pb.CommonIn.view_option:type_name -> pb.ViewOption
	0,   // 16: pb.TokenDetail.error:type_name -> pb.XChainErrorEnum
	6,   // 17: pb.AddressStatus.header:type_name -> pb.Header
	16,  // 18: pb.AddressStatus.bcs:type_name -> pb.TokenDetail
	18,  // 19: pb.TokenFrozenDetails.tfd:type_name -> pb.TokenFrozenDetail
	0,   // 20: pb.TokenFrozenDetails.error:type_name -> pb.XChainErrorEnum
	6,   // 21: pb.AddressBalanceStatus.header:type_name -> pb.Header
	19,  // 22: pb.AddressBalanceStatus.tfds:type_name -> pb.TokenFrozenDetails
	21,  // 23: pb.Transaction.tx_inputs:type_name -> pb.TxInput
	22,  // 24: pb.Transaction.tx_outputs:type_name -> pb.TxOutput
	65,  // 25: pb.Transaction.tx_inputs_ext:type_name -> pb.TxInputExt
	66,  // 26: pb.Transaction.tx_outputs_ext:type_name -> pb.TxOutputExt
	63,  // 27: pb.Transaction.contract_requests:type_name -> pb.InvokeRequest
	67,  // 28: pb.Transaction.initiator_signs:type_name -> pb.SignatureInfo
	67,  // 29: pb.Transaction.auth_require_signs:type_name -> pb.SignatureInfo
	23,  // 30: pb.Transaction.xuper_sign:type_name -> pb.XuperSignature
	84,  // 31: pb.Transaction.modify_block:type_name -> pb.ModifyBlock
	85,  // 32: pb.Transaction.HD_info:type_name -> pb.HDInfo
	63,  // 33: pb.UtxoMeta.reserved_contracts:type_name -> pb.InvokeRequest
	63,  // 34: pb.UtxoMeta.forbidden_contract:type_name -> pb.InvokeRequest
	27,  // 35: pb.UtxoMeta.gasPrice:type_name -> pb.GasPrice
	63,  // 36: pb.UtxoMeta.group_chain_contract:type_name -> pb.InvokeRequest
	24,  // 37: pb.InternalBlock.transactions:type_name -> pb.Transaction
	106, // 38: pb.InternalBlock.failed_txs:type_name -> pb.InternalBlock.FailedTxsEntry
	114, // 39: pb.InternalBlock.Justify:type_name -> pb.QuorumCert
	6,   // 40: pb.BCStatus.header:type_name -> pb.Header
	25,  // 41: pb.BCStatus.meta:type_name -> pb.LedgerMeta
	28,  // 42: pb.BCStatus.block:type_name -> pb.InternalBlock
	26,  // 43: pb.BCStatus.utxoMeta:type_name -> pb.UtxoMeta
	6,   // 44: pb.BCTipStatus.header:type_name -> pb.Header
	6,   // 45: pb.BlockChains.header:type_name -> pb.Header
	107, // 46: pb.Speeds.SumSpeeds:type_name -> pb.Speeds.SumSpeedsEntry
	108, // 47: pb.Speeds.BcSpeeds:type_name -> pb.Speeds.BcSpeedsEntry
	109, // 48: pb.BCSpeeds.BcSpeed:type_name -> pb.BCSpeeds.BcSpeedEntry
	6,   // 49: pb.SystemsStatus.header:type_name -> pb.Header
	29,  // 50: pb.SystemsStatus.bcs_status:type_name -> pb.BCStatus
	32,  // 51: pb.SystemsStatus.speeds:type_name -> pb.Speeds
	6,   // 52: pb.SystemsStatusReply.header:type_name -> pb.Header
	34,  // 53: pb.SystemsStatusReply.systems_status:type_name -> pb.SystemsStatus
	6,   // 54: pb.RawUrl.header:type_name -> pb.Header
	6,   // 55: pb.UtxoInput.header:type_name -> pb.Header
	6,   // 56: pb.UtxoOutput.header:type_name -> pb.Header
	37,  // 57: pb.UtxoOutput.utxoList:type_name -> pb.Utxo
	40,  // 58: pb.NativeCodeStatus.desc:type_name -> pb.NativeCodeDesc
	6,   // 59: pb.DposCandidatesRequest.header:type_name -> pb.Header
	6,   // 60: pb.DposCandidatesResponse.header:type_name -> pb.Header
	6,   // 61: pb.DposNominateRecordsRequest.header:type_name -> pb.Header
	6,   // 62: pb.DposNominateRecordsResponse.header:type_name -> pb.Header
	46,  // 63: pb.DposNominateRecordsResponse.nominateRecords:type_name -> pb.DposNominateInfo
	6,   // 64: pb.DposNomineeRecordsRequest.header:type_name -> pb.Header
	6,   // 65: pb.DposNomineeRecordsResponse.header:type_name -> pb.Header
	6,   // 66: pb.DposVoteRecordsRequest.header:type_name -> pb.Header
	6,   // 67: pb.DposVoteRecordsResponse.header:type_name -> pb.Header
	51,  // 68: pb.DposVoteRecordsResponse.voteTxidRecords:type_name -> pb.voteRecord
	6,   // 69: pb.DposVotedRecordsRequest.header:type_name -> pb.Header
	6,   // 70: pb.DposVotedRecordsResponse.header:type_name -> pb.Header
	54,  // 71: pb.DposVotedRecordsResponse.votedTxidRecords:type_name -> pb.votedRecord
	6,   // 72: pb.DposCheckResultsRequest.header:type_name -> pb.Header
	6,   // 73: pb.DposCheckResultsResponse.header:type_name -> pb.Header
	6,   // 74: pb.DposStatusRequest.header:type_name -> pb.Header
	6,   // 75: pb.DposStatusResponse.header:type_name -> pb.Header
	60,  // 76: pb.DposStatusResponse.status:type_name -> pb.DposStatus
	6,   // 77: pb.InvokeRPCRequest.header:type_name -> pb.Header
	63,  // 78: pb.InvokeRPCRequest.requests:type_name -> pb.InvokeRequest
	6,   // 79: pb.InvokeRPCResponse.header:type_name -> pb.Header
	64,  // 80: pb.InvokeRPCResponse.response:type_name -> pb.InvokeResponse
	110, // 81: pb.InvokeRequest.args:type_name -> pb.InvokeRequest.ArgsEntry
	75,  // 82: pb.InvokeRequest.resource_limits:type_name -> pb.ResourceLimit
	65,  // 83: pb.InvokeResponse.inputs:type_name -> pb.TxInputExt
	66,  // 84: pb.InvokeResponse.outputs:type_name -> pb.TxOutputExt
	63,  // 85: pb.InvokeResponse.requests:type_name -> pb.InvokeRequest
	83,  // 86: pb.InvokeResponse.responses:type_name -> pb.ContractResponse
	21,  // 87: pb.InvokeResponse.utxoInputs:type_name -> pb.TxInput
	22,  // 88: pb.InvokeResponse.utxoOutputs:type_name -> pb.TxOutput
	3,   // 89: pb.PermissionModel.rule:type_name -> pb.PermissionRule
	111, // 90: pb.AkSets.sets:type_name -> pb.AkSets.SetsEntry
	68,  // 91: pb.Acl.pm:type_name -> pb.PermissionModel
	112, // 92: pb.Acl.aksWeight:type_name -> pb.Acl.AksWeightEntry
	70,  // 93: pb.Acl.akSets:type_name -> pb.AkSets
	6,   // 94: pb.AclStatus.header:type_name -> pb.Header
	71,  // 95: pb.AclStatus.acl:type_name -> pb.Acl
	73,  // 96: pb.IdentityAuths.auth:type_name -> pb.IdentityAuth
	4,   // 97: pb.ResourceLimit.type:type_name -> pb.ResourceType
	6,   // 98: pb.AK2AccountRequest.header:type_name -> pb.Header
	6,   // 99: pb.AK2AccountResponse.header:type_name -> pb.Header
	6,   // 100: pb.GetAccountContractsRequest.header:type_name -> pb.Header
	6,   // 101: pb.GetAccountContractsResponse.header:type_name -> pb.Header
	80,  // 102: pb.GetAccountContractsResponse.contracts_status:type_name -> pb.ContractStatus
	6,   // 103: pb.PreExecWithSelectUTXORequest.header:type_name -> pb.Header
	67,  // 104: pb.PreExecWithSelectUTXORequest.signInfo:type_name -> pb.SignatureInfo
	61,  // 105: pb.PreExecWithSelectUTXORequest.request:type_name -> pb.InvokeRPCRequest
	6,   // 106: pb.PreExecWithSelectUTXOResponse.header:type_name -> pb.Header
	64,  // 107: pb.PreExecWithSelectUTXOResponse.response:type_name -> pb.InvokeResponse
	39,  // 108: pb.PreExecWithSelectUTXOResponse.utxoOutput:type_name -> pb.UtxoOutput
	6,   // 109: pb.UtxoRecordDetail.header:type_name -> pb.Header
	87,  // 110: pb.UtxoRecordDetail.openUtxoRecord:type_name -> pb.UtxoRecord
	87,  // 111: pb.UtxoRecordDetail.lockedUtxoRecord:type_name -> pb.UtxoRecord
	87,  // 112: pb.UtxoRecordDetail.frozenUtxoRecord:type_name -> pb.UtxoRecord
	88,  // 113: pb.UtxoRecord.item:type_name -> pb.UtxoKey
	6,   // 114: pb.ContractStatDataRequest.header:type_name -> pb.Header
	6,   // 115: pb.ContractStatDataResponse.header:type_name -> pb.Header
	91,  // 116: pb.ContractStatDataResponse.data:type_name -> pb.ContractStatData
	6,   // 117: pb.AddressContractsRequest.header:type_name -> pb.Header
	80,  // 118: pb.ContractList.contract_status:type_name -> pb.ContractStatus
	6,   // 119: pb.AddressContractsResponse.header:type_name -> pb.Header
	113, // 120: pb.AddressContractsResponse.contracts:type_name -> pb.AddressContractsResponse.ContractsEntry
	63,  // 121: pb.CrossQueryRequest.request:type_name -> pb.InvokeRequest
	83,  // 122: pb.CrossQueryResponse.response:type_name -> pb.ContractResponse
	97,  // 123: pb.CrossQueryMeta.chain_meta:type_name -> pb.CrossChainMeta
	98,  // 124: pb.CrossQueryMeta.endorsors:type_name -> pb.CrossEndorsor
	95,  // 125: pb.CrossQueryInfo.request:type_name -> pb.CrossQueryRequest
	96,  // 126: pb.CrossQueryInfo.response:type_name -> pb.CrossQueryResponse
	67,  // 127: pb.CrossQueryInfo.signs:type_name -> pb.SignatureInfo
	6,   // 128: pb.ContractCode.header:type_name -> pb.Header
	6,   // 129: pb.Fileter.header:type_name -> pb.Header
	6,   // 130: pb.Log.header:type_name -> pb.Header
	6,   // 131: pb.txReceipt.header:type_name -> pb.Header
	9,   // 132: pb.txReceipt.txStatus:type_name -> pb.TxStatus
	104, // 133: pb.txReceipt.log:type_name -> pb.Log
	33,  // 134: pb.Speeds.BcSpeedsEntry.value:type_name -> pb.BCSpeeds
	69,  // 135: pb.AkSets.SetsEntry.value:type_name -> pb.AkSet
	93,  // 136: pb.AddressContractsResponse.ContractsEntry.value:type_name -> pb.ContractList
	38,  // 137: pb.Xchain.SelectUTXOBySize:input_type -> pb.UtxoInput
	9,   // 138: pb.Xchain.PostTx:input_type -> pb.TxStatus
	72,  // 139: pb.Xchain.QueryACL:input_type -> pb.AclStatus
	86,  // 140: pb.Xchain.QueryUtxoRecord:input_type -> pb.UtxoRecordDetail
	89,  // 141: pb.Xchain.QueryContractStatData:input_type -> pb.ContractStatDataRequest
	78,  // 142: pb.Xchain.GetAccountContracts:input_type -> pb.GetAccountContractsRequest
	9,   // 143: pb.Xchain.QueryTx:input_type -> pb.TxStatus
	17,  // 144: pb.Xchain.GetBalance:input_type -> pb.AddressStatus
	20,  // 145: pb.Xchain.GetBalanceDetail:input_type -> pb.AddressBalanceStatus
	17,  // 146: pb.Xchain.GetFrozenBalance:input_type -> pb.AddressStatus
	12,  // 147: pb.Xchain.GetBlock:input_type -> pb.BlockID
	13,  // 148: pb.Xchain.GetBlockByHeight:input_type -> pb.BlockHeight
	29,  // 149: pb.Xchain.GetBlockChainStatus:input_type -> pb.BCStatus
	15,  // 150: pb.Xchain.GetBlockChains:input_type -> pb.CommonIn
	15,  // 151: pb.Xchain.GetSystemStatus:input_type -> pb.CommonIn
	15,  // 152: pb.Xchain.GetNetURL:input_type -> pb.CommonIn
	38,  // 153: pb.Xchain.SelectUTXO:input_type -> pb.UtxoInput
	81,  // 154: pb.Xchain.PreExecWithSelectUTXO:input_type -> pb.PreExecWithSelectUTXORequest
	43,  // 155: pb.Xchain.DposCandidates:input_type -> pb.DposCandidatesRequest
	45,  // 156: pb.Xchain.DposNominateRecords:input_type -> pb.DposNominateRecordsRequest
	48,  // 157: pb.Xchain.DposNomineeRecords:input_type -> pb.DposNomineeRecordsRequest
	50,  // 158: pb.Xchain.DposVoteRecords:input_type -> pb.DposVoteRecordsRequest
	53,  // 159: pb.Xchain.DposVotedRecords:input_type -> pb.DposVotedRecordsRequest
	56,  // 160: pb.Xchain.DposCheckResults:input_type -> pb.DposCheckResultsRequest
	58,  // 161: pb.Xchain.DposStatus:input_type -> pb.DposStatusRequest
	76,  // 162: pb.Xchain.GetAccountByAK:input_type -> pb.AK2AccountRequest
	92,  // 163: pb.Xchain.GetAddressContracts:input_type -> pb.AddressContractsRequest
	61,  // 164: pb.Xchain.PreExec:input_type -> pb.InvokeRPCRequest
	102, // 165: pb.Xchain.GetCode:input_type -> pb.ContractCode
	9,   // 166: pb.Xchain.GetTransactionReceipt:input_type -> pb.TxStatus
	39,  // 167: pb.Xchain.SelectUTXOBySize:output_type -> pb.UtxoOutput
	14,  // 168: pb.Xchain.PostTx:output_type -> pb.CommonReply
	72,  // 169: pb.Xchain.QueryACL:output_type -> pb.AclStatus
	86,  // 170: pb.Xchain.QueryUtxoRecord:output_type -> pb.UtxoRecordDetail
	90,  // 171: pb.Xchain.QueryContractStatData:output_type -> pb.ContractStatDataResponse
	79,  // 172: pb.Xchain.GetAccountContracts:output_type -> pb.GetAccountContractsResponse
	9,   // 173: pb.Xchain.QueryTx:output_type -> pb.TxStatus
	17,  // 174: pb.Xchain.GetBalance:output_type -> pb.AddressStatus
	20,  // 175: pb.Xchain.GetBalanceDetail:output_type -> pb.AddressBalanceStatus
	17,  // 176: pb.Xchain.GetFrozenBalance:output_type -> pb.AddressStatus
	11,  // 177: pb.Xchain.GetBlock:output_type -> pb.Block
	11,  // 178: pb.Xchain.GetBlockByHeight:output_type -> pb.Block
	29,  // 179: pb.Xchain.GetBlockChainStatus:output_type -> pb.BCStatus
	31,  // 180: pb.Xchain.GetBlockChains:output_type -> pb.BlockChains
	35,  // 181: pb.Xchain.GetSystemStatus:output_type -> pb.SystemsStatusReply
	36,  // 182: pb.Xchain.GetNetURL:output_type -> pb.RawUrl
	39,  // 183: pb.Xchain.SelectUTXO:output_type -> pb.UtxoOutput
	82,  // 184: pb.Xchain.PreExecWithSelectUTXO:output_type -> pb.PreExecWithSelectUTXOResponse
	44,  // 185: pb.Xchain.DposCandidates:output_type -> pb.DposCandidatesResponse
	47,  // 186: pb.Xchain.DposNominateRecords:output_type -> pb.DposNominateRecordsResponse
	49,  // 187: pb.Xchain.DposNomineeRecords:output_type -> pb.DposNomineeRecordsResponse
	52,  // 188: pb.Xchain.DposVoteRecords:output_type -> pb.DposVoteRecordsResponse
	55,  // 189: pb.Xchain.DposVotedRecords:output_type -> pb.DposVotedRecordsResponse
	57,  // 190: pb.Xchain.DposCheckResults:output_type -> pb.DposCheckResultsResponse
	59,  // 191: pb.Xchain.DposStatus:output_type -> pb.DposStatusResponse
	77,  // 192: pb.Xchain.GetAccountByAK:output_type -> pb.AK2AccountResponse
	94,  // 193: pb.Xchain.GetAddressContracts:output_type -> pb.AddressContractsResponse
	62,  // 194: pb.Xchain.PreExec:output_type -> pb.InvokeRPCResponse
	102, // 195: pb.Xchain.GetCode:output_type -> pb.ContractCode
	105, // 196: pb.Xchain.GetTransactionReceipt:output_type -> pb.txReceipt
	167, // [167:197] is the sub-list for method output_type
	137, // [137:167] is the sub-list for method input_type
	137, // [137:137] is the sub-list for extension type_name
	137, // [137:137] is the sub-list for extension extendee
	0,   // [0:137] is the sub-list for field type_name
}

func init() { file_xchain_proto_init() }
func file_xchain_proto_init() {
	if File_xchain_proto != nil {
		return
	}
	file_chainedbft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenFrozenDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenFrozenDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressBalanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XuperSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCTipStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockChains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCSpeeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemsStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCodeDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmCodeDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposCandidatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposCandidatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposNominateRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposNominateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposNominateRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposNomineeRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposNomineeRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposVoteRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposVoteRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposVotedRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposVotedRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposCheckResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposCheckResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DposStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeRPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeRPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInputExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutputExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AkSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AkSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAuths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AK2AccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AK2AccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreExecWithSelectUTXORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreExecWithSelectUTXOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoRecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStatDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStatDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossEndorsor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossQueryMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossQueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fileter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xchain_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xchain_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   108,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xchain_proto_goTypes,
		DependencyIndexes: file_xchain_proto_depIdxs,
		EnumInfos:         file_xchain_proto_enumTypes,
		MessageInfos:      file_xchain_proto_msgTypes,
	}.Build()
	File_xchain_proto = out.File
	file_xchain_proto_rawDesc = nil
	file_xchain_proto_goTypes = nil
	file_xchain_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XchainClient is the client API for Xchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XchainClient interface {
	// SelectUTXOBySize merge many utxos into a few of utxos
	SelectUTXOBySize(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error)
	// PostTx post Transaction to a node
	PostTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*CommonReply, error)
	QueryACL(ctx context.Context, in *AclStatus, opts ...grpc.CallOption) (*AclStatus, error)
	QueryUtxoRecord(ctx context.Context, in *UtxoRecordDetail, opts ...grpc.CallOption) (*UtxoRecordDetail, error)
	QueryContractStatData(ctx context.Context, in *ContractStatDataRequest, opts ...grpc.CallOption) (*ContractStatDataResponse, error)
	GetAccountContracts(ctx context.Context, in *GetAccountContractsRequest, opts ...grpc.CallOption) (*GetAccountContractsResponse, error)
	// QueryTx query Transaction by TxStatus,
	// Bcname and Txid are required for this
	QueryTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxStatus, error)
	// GetBalance get balance of an address,
	// Address is required for this
	GetBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error)
	// GetFrozenBalance get two kinds of balance
	// 1. Still be frozen of an address
	// 2. Available now of an address
	// Address is required for this
	GetBalanceDetail(ctx context.Context, in *AddressBalanceStatus, opts ...grpc.CallOption) (*AddressBalanceStatus, error)
	// GetFrozenBalance get balance that still be frozen of an address,
	// Address is required for this
	GetFrozenBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error)
	// GetBlock get block by blockid and return if the block in trunk or in branch
	GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*Block, error)
	// GetBlockByHeight get block by height and return if the block in trunk or in
	// branch
	GetBlockByHeight(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*Block, error)
	GetBlockChainStatus(ctx context.Context, in *BCStatus, opts ...grpc.CallOption) (*BCStatus, error)
	// Get blockchains query blockchains
	GetBlockChains(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*BlockChains, error)
	// GetSystemStatus query system status
	GetSystemStatus(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*SystemsStatusReply, error)
	// GetNetURL return net url
	GetNetURL(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*RawUrl, error)
	// 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
	SelectUTXO(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error)
	// PreExecWithSelectUTXO preExec & selectUtxo
	PreExecWithSelectUTXO(ctx context.Context, in *PreExecWithSelectUTXORequest, opts ...grpc.CallOption) (*PreExecWithSelectUTXOResponse, error)
	//  DposCandidates get all candidates of the tdpos consensus
	DposCandidates(ctx context.Context, in *DposCandidatesRequest, opts ...grpc.CallOption) (*DposCandidatesResponse, error)
	//  DposNominateRecords get all records nominated by an user
	DposNominateRecords(ctx context.Context, in *DposNominateRecordsRequest, opts ...grpc.CallOption) (*DposNominateRecordsResponse, error)
	//  DposNomineeRecords get nominated record of a candidate
	DposNomineeRecords(ctx context.Context, in *DposNomineeRecordsRequest, opts ...grpc.CallOption) (*DposNomineeRecordsResponse, error)
	//  DposVoteRecords get all vote records voted by an user
	DposVoteRecords(ctx context.Context, in *DposVoteRecordsRequest, opts ...grpc.CallOption) (*DposVoteRecordsResponse, error)
	//  DposVotedRecords get all vote records of a candidate
	DposVotedRecords(ctx context.Context, in *DposVotedRecordsRequest, opts ...grpc.CallOption) (*DposVotedRecordsResponse, error)
	//  DposCheckResults get check results of a specific term
	DposCheckResults(ctx context.Context, in *DposCheckResultsRequest, opts ...grpc.CallOption) (*DposCheckResultsResponse, error)
	// DposStatus get dpos status
	DposStatus(ctx context.Context, in *DposStatusRequest, opts ...grpc.CallOption) (*DposStatusResponse, error)
	// GetAccountByAK get account sets contain a specific address
	GetAccountByAK(ctx context.Context, in *AK2AccountRequest, opts ...grpc.CallOption) (*AK2AccountResponse, error)
	// GetAddressContracts get contracts of accounts contain a specific address
	GetAddressContracts(ctx context.Context, in *AddressContractsRequest, opts ...grpc.CallOption) (*AddressContractsResponse, error)
	//预执行合约
	PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error)
	// 获取ContractCode
	GetCode(ctx context.Context, in *ContractCode, opts ...grpc.CallOption) (*ContractCode, error)
	// 获取TransactionReceipt
	GetTransactionReceipt(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxReceipt, error)
}

type xchainClient struct {
	cc grpc.ClientConnInterface
}

func NewXchainClient(cc grpc.ClientConnInterface) XchainClient {
	return &xchainClient{cc}
}

func (c *xchainClient) SelectUTXOBySize(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error) {
	out := new(UtxoOutput)
	err := c.cc.Invoke(ctx, "/pb.Xchain/SelectUTXOBySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) PostTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.Xchain/PostTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryACL(ctx context.Context, in *AclStatus, opts ...grpc.CallOption) (*AclStatus, error) {
	out := new(AclStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryUtxoRecord(ctx context.Context, in *UtxoRecordDetail, opts ...grpc.CallOption) (*UtxoRecordDetail, error) {
	out := new(UtxoRecordDetail)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryUtxoRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryContractStatData(ctx context.Context, in *ContractStatDataRequest, opts ...grpc.CallOption) (*ContractStatDataResponse, error) {
	out := new(ContractStatDataResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryContractStatData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetAccountContracts(ctx context.Context, in *GetAccountContractsRequest, opts ...grpc.CallOption) (*GetAccountContractsResponse, error) {
	out := new(GetAccountContractsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetAccountContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) QueryTx(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxStatus, error) {
	out := new(TxStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/QueryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error) {
	out := new(AddressStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBalanceDetail(ctx context.Context, in *AddressBalanceStatus, opts ...grpc.CallOption) (*AddressBalanceStatus, error) {
	out := new(AddressBalanceStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBalanceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetFrozenBalance(ctx context.Context, in *AddressStatus, opts ...grpc.CallOption) (*AddressStatus, error) {
	out := new(AddressStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetFrozenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlockByHeight(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlockChainStatus(ctx context.Context, in *BCStatus, opts ...grpc.CallOption) (*BCStatus, error) {
	out := new(BCStatus)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlockChainStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetBlockChains(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*BlockChains, error) {
	out := new(BlockChains)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetBlockChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetSystemStatus(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*SystemsStatusReply, error) {
	out := new(SystemsStatusReply)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetSystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetNetURL(ctx context.Context, in *CommonIn, opts ...grpc.CallOption) (*RawUrl, error) {
	out := new(RawUrl)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetNetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) SelectUTXO(ctx context.Context, in *UtxoInput, opts ...grpc.CallOption) (*UtxoOutput, error) {
	out := new(UtxoOutput)
	err := c.cc.Invoke(ctx, "/pb.Xchain/SelectUTXO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) PreExecWithSelectUTXO(ctx context.Context, in *PreExecWithSelectUTXORequest, opts ...grpc.CallOption) (*PreExecWithSelectUTXOResponse, error) {
	out := new(PreExecWithSelectUTXOResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/PreExecWithSelectUTXO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposCandidates(ctx context.Context, in *DposCandidatesRequest, opts ...grpc.CallOption) (*DposCandidatesResponse, error) {
	out := new(DposCandidatesResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposNominateRecords(ctx context.Context, in *DposNominateRecordsRequest, opts ...grpc.CallOption) (*DposNominateRecordsResponse, error) {
	out := new(DposNominateRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposNominateRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposNomineeRecords(ctx context.Context, in *DposNomineeRecordsRequest, opts ...grpc.CallOption) (*DposNomineeRecordsResponse, error) {
	out := new(DposNomineeRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposNomineeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposVoteRecords(ctx context.Context, in *DposVoteRecordsRequest, opts ...grpc.CallOption) (*DposVoteRecordsResponse, error) {
	out := new(DposVoteRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposVoteRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposVotedRecords(ctx context.Context, in *DposVotedRecordsRequest, opts ...grpc.CallOption) (*DposVotedRecordsResponse, error) {
	out := new(DposVotedRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposVotedRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposCheckResults(ctx context.Context, in *DposCheckResultsRequest, opts ...grpc.CallOption) (*DposCheckResultsResponse, error) {
	out := new(DposCheckResultsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposCheckResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) DposStatus(ctx context.Context, in *DposStatusRequest, opts ...grpc.CallOption) (*DposStatusResponse, error) {
	out := new(DposStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/DposStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetAccountByAK(ctx context.Context, in *AK2AccountRequest, opts ...grpc.CallOption) (*AK2AccountResponse, error) {
	out := new(AK2AccountResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetAccountByAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetAddressContracts(ctx context.Context, in *AddressContractsRequest, opts ...grpc.CallOption) (*AddressContractsResponse, error) {
	out := new(AddressContractsResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetAddressContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) PreExec(ctx context.Context, in *InvokeRPCRequest, opts ...grpc.CallOption) (*InvokeRPCResponse, error) {
	out := new(InvokeRPCResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchain/PreExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetCode(ctx context.Context, in *ContractCode, opts ...grpc.CallOption) (*ContractCode, error) {
	out := new(ContractCode)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchainClient) GetTransactionReceipt(ctx context.Context, in *TxStatus, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/pb.Xchain/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XchainServer is the server API for Xchain service.
type XchainServer interface {
	// SelectUTXOBySize merge many utxos into a few of utxos
	SelectUTXOBySize(context.Context, *UtxoInput) (*UtxoOutput, error)
	// PostTx post Transaction to a node
	PostTx(context.Context, *TxStatus) (*CommonReply, error)
	QueryACL(context.Context, *AclStatus) (*AclStatus, error)
	QueryUtxoRecord(context.Context, *UtxoRecordDetail) (*UtxoRecordDetail, error)
	QueryContractStatData(context.Context, *ContractStatDataRequest) (*ContractStatDataResponse, error)
	GetAccountContracts(context.Context, *GetAccountContractsRequest) (*GetAccountContractsResponse, error)
	// QueryTx query Transaction by TxStatus,
	// Bcname and Txid are required for this
	QueryTx(context.Context, *TxStatus) (*TxStatus, error)
	// GetBalance get balance of an address,
	// Address is required for this
	GetBalance(context.Context, *AddressStatus) (*AddressStatus, error)
	// GetFrozenBalance get two kinds of balance
	// 1. Still be frozen of an address
	// 2. Available now of an address
	// Address is required for this
	GetBalanceDetail(context.Context, *AddressBalanceStatus) (*AddressBalanceStatus, error)
	// GetFrozenBalance get balance that still be frozen of an address,
	// Address is required for this
	GetFrozenBalance(context.Context, *AddressStatus) (*AddressStatus, error)
	// GetBlock get block by blockid and return if the block in trunk or in branch
	GetBlock(context.Context, *BlockID) (*Block, error)
	// GetBlockByHeight get block by height and return if the block in trunk or in
	// branch
	GetBlockByHeight(context.Context, *BlockHeight) (*Block, error)
	GetBlockChainStatus(context.Context, *BCStatus) (*BCStatus, error)
	// Get blockchains query blockchains
	GetBlockChains(context.Context, *CommonIn) (*BlockChains, error)
	// GetSystemStatus query system status
	GetSystemStatus(context.Context, *CommonIn) (*SystemsStatusReply, error)
	// GetNetURL return net url
	GetNetURL(context.Context, *CommonIn) (*RawUrl, error)
	// 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
	SelectUTXO(context.Context, *UtxoInput) (*UtxoOutput, error)
	// PreExecWithSelectUTXO preExec & selectUtxo
	PreExecWithSelectUTXO(context.Context, *PreExecWithSelectUTXORequest) (*PreExecWithSelectUTXOResponse, error)
	//  DposCandidates get all candidates of the tdpos consensus
	DposCandidates(context.Context, *DposCandidatesRequest) (*DposCandidatesResponse, error)
	//  DposNominateRecords get all records nominated by an user
	DposNominateRecords(context.Context, *DposNominateRecordsRequest) (*DposNominateRecordsResponse, error)
	//  DposNomineeRecords get nominated record of a candidate
	DposNomineeRecords(context.Context, *DposNomineeRecordsRequest) (*DposNomineeRecordsResponse, error)
	//  DposVoteRecords get all vote records voted by an user
	DposVoteRecords(context.Context, *DposVoteRecordsRequest) (*DposVoteRecordsResponse, error)
	//  DposVotedRecords get all vote records of a candidate
	DposVotedRecords(context.Context, *DposVotedRecordsRequest) (*DposVotedRecordsResponse, error)
	//  DposCheckResults get check results of a specific term
	DposCheckResults(context.Context, *DposCheckResultsRequest) (*DposCheckResultsResponse, error)
	// DposStatus get dpos status
	DposStatus(context.Context, *DposStatusRequest) (*DposStatusResponse, error)
	// GetAccountByAK get account sets contain a specific address
	GetAccountByAK(context.Context, *AK2AccountRequest) (*AK2AccountResponse, error)
	// GetAddressContracts get contracts of accounts contain a specific address
	GetAddressContracts(context.Context, *AddressContractsRequest) (*AddressContractsResponse, error)
	//预执行合约
	PreExec(context.Context, *InvokeRPCRequest) (*InvokeRPCResponse, error)
	// 获取ContractCode
	GetCode(context.Context, *ContractCode) (*ContractCode, error)
	// 获取TransactionReceipt
	GetTransactionReceipt(context.Context, *TxStatus) (*TxReceipt, error)
}

// UnimplementedXchainServer can be embedded to have forward compatible implementations.
type UnimplementedXchainServer struct {
}

func (*UnimplementedXchainServer) SelectUTXOBySize(context.Context, *UtxoInput) (*UtxoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUTXOBySize not implemented")
}
func (*UnimplementedXchainServer) PostTx(context.Context, *TxStatus) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTx not implemented")
}
func (*UnimplementedXchainServer) QueryACL(context.Context, *AclStatus) (*AclStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryACL not implemented")
}
func (*UnimplementedXchainServer) QueryUtxoRecord(context.Context, *UtxoRecordDetail) (*UtxoRecordDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUtxoRecord not implemented")
}
func (*UnimplementedXchainServer) QueryContractStatData(context.Context, *ContractStatDataRequest) (*ContractStatDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContractStatData not implemented")
}
func (*UnimplementedXchainServer) GetAccountContracts(context.Context, *GetAccountContractsRequest) (*GetAccountContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountContracts not implemented")
}
func (*UnimplementedXchainServer) QueryTx(context.Context, *TxStatus) (*TxStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (*UnimplementedXchainServer) GetBalance(context.Context, *AddressStatus) (*AddressStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedXchainServer) GetBalanceDetail(context.Context, *AddressBalanceStatus) (*AddressBalanceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceDetail not implemented")
}
func (*UnimplementedXchainServer) GetFrozenBalance(context.Context, *AddressStatus) (*AddressStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrozenBalance not implemented")
}
func (*UnimplementedXchainServer) GetBlock(context.Context, *BlockID) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedXchainServer) GetBlockByHeight(context.Context, *BlockHeight) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (*UnimplementedXchainServer) GetBlockChainStatus(context.Context, *BCStatus) (*BCStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockChainStatus not implemented")
}
func (*UnimplementedXchainServer) GetBlockChains(context.Context, *CommonIn) (*BlockChains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockChains not implemented")
}
func (*UnimplementedXchainServer) GetSystemStatus(context.Context, *CommonIn) (*SystemsStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStatus not implemented")
}
func (*UnimplementedXchainServer) GetNetURL(context.Context, *CommonIn) (*RawUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetURL not implemented")
}
func (*UnimplementedXchainServer) SelectUTXO(context.Context, *UtxoInput) (*UtxoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUTXO not implemented")
}
func (*UnimplementedXchainServer) PreExecWithSelectUTXO(context.Context, *PreExecWithSelectUTXORequest) (*PreExecWithSelectUTXOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreExecWithSelectUTXO not implemented")
}
func (*UnimplementedXchainServer) DposCandidates(context.Context, *DposCandidatesRequest) (*DposCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposCandidates not implemented")
}
func (*UnimplementedXchainServer) DposNominateRecords(context.Context, *DposNominateRecordsRequest) (*DposNominateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposNominateRecords not implemented")
}
func (*UnimplementedXchainServer) DposNomineeRecords(context.Context, *DposNomineeRecordsRequest) (*DposNomineeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposNomineeRecords not implemented")
}
func (*UnimplementedXchainServer) DposVoteRecords(context.Context, *DposVoteRecordsRequest) (*DposVoteRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposVoteRecords not implemented")
}
func (*UnimplementedXchainServer) DposVotedRecords(context.Context, *DposVotedRecordsRequest) (*DposVotedRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposVotedRecords not implemented")
}
func (*UnimplementedXchainServer) DposCheckResults(context.Context, *DposCheckResultsRequest) (*DposCheckResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposCheckResults not implemented")
}
func (*UnimplementedXchainServer) DposStatus(context.Context, *DposStatusRequest) (*DposStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DposStatus not implemented")
}
func (*UnimplementedXchainServer) GetAccountByAK(context.Context, *AK2AccountRequest) (*AK2AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAK not implemented")
}
func (*UnimplementedXchainServer) GetAddressContracts(context.Context, *AddressContractsRequest) (*AddressContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressContracts not implemented")
}
func (*UnimplementedXchainServer) PreExec(context.Context, *InvokeRPCRequest) (*InvokeRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreExec not implemented")
}
func (*UnimplementedXchainServer) GetCode(context.Context, *ContractCode) (*ContractCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (*UnimplementedXchainServer) GetTransactionReceipt(context.Context, *TxStatus) (*TxReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}

func RegisterXchainServer(s *grpc.Server, srv XchainServer) {
	s.RegisterService(&_Xchain_serviceDesc, srv)
}

func _Xchain_SelectUTXOBySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).SelectUTXOBySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/SelectUTXOBySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).SelectUTXOBySize(ctx, req.(*UtxoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_PostTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).PostTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/PostTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).PostTx(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryACL(ctx, req.(*AclStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryUtxoRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoRecordDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryUtxoRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryUtxoRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryUtxoRecord(ctx, req.(*UtxoRecordDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryContractStatData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractStatDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryContractStatData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryContractStatData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryContractStatData(ctx, req.(*ContractStatDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetAccountContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetAccountContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetAccountContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetAccountContracts(ctx, req.(*GetAccountContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).QueryTx(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBalance(ctx, req.(*AddressStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBalanceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressBalanceStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBalanceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBalanceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBalanceDetail(ctx, req.(*AddressBalanceStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetFrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetFrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetFrozenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetFrozenBalance(ctx, req.(*AddressStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlock(ctx, req.(*BlockID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlockByHeight(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlockChainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BCStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlockChainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlockChainStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlockChainStatus(ctx, req.(*BCStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetBlockChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetBlockChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetBlockChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetBlockChains(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetSystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetSystemStatus(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetNetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetNetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetNetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetNetURL(ctx, req.(*CommonIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_SelectUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).SelectUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/SelectUTXO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).SelectUTXO(ctx, req.(*UtxoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_PreExecWithSelectUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreExecWithSelectUTXORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).PreExecWithSelectUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/PreExecWithSelectUTXO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).PreExecWithSelectUTXO(ctx, req.(*PreExecWithSelectUTXORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposCandidates(ctx, req.(*DposCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposNominateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposNominateRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposNominateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposNominateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposNominateRecords(ctx, req.(*DposNominateRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposNomineeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposNomineeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposNomineeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposNomineeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposNomineeRecords(ctx, req.(*DposNomineeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposVoteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposVoteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposVoteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposVoteRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposVoteRecords(ctx, req.(*DposVoteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposVotedRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposVotedRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposVotedRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposVotedRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposVotedRecords(ctx, req.(*DposVotedRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposCheckResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposCheckResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposCheckResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposCheckResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposCheckResults(ctx, req.(*DposCheckResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_DposStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DposStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).DposStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/DposStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).DposStatus(ctx, req.(*DposStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetAccountByAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AK2AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetAccountByAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetAccountByAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetAccountByAK(ctx, req.(*AK2AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetAddressContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetAddressContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetAddressContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetAddressContracts(ctx, req.(*AddressContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_PreExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).PreExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/PreExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).PreExec(ctx, req.(*InvokeRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetCode(ctx, req.(*ContractCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchain_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchainServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchain/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchainServer).GetTransactionReceipt(ctx, req.(*TxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Xchain",
	HandlerType: (*XchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectUTXOBySize",
			Handler:    _Xchain_SelectUTXOBySize_Handler,
		},
		{
			MethodName: "PostTx",
			Handler:    _Xchain_PostTx_Handler,
		},
		{
			MethodName: "QueryACL",
			Handler:    _Xchain_QueryACL_Handler,
		},
		{
			MethodName: "QueryUtxoRecord",
			Handler:    _Xchain_QueryUtxoRecord_Handler,
		},
		{
			MethodName: "QueryContractStatData",
			Handler:    _Xchain_QueryContractStatData_Handler,
		},
		{
			MethodName: "GetAccountContracts",
			Handler:    _Xchain_GetAccountContracts_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _Xchain_QueryTx_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Xchain_GetBalance_Handler,
		},
		{
			MethodName: "GetBalanceDetail",
			Handler:    _Xchain_GetBalanceDetail_Handler,
		},
		{
			MethodName: "GetFrozenBalance",
			Handler:    _Xchain_GetFrozenBalance_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Xchain_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _Xchain_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockChainStatus",
			Handler:    _Xchain_GetBlockChainStatus_Handler,
		},
		{
			MethodName: "GetBlockChains",
			Handler:    _Xchain_GetBlockChains_Handler,
		},
		{
			MethodName: "GetSystemStatus",
			Handler:    _Xchain_GetSystemStatus_Handler,
		},
		{
			MethodName: "GetNetURL",
			Handler:    _Xchain_GetNetURL_Handler,
		},
		{
			MethodName: "SelectUTXO",
			Handler:    _Xchain_SelectUTXO_Handler,
		},
		{
			MethodName: "PreExecWithSelectUTXO",
			Handler:    _Xchain_PreExecWithSelectUTXO_Handler,
		},
		{
			MethodName: "DposCandidates",
			Handler:    _Xchain_DposCandidates_Handler,
		},
		{
			MethodName: "DposNominateRecords",
			Handler:    _Xchain_DposNominateRecords_Handler,
		},
		{
			MethodName: "DposNomineeRecords",
			Handler:    _Xchain_DposNomineeRecords_Handler,
		},
		{
			MethodName: "DposVoteRecords",
			Handler:    _Xchain_DposVoteRecords_Handler,
		},
		{
			MethodName: "DposVotedRecords",
			Handler:    _Xchain_DposVotedRecords_Handler,
		},
		{
			MethodName: "DposCheckResults",
			Handler:    _Xchain_DposCheckResults_Handler,
		},
		{
			MethodName: "DposStatus",
			Handler:    _Xchain_DposStatus_Handler,
		},
		{
			MethodName: "GetAccountByAK",
			Handler:    _Xchain_GetAccountByAK_Handler,
		},
		{
			MethodName: "GetAddressContracts",
			Handler:    _Xchain_GetAddressContracts_Handler,
		},
		{
			MethodName: "PreExec",
			Handler:    _Xchain_PreExec_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _Xchain_GetCode_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _Xchain_GetTransactionReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xchain.proto",
}
