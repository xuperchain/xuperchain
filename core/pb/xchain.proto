syntax = "proto3";

import "google/api/annotations.proto";
import "chainedbft.proto";
package pb;

enum XChainErrorEnum {
  SUCCESS = 0;
  UNKNOW_ERROR = 1;
  CONNECT_REFUSE = 2;
  NOT_ENOUGH_UTXO_ERROR = 3;
  UTXOVM_ALREADY_UNCONFIRM_ERROR = 4;
  UTXOVM_NOT_FOUND_ERROR = 5;
  INPUT_OUTPUT_NOT_EQUAL_ERROR = 6;
  TX_NOT_FOUND_ERROR = 7;
  TX_SIGN_ERROR = 8;
  BLOCKCHAIN_NOTEXIST = 9;
  VALIDATE_ERROR = 10;
  CANNOT_SYNC_BLOCK_ERROR = 11;
  CONFIRM_BLOCK_ERROR = 12;
  UTXOVM_PLAY_ERROR = 13;
  WALK_ERROR = 14;
  NOT_READY_ERROR = 15;
  BLOCK_EXIST_ERROR = 16;
  ROOT_BLOCK_EXIST_ERROR = 17;
  TX_DUPLICATE_ERROR = 19;
  SERVICE_REFUSED_ERROR = 20;
  TXDATA_SIGN_ERROR = 21;
  TX_SLE_ERROR = 25;
  TX_FEE_NOT_ENOUGH_ERROR = 26;
  UTXO_SIGN_ERROR = 28;
  DPOS_QUERY_ERROR = 31;
  RWSET_INVALID_ERROR = 33;
  RWACL_INVALID_ERROR = 34;
  GAS_NOT_ENOUGH_ERROR = 35;
  TX_VERSION_INVALID_ERROR = 36;
  COMPLIANCE_CHECK_NOT_APPROVED = 37;
  ACCOUNT_CONTRACT_STATUS_ERROR = 38;
  TX_VERIFICATION_ERROR = 40;
}

// TransactionStatus is the status of transaction
enum TransactionStatus {
  // Undefined status
  UNDEFINE = 0;
  // Transaction not exist
  NOEXIST = 1;
  // Transaction have been confirmed
  CONFIRM = 2;
  // Transaction is on the furcation
  FURCATION = 3;
  // Transaction have not been confirmed
  UNCONFIRM = 4;
  // Transaction occurs error
  FAILED = 5;
}

// View option to be choosed (only used in status filter currently)
enum ViewOption {
  // Without any flag: Default
  NONE = 0;
  // Ledger flag: Get Ledger Info
  LEDGER = 1;
  // Utxo flag: Get UTXO Info
  UTXOINFO = 2;
  // Branch flag: Get BranchId Info
  BRANCHINFO = 3;
  // Peers flag: Get Peers Info
  PEERS = 4;
}

// Xchain is the main interfaces
service Xchain {

  // SelectUTXOBySize merge many utxos into a few of utxos
  rpc SelectUTXOBySize(UtxoInput) returns (UtxoOutput) {
    option (google.api.http) = {
      post : "/v1/select_utxo_by_size"
      body : "*"
    };
  }

  // PostTx post Transaction to a node
  rpc PostTx(TxStatus) returns (CommonReply) {
    option (google.api.http) = {
      post : "/v1/post_tx"
      body : "*"
    };
  }

  rpc QueryACL(AclStatus) returns (AclStatus) {
    option (google.api.http) = {
      post : "/v1/query_acl"
      body : "*"
    };
  }

  rpc QueryUtxoRecord(UtxoRecordDetail) returns (UtxoRecordDetail) {
    option (google.api.http) = {
      post : "/v1/query_utxo_record"
      body : "*"
    };
  }

  rpc QueryContractStatData(ContractStatDataRequest)
      returns (ContractStatDataResponse) {
    option (google.api.http) = {
      post : "/v1/query_contract_stat_data"
      body : "*"
    };
  }

  rpc GetAccountContracts(GetAccountContractsRequest)
      returns (GetAccountContractsResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_contracts"
      body : "*"
    };
  }

  // QueryTx query Transaction by TxStatus,
  // Bcname and Txid are required for this
  rpc QueryTx(TxStatus) returns (TxStatus) {
    option (google.api.http) = {
      post : "/v1/query_tx"
      body : "*"
    };
  }

  // GetBalance get balance of an address,
  // Address is required for this
  rpc GetBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_balance"
      body : "*"
    };
  }

  // GetFrozenBalance get two kinds of balance
  // 1. Still be frozen of an address
  // 2. Available now of an address
  // Address is required for this
  rpc GetBalanceDetail(AddressBalanceStatus) returns (AddressBalanceStatus) {
    option (google.api.http) = {
      post : "/v1/get_balance_detail"
      body : "*"
    };
  }

  // GetFrozenBalance get balance that still be frozen of an address,
  // Address is required for this
  rpc GetFrozenBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_frozen_balance"
      body : "*"
    };
  }

  // GetBlock get block by blockid and return if the block in trunk or in branch
  rpc GetBlock(BlockID) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block"
      body : "*"
    };
  }

  // GetBlockByHeight get block by height and return if the block in trunk or in
  // branch
  rpc GetBlockByHeight(BlockHeight) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block_by_height"
      body : "*"
    };
  }

  rpc GetBlockChainStatus(BCStatus) returns (BCStatus) {
    option (google.api.http) = {
      post : "/v1/get_bcstatus"
      body : "*"
    };
  }

  // Get blockchains query blockchains
  rpc GetBlockChains(CommonIn) returns (BlockChains) {
    option (google.api.http) = {
      get : "/v1/get_bcchains"
      // body: "*"
    };
  }

  // GetSystemStatus query system status
  rpc GetSystemStatus(CommonIn) returns (SystemsStatusReply) {
    option (google.api.http) = {
      post : "/v1/get_sysstatus"
      body : "*"
    };
  }

  // GetNetURL return net url
  rpc GetNetURL(CommonIn) returns (RawUrl) {}

  // 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
  rpc SelectUTXO(UtxoInput) returns (UtxoOutput) {
    option (google.api.http) = {
      post : "/v1/select_utxos_v2"
      body : "*"
    };
  }

  // PreExecWithSelectUTXO preExec & selectUtxo
  rpc PreExecWithSelectUTXO(PreExecWithSelectUTXORequest)
      returns (PreExecWithSelectUTXOResponse) {
    option (google.api.http) = {
      post : "/v1/preexec_select_utxo"
      body : "*"
    };
  }

  /*
   * DPoS query interface
   */
  //  DposCandidates get all candidates of the tdpos consensus
  rpc DposCandidates(DposCandidatesRequest) returns (DposCandidatesResponse);
  //  DposNominateRecords get all records nominated by an user
  rpc DposNominateRecords(DposNominateRecordsRequest)
      returns (DposNominateRecordsResponse);
  //  DposNomineeRecords get nominated record of a candidate
  rpc DposNomineeRecords(DposNomineeRecordsRequest)
      returns (DposNomineeRecordsResponse);
  //  DposVoteRecords get all vote records voted by an user
  rpc DposVoteRecords(DposVoteRecordsRequest) returns (DposVoteRecordsResponse);
  //  DposVotedRecords get all vote records of a candidate
  rpc DposVotedRecords(DposVotedRecordsRequest)
      returns (DposVotedRecordsResponse);
  //  DposCheckResults get check results of a specific term
  rpc DposCheckResults(DposCheckResultsRequest)
      returns (DposCheckResultsResponse);

  // DposStatus get dpos status
  rpc DposStatus(DposStatusRequest) returns (DposStatusResponse);

  // GetAccountByAK get account sets contain a specific address
  rpc GetAccountByAK(AK2AccountRequest) returns (AK2AccountResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_by_ak"
      body : "*"
    };
  }

  // GetAddressContracts get contracts of accounts contain a specific address
  rpc GetAddressContracts(AddressContractsRequest)
      returns (AddressContractsResponse) {
    option (google.api.http) = {
      post : "/v1/get_address_contracts"
      body : "*"
    };
  }

  //预执行合约
  rpc PreExec(InvokeRPCRequest) returns (InvokeRPCResponse) {
    option (google.api.http) = {
      post : "/v1/preexec"
      body : "*"
    };
  }
}

message Header {
  string logid = 1; //如果logid没填写，生成一个
  string from_node =
      2; // call rpc client address，客户端可以为空，节点一定要写自己的address
  XChainErrorEnum error = 3;
}

message TxDataAccount {
  string address = 1;      //地址
  string amount = 2;       //金额
  int64 frozen_height = 3; //冻结高度
}

message TxData {
  Header header = 13;
  // Transaction id
  bytes txid = 1;
  // Block name
  string bcname = 2;
  // Account which start the transaction
  string from_addr = 3;
  // The pk of the account which start the transaction
  string from_pubkey = 4;
  // The sk of the account which start the transaction
  string from_scrkey = 5;
  // if user don't want to provide scrkey, he should sign the txdata into
  // user_sign
  bytes user_sign = 14;
  // The account list accept tx
  repeated TxDataAccount account = 6;
  // Random number used to avoid replay attacks
  string nonce = 8;
  // Timestamp to launch the Tx
  int64 timestamp = 9;
  bytes desc = 12;
  // tx version
  int32 version = 15;
}

message TxStatus {
  Header header = 1;
  string bcname = 2;
  bytes txid = 3;
  TransactionStatus status = 4; //当前状态
  int64 distance = 5;           //离主干末端的距离（如果在主干上)
  Transaction tx = 7;
}

message BatchTxs {
  Header header = 1;
  repeated TxStatus Txs = 2;
}

message Block {
  Header header = 1;
  string bcname = 2;
  bytes blockid = 3;
  enum EBlockStatus {
    ERROR = 0;
    TRUNK = 1;
    BRANCH = 2;
    NOEXIST = 3;
  }
  EBlockStatus status = 4;
  InternalBlock block = 5;
}

message BlockID {
  Header header = 4;
  string bcname = 1;
  bytes blockid = 2;
  // if need content
  bool need_content = 3; //是否需要内容
}

message BlockHeight {
  Header header = 3;
  string bcname = 1;
  int64 height = 2;
}

message CommonReply { Header header = 1; }

message CommonIn { 
  Header header = 1; 
  ViewOption view_option = 2;
}

message TokenDetail {
  string bcname = 1;
  string balance = 2;
  XChainErrorEnum error = 3;
}

message AddressStatus {
  Header header = 1;
  string address = 2;
  repeated TokenDetail bcs = 3;
}

message TokenFrozenDetail {
  string balance = 1;
  bool isFrozen = 2;
}

message TokenFrozenDetails {
  string bcname = 1;
  repeated TokenFrozenDetail tfd = 2;
  XChainErrorEnum error = 3;
}

message AddressBalanceStatus {
  Header header = 1;
  string address = 2;
  repeated TokenFrozenDetails tfds = 3;
}

// Transaction input
message TxInput {
  // The transaction id referenced to
  bytes ref_txid = 1;
  // The output offset of the transaction referenced to
  int32 ref_offset = 2;
  // The address of the launcher
  bytes from_addr = 5;
  // The amount of the transaction
  bytes amount = 6;
  // Frozen height
  int64 frozen_height = 7;
}

// Transaction output
message TxOutput {
  // The amount of the transaction
  bytes amount = 1;
  // The address of the launcher
  bytes to_addr = 2;
  // Fronzen height
  int64 frozen_height = 4;
}

// Unified Xuper Signature
message XuperSignature {
  repeated bytes public_keys = 1;
  bytes signature = 2;
}

// Transaction is the information of the transaction
message Transaction {
  // txid is the id of this transaction
  bytes txid = 1;
  // the blockid the transaction belong to
  bytes blockid = 2;
  // Transaction input list
  repeated TxInput tx_inputs = 3;
  // Transaction output list
  repeated TxOutput tx_outputs = 4;
  // Transaction description or system contract
  bytes desc = 6;
  // Mining rewards
  bool coinbase = 7;
  // Random number used to avoid replay attacks
  string nonce = 8;
  // Timestamp to launch the transaction
  int64 timestamp = 9;
  // tx format version; tx格式版本号
  int32 version = 10;
  // auto generated tx
  bool autogen = 11;

  repeated TxInputExt tx_inputs_ext = 23;
  repeated TxOutputExt tx_outputs_ext = 24;
  repeated InvokeRequest contract_requests = 25;

  // 权限系统新增字段
  // 交易发起者, 可以是一个Address或者一个Account
  string initiator = 26;
  // 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
  repeated string auth_require = 27;
  // 交易发起者对交易元数据签名，签名的内容包括auth_require字段
  repeated SignatureInfo initiator_signs = 28;
  // 收集到的签名
  repeated SignatureInfo auth_require_signs = 29;
  // 节点收到tx的时间戳，不参与签名
  int64 received_timestamp = 30;
  // 统一签名(支持多重签名/环签名等，与initiator_signs/auth_require_signs不同时使用)
  XuperSignature xuper_sign = 31;
  // 可修改区块链标记
  ModifyBlock modify_block = 32;
  // HD加解密相关信息
  HDInfo HD_info = 33;
}

// Ledger metadata
message LedgerMeta {
  // root block id
  bytes root_blockid = 1;
  // tip block id
  bytes tip_blockid = 2;
  // the height of the trunk
  int64 trunk_height = 3;
}

// Utxo metadata
message UtxoMeta {
  bytes latest_blockid = 1; // utxo vm目前执行到的blockid
  repeated string lock_key_list = 2;
  string utxo_total = 3;                         // 当前utxo vm上的总资产
  int64 avgDelay = 4;                            // 平均上链延时
  int64 unconfirmTxAmount = 5;                   // 待确认交易量
  int64 max_block_size = 6;                      // max block size
  repeated InvokeRequest reserved_contracts = 7; // preset contracts
  InvokeRequest forbidden_contract =
      8; // reset forbidden contract configuration
  int64 new_account_resource_amount =
      9; // the resource amount of creating an account
  int64 irreversibleBlockHeight = 10; // 当前不可逆区块高度，与utxo对齐
  int64 irreversibleSlideWindow = 11; // 当前不可逆区块高度调整窗口
  GasPrice gasPrice = 12;
  InvokeRequest group_chain_contract = 13; // 群组合约相关
}

message GasPrice {
  int64 cpu_rate = 1;
  int64 mem_rate = 2;
  int64 disk_rate = 3;
  int64 xfee_rate = 4;
}

// The internal block struct
message InternalBlock {
  // block version
  int32 version = 1;
  // Random number used to avoid replay attacks
  int32 nonce = 2;
  // blockid generate the hash sign of the block used by sha256
  bytes blockid = 3;
  // pre_hash is the parent blockid of the block
  bytes pre_hash = 4;
  // The miner id
  bytes proposer = 5;
  // The sign which miner signed: blockid + nonce + timestamp
  bytes sign = 6;
  // The pk of the miner
  bytes pubkey = 7;
  // The Merkle Tree root
  bytes merkle_root = 8;
  // The height of the blockchain
  int64 height = 9;
  // Timestamp of the block
  int64 timestamp = 10;
  // Transactions of the block, only txid stored on kv, the detail information
  // stored in another table
  repeated Transaction transactions = 11;
  // The transaction count of the block
  int32 tx_count = 12;
  // 所有交易hash的merkle tree
  repeated bytes merkle_tree = 13;
  int64 curTerm = 16;
  int64 curBlockNum = 17;
  map<string, string> failed_txs = 18; // txid -> failed reason
  int32 targetBits = 19;

  // Justify used in chained-bft
  QuorumCert Justify = 20;

  // 下面的属性会动态变化
  // If the block is on the trunk
  bool in_trunk = 14;
  // Next next block which on trunk
  bytes next_hash = 15;
}

// BlockChain status
message BCStatus {
  Header header = 1;
  // block name
  string bcname = 2;
  // ledger metadata
  LedgerMeta meta = 3;
  // The information of the longest block
  InternalBlock block = 4;
  // Utox information
  UtxoMeta utxoMeta = 5;
  // Branch info
  repeated string branchBlockid = 6;
}

message BCTipStatus {
  Header header = 1;
  bool is_trunk_tip = 2;
}

message BlockChains {
  Header header = 1;
  repeated string blockchains = 2;
}

message Speeds {
  map<string, double> SumSpeeds = 1;
  map<string, BCSpeeds> BcSpeeds = 2;
}

message BCSpeeds { map<string, double> BcSpeed = 1; }

message SystemsStatus {
  Header header = 1;
  repeated BCStatus bcs_status = 2;
  Speeds speeds = 3;
  repeated string peerUrls = 4;
}

message SystemsStatusReply {
  Header header = 1;
  SystemsStatus systems_status = 2;
}

// RawUrl return the node's  connect url
message RawUrl {
  Header header = 1;
  string rawUrl = 2;
}

message Utxo {
  bytes amount = 1;
  bytes toAddr = 2;
  bytes toPubkey = 3;
  bytes refTxid = 4;
  int32 refOffset = 5;
}

// UtxoInput query info to query utxos
message UtxoInput {
  Header header = 1;
  // which bcname to select
  string bcname = 2;
  // address to select
  string address = 3;
  // publickey of the address
  string publickey = 4;
  // totalNeed refer the total need utxos to select
  string totalNeed = 5;
  // userSign of input
  bytes userSign = 7;
  // need lock
  bool needLock = 8;
}

// UtxoOutput query results
message UtxoOutput {
  Header header = 1;
  // outSign return the output
  // bytes outSign = 2;
  // utxo list
  repeated Utxo utxoList = 2;
  // total selected amount
  string totalSelected = 3;
}

message NativeCodeDesc {
  // native code name
  string name = 1;
  // code version
  string version = 2;
  // digest of binary
  bytes digest = 3;
  // the previous verion
  string prevVersion = 4;
  // xuper api version
  int32 xuperApiVersion = 5;
}

message WasmCodeDesc {
  string runtime = 1;
  string compiler = 2;
  bytes digest = 3;
  string vm_compiler = 4;
  string contract_type = 5;
}

message NativeCodeStatus {
  NativeCodeDesc desc = 1;
  int32 status = 2;
  bool healthy = 3;
}

/*
 * DPoS query interface
 */
// 候选人列表接口
message DposCandidatesRequest {
  Header header = 1;
  string bcname = 2;
}

// 候选人列表返回
message DposCandidatesResponse {
  Header header = 1;
  repeated string candidatesInfo = 2;
}

// 提名者提名记录请求
message DposNominateRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 候选人信息
message DposNominateInfo {
  string candidate = 1;
  string txid = 2;
}

// 提名者提名记录返回
message DposNominateRecordsResponse {
  Header header = 1;
  repeated DposNominateInfo nominateRecords = 2;
}

// 候选人被提名记录请求
message DposNomineeRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 候选人被提名记录返回
message DposNomineeRecordsResponse {
  Header header = 1;
  string txid = 2;
}

// 选民投票记录请求
message DposVoteRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

// 选民投票记录
message voteRecord {
  string candidate = 1;
  string txid = 2;
}

// 选民投票记录返回
message DposVoteRecordsResponse {
  Header header = 1;
  // 选民投票txid记录
  repeated voteRecord voteTxidRecords = 2;
}

// 候选人被投票记录请求
message DposVotedRecordsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}
// 候选人被投票记录
message votedRecord {
  string voter = 1;
  string txid = 2;
}

// 候选人被投票记录返回
message DposVotedRecordsResponse {
  Header header = 1;
  // 候选人被投票的txid记录
  repeated votedRecord votedTxidRecords = 2;
}

// 查询检票结果记录请求
message DposCheckResultsRequest {
  Header header = 1;
  string bcname = 2;
  int64 term = 3;
}

// 查询检票结果记录返回
message DposCheckResultsResponse {
  Header header = 1;
  int64 term = 2;
  repeated string checkResult = 3;
}

// query dpos consensus current status request
message DposStatusRequest {
  Header header = 1;
  string bcname = 2;
}

// query dpos consensus current status reply
message DposStatusResponse {
  Header header = 1;
  DposStatus status = 2;
}

message DposStatus {
  int64 term = 1;
  int64 block_num = 2;
  string proposer = 3;
  int64 proposer_num = 4;
  repeated string checkResult = 5;
}

message InvokeRPCRequest {
  Header header = 1;
  string bcname = 2;
  repeated InvokeRequest requests = 3;
  string initiator = 4;
  repeated string auth_require = 5;
}

message InvokeRPCResponse {
  Header header = 1;
  string bcname = 2;
  InvokeResponse response = 3;
}

// 预执行的请求结构
message InvokeRequest {
  string module_name = 1;
  string contract_name = 2;
  string method_name = 3;
  map<string, bytes> args = 4;
  repeated ResourceLimit resource_limits = 5;
  // amount is the amount transfer to the contract
  // attention: In one transaction, transfer to only one contract is allowed
  string amount = 6;
}

// 预执行的返回结构
message InvokeResponse {
  repeated TxInputExt inputs = 1;
  repeated TxOutputExt outputs = 2;
  repeated bytes response = 3;
  int64 gas_used = 4;
  repeated InvokeRequest requests = 5;
  repeated ContractResponse responses = 6;
  repeated TxInput utxoInputs = 7;
  repeated TxOutput utxoOutputs = 8;
}

// 扩展输入
message TxInputExt {
  string bucket = 1;
  bytes key = 2;
  bytes ref_txid = 3;
  int32 ref_offset = 4;
}

// 扩展输出
message TxOutputExt {
  string bucket = 1;
  bytes key = 2;
  bytes value = 3;
}

// 签名详情
message SignatureInfo {
  string PublicKey = 1;
  bytes Sign = 2;
}

// --------   Account and Permission Section --------
enum PermissionRule {
  NULL = 0;           // 无权限控制
  SIGN_THRESHOLD = 1; // 签名阈值策略
  SIGN_AKSET = 2;     // AKSet签名策略
  SIGN_RATE = 3;      // 签名率策略
  SIGN_SUM = 4;       // 签名个数策略
  CA_SERVER = 5;      // CA服务器鉴权
  COMMUNITY_VOTE = 6; // 社区治理
}

message PermissionModel {
  PermissionRule rule = 1;
  double acceptValue = 2; // 取决于用哪种rule, 可以表示签名率，签名数或权重阈值
}

// AK集的表示方法
message AkSet {
  repeated string aks = 1; // 一堆公钥
}
message AkSets {
  map<string, AkSet> sets = 1; // 公钥or账户名集
  string expression = 2; // 表达式，一期不支持表达式，默认集合内是and，集合间是or
}

// Acl实际使用的结构
message Acl {
  PermissionModel pm = 1;            // 采用的权限模型
  map<string, double> aksWeight = 2; // 公钥or账户名  -> 权重
  AkSets akSets = 3;
}

// 查询Acl
message AclStatus {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  string contractName = 4;
  string methodName = 5;
  bool confirmed = 6;
  Acl acl = 7;
}

// Identity authentication request
message IdentityAuth {
  bytes sign = 1;
  bytes pubkey = 2;
  string addr = 3;
  string peerID = 4;
  string timestamp = 5;
}

// Identity authentication requests
message IdentityAuths { repeated IdentityAuth auth = 1; }

enum ResourceType {
  CPU = 0;
  MEMORY = 1;
  DISK = 2;
  XFEE = 3; // the fee used in kernel contract
}

message ResourceLimit {
  ResourceType type = 1;
  int64 limit = 2;
}

message AK2AccountRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

message AK2AccountResponse {
  Header header = 1;
  string bcname = 2;
  repeated string account = 3;
}

// Query account contracts request
message GetAccountContractsRequest {
  Header header = 1;
  string bcname = 2;
  string account = 3;
}

// Query account contracts response
message GetAccountContractsResponse {
  Header header = 1;
  repeated ContractStatus contracts_status = 2;
}

// Status of a contract
message ContractStatus {
  string contract_name = 1;
  string txid = 2;
  bytes desc = 3;
  bool is_banned = 4;
  int64 timestamp = 5;
  string runtime = 6;
}

// PreExecWithSelectUTXORequest preExec + selectUtxo for request
message PreExecWithSelectUTXORequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
  int64 totalAmount = 4;
  SignatureInfo signInfo = 6;
  bool needLock = 7;
  InvokeRPCRequest request = 5;
}

// PreExecWithSelectUTXOResponse preExec + selectUtxo for response
message PreExecWithSelectUTXOResponse {
  Header header = 1;
  string bcname = 2;
  InvokeResponse response = 3;
  // for preExec & selectUTXO
  UtxoOutput utxoOutput = 4;
}

// ContractResponse is the response returnd by contract
message ContractResponse {
  int32 status = 1;
  string message = 2;
  bytes body = 3;
}

message ModifyBlock {
  // txid交易被effective_txid的交易提出可修改区块链的请求
  string effective_txid = 1;
  // 本交易是否已被修改标记
  bool marked = 2;
  // txid交易被修改生效的高度
  int64 effective_height = 3;
  // 监管的public key
  string public_key = 4;
  // 监管地址对修改的交易id的签名
  string sign = 5;
}

message HDInfo {
  // HDPublickey
  bytes hd_public_key = 1;
  // original_hash
  bytes original_hash = 2;
}

message UtxoRecordDetail {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  UtxoRecord openUtxoRecord = 4;
  UtxoRecord lockedUtxoRecord = 5;
  UtxoRecord frozenUtxoRecord = 6;
  int64 displayCount = 7;
}

message UtxoRecord {
  string utxoCount = 1;
  string utxoAmount = 2;
  repeated UtxoKey item = 3;
}

message UtxoKey {
  string refTxid = 1;
  string offset = 2;
  string amount = 3;
}

message ContractStatDataRequest {
  Header header = 1;
  string bcname = 2;
}

message ContractStatDataResponse {
  Header header = 1;
  string bcname = 2;
  ContractStatData data = 3;
}

message ContractStatData {
  int64 accountCount = 1;
  int64 contractCount = 2;
}

// Query address contracts request
message AddressContractsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
  bool need_content = 4;
}

message ContractList { repeated ContractStatus contract_status = 1; }

// Query address contracts response
message AddressContractsResponse {
  Header header = 1;
  map<string, ContractList> contracts = 2;
}

message CrossQueryRequest {
  string bcname = 1;
  int64 timestamp = 2;
  string initiator = 3;
  repeated string auth_require = 4;
  InvokeRequest request = 5;
}

message CrossQueryResponse {
  ContractResponse response = 1;
}

message CrossChainMeta {
  string type = 1;
  int64 min_endorsor_num = 2;
}

message CrossEndorsor {
  string address = 1;
  string pub_key = 2;
  // ip+port
  string host = 3;
}

message CrossQueryMeta {
  CrossChainMeta chain_meta = 1;
  repeated CrossEndorsor endorsors = 2;
}

message CrossQueryInfo {
  CrossQueryRequest request = 1;
  CrossQueryResponse response = 2;
  repeated SignatureInfo signs = 3;
}

message ContractEvent {
  string contract = 1;
  string name = 2;
  bytes body = 3;
}

message GetBlockIdsRequest {
  int64 count = 1;
  bytes blockId = 2;
}

message GetBlockIdsResponse {
  bytes tipBlockId = 1;
  repeated bytes blockIds = 2;
}

message GetBlocksRequest {
  repeated bytes blockIds= 1;
}

message GetBlocksResponse {
  //Header header = 1;
  repeated pb.InternalBlock blocksInfo = 2;
}
