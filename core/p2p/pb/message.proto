syntax = "proto3";

package xuperp2p;

// XuperMessage is the message of Xuper p2p server
message XuperMessage {
    enum MessageType {
        SENDBLOCK= 0;
        POSTTX = 1;
        BATCHPOSTTX = 2;
        GET_BLOCK = 3;
        PING = 4;
        GET_BLOCKCHAINSTATUS = 5;
        GET_BLOCK_RES = 6;
        GET_BLOCKCHAINSTATUS_RES = 7;
        // 向邻近确认区块是否为最新状态区块
        CONFIRM_BLOCKCHAINSTATUS = 8;
        CONFIRM_BLOCKCHAINSTATUS_RES = 9;
        
        MSG_TYPE_NONE = 10;
      
        // query RPC port information
        GET_RPC_PORT = 11;
        GET_RPC_PORT_RES = 12;

        // get authentication information
        GET_AUTHENTICATION = 13;
        GET_AUTHENTICATION_RES = 14;

        // chained-bft NEW_VIEW message
        CHAINED_BFT_NEW_VIEW_MSG = 15;
        // chained-bft NEW_PROPOSAL message
        CHAINED_BFT_NEW_PROPOSAL_MSG = 16;
        // chained-bft vote message
        CHAINED_BFT_VOTE_MSG = 17;

        // broadcast new block id to other node
        NEW_BLOCKID = 18;

        // new node used to add to network automatic
        NEW_NODE = 19;

        /* 消息头同步对(GET_HASHES <-> HASHES), 
         * 发送方通过GET_HASHES消息询问区间范围内的所有区块哈希信息, 
         * 接受方发送HASHES信息, 该消息携带其所知的区间范围内的BlockId列表
         */
        GET_BLOCKIDS = 20;
        GET_BLOCKIDS_RES = 21;
        /* 消息对(GET_BLOCKS <-> BLOCKS), 
         * 发送方通过GET_BLOCKS消息询问BlockId列表内的所有对应区块信息, 
         * 接受方发送BLOCKS信息, 该消息携带具体Block
         */
        GET_BLOCKS = 22;
        GET_BLOCKS_RES = 23;
    }
    enum ErrorType {
        // success 
        SUCCESS = 0;
        NONE = 1;
        // common error
        UNKNOW_ERROR = 2;
        CHECK_SUM_ERROR = 3;
        UNMARSHAL_MSG_BODY_ERROR = 4;
        CONNECT_REFUSE = 5;
        // block error
        GET_BLOCKCHAIN_ERROR = 6;
        BLOCKCHAIN_NOTEXIST = 7;
        GET_BLOCK_ERROR = 8;
        CONFIRM_BLOCKCHAINSTATUS_ERROR = 9;
        GET_AUTHENTICATION_ERROR = 10;
        GET_AUTHENTICATION_NOT_PASS = 11; 
   }

    // MessageHeader is the message header of Xuper p2p server
    message MessageHeader {
        string version = 1;
        // dataCheckSum is the message data checksum, it can be used check where the message have been received
        string logid = 2;
        string from = 3;
        string bcname = 4;
        MessageType type = 5;
        uint32 dataCheckSum = 6;
        ErrorType errorType = 7;
        bool enableCompress = 8;
    }

    // MessageData is the message data of Xuper p2p server
    message MessageData {
        // msgInfo is the message infomation, use protobuf coding style
        bytes msgInfo = 3;
    }
    MessageHeader Header = 1;
    MessageData Data = 2;
}

