// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_auth.proto

#ifndef PROTOBUF_INCLUDED_data_5fauth_2eproto
#define PROTOBUF_INCLUDED_data_5fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fauth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fauth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace data_auth {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
}  // namespace data_auth
namespace google {
namespace protobuf {
template<> ::data_auth::Data* Arena::CreateMaybeMessage<::data_auth::Data>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace data_auth {

// ===================================================================

class Data :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_auth.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string user = 5;
  void clear_user();
  static const int kUserFieldNumber = 5;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string commitment = 6;
  void clear_commitment();
  static const int kCommitmentFieldNumber = 6;
  const ::std::string& commitment() const;
  void set_commitment(const ::std::string& value);
  #if LANG_CXX11
  void set_commitment(::std::string&& value);
  #endif
  void set_commitment(const char* value);
  void set_commitment(const char* value, size_t size);
  ::std::string* mutable_commitment();
  ::std::string* release_commitment();
  void set_allocated_commitment(::std::string* commitment);

  // int64 dataid = 1;
  void clear_dataid();
  static const int kDataidFieldNumber = 1;
  ::google::protobuf::int64 dataid() const;
  void set_dataid(::google::protobuf::int64 value);

  // int64 expire = 4;
  void clear_expire();
  static const int kExpireFieldNumber = 4;
  ::google::protobuf::int64 expire() const;
  void set_expire(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:data_auth.Data)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr commitment_;
  ::google::protobuf::int64 dataid_;
  ::google::protobuf::int64 expire_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// int64 dataid = 1;
inline void Data::clear_dataid() {
  dataid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Data::dataid() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.dataid)
  return dataid_;
}
inline void Data::set_dataid(::google::protobuf::int64 value) {
  
  dataid_ = value;
  // @@protoc_insertion_point(field_set:data_auth.Data.dataid)
}

// string owner = 2;
inline void Data::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::owner() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.owner)
  return owner_.GetNoArena();
}
inline void Data::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_auth.Data.owner)
}
#if LANG_CXX11
inline void Data::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_auth.Data.owner)
}
#endif
inline void Data::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_auth.Data.owner)
}
inline void Data::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_auth.Data.owner)
}
inline ::std::string* Data::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:data_auth.Data.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_owner() {
  // @@protoc_insertion_point(field_release:data_auth.Data.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_owner(::std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:data_auth.Data.owner)
}

// string content = 3;
inline void Data::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::content() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.content)
  return content_.GetNoArena();
}
inline void Data::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_auth.Data.content)
}
#if LANG_CXX11
inline void Data::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_auth.Data.content)
}
#endif
inline void Data::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_auth.Data.content)
}
inline void Data::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_auth.Data.content)
}
inline ::std::string* Data::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:data_auth.Data.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_content() {
  // @@protoc_insertion_point(field_release:data_auth.Data.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:data_auth.Data.content)
}

// int64 expire = 4;
inline void Data::clear_expire() {
  expire_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Data::expire() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.expire)
  return expire_;
}
inline void Data::set_expire(::google::protobuf::int64 value) {
  
  expire_ = value;
  // @@protoc_insertion_point(field_set:data_auth.Data.expire)
}

// string user = 5;
inline void Data::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::user() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.user)
  return user_.GetNoArena();
}
inline void Data::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_auth.Data.user)
}
#if LANG_CXX11
inline void Data::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_auth.Data.user)
}
#endif
inline void Data::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_auth.Data.user)
}
inline void Data::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_auth.Data.user)
}
inline ::std::string* Data::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:data_auth.Data.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_user() {
  // @@protoc_insertion_point(field_release:data_auth.Data.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:data_auth.Data.user)
}

// string commitment = 6;
inline void Data::clear_commitment() {
  commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::commitment() const {
  // @@protoc_insertion_point(field_get:data_auth.Data.commitment)
  return commitment_.GetNoArena();
}
inline void Data::set_commitment(const ::std::string& value) {
  
  commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_auth.Data.commitment)
}
#if LANG_CXX11
inline void Data::set_commitment(::std::string&& value) {
  
  commitment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_auth.Data.commitment)
}
#endif
inline void Data::set_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_auth.Data.commitment)
}
inline void Data::set_commitment(const char* value, size_t size) {
  
  commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_auth.Data.commitment)
}
inline ::std::string* Data::mutable_commitment() {
  
  // @@protoc_insertion_point(field_mutable:data_auth.Data.commitment)
  return commitment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_commitment() {
  // @@protoc_insertion_point(field_release:data_auth.Data.commitment)
  
  return commitment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_commitment(::std::string* commitment) {
  if (commitment != nullptr) {
    
  } else {
    
  }
  commitment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitment);
  // @@protoc_insertion_point(field_set_allocated:data_auth.Data.commitment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data_auth

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_data_5fauth_2eproto
