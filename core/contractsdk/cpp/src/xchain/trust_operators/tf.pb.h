// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf.proto

#ifndef PROTOBUF_INCLUDED_tf_2eproto
#define PROTOBUF_INCLUDED_tf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_tf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class KVPair;
class KVPairDefaultTypeInternal;
extern KVPairDefaultTypeInternal _KVPair_default_instance_;
class KVPairs;
class KVPairsDefaultTypeInternal;
extern KVPairsDefaultTypeInternal _KVPairs_default_instance_;
class SyscallHeader;
class SyscallHeaderDefaultTypeInternal;
extern SyscallHeaderDefaultTypeInternal _SyscallHeader_default_instance_;
class TrustFunctionCallRequest;
class TrustFunctionCallRequestDefaultTypeInternal;
extern TrustFunctionCallRequestDefaultTypeInternal _TrustFunctionCallRequest_default_instance_;
class TrustFunctionCallResponse;
class TrustFunctionCallResponseDefaultTypeInternal;
extern TrustFunctionCallResponseDefaultTypeInternal _TrustFunctionCallResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::KVPair* Arena::CreateMaybeMessage<::KVPair>(Arena*);
template<> ::KVPairs* Arena::CreateMaybeMessage<::KVPairs>(Arena*);
template<> ::SyscallHeader* Arena::CreateMaybeMessage<::SyscallHeader>(Arena*);
template<> ::TrustFunctionCallRequest* Arena::CreateMaybeMessage<::TrustFunctionCallRequest>(Arena*);
template<> ::TrustFunctionCallResponse* Arena::CreateMaybeMessage<::TrustFunctionCallResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class SyscallHeader :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:SyscallHeader) */ {
 public:
  SyscallHeader();
  virtual ~SyscallHeader();

  SyscallHeader(const SyscallHeader& from);

  inline SyscallHeader& operator=(const SyscallHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyscallHeader(SyscallHeader&& from) noexcept
    : SyscallHeader() {
    *this = ::std::move(from);
  }

  inline SyscallHeader& operator=(SyscallHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SyscallHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyscallHeader* internal_default_instance() {
    return reinterpret_cast<const SyscallHeader*>(
               &_SyscallHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SyscallHeader* other);
  friend void swap(SyscallHeader& a, SyscallHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyscallHeader* New() const final {
    return CreateMaybeMessage<SyscallHeader>(nullptr);
  }

  SyscallHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyscallHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SyscallHeader& from);
  void MergeFrom(const SyscallHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyscallHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ctxid = 1;
  void clear_ctxid();
  static const int kCtxidFieldNumber = 1;
  ::google::protobuf::int64 ctxid() const;
  void set_ctxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SyscallHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 ctxid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_2eproto;
};
// -------------------------------------------------------------------

class TrustFunctionCallRequest :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TrustFunctionCallRequest) */ {
 public:
  TrustFunctionCallRequest();
  virtual ~TrustFunctionCallRequest();

  TrustFunctionCallRequest(const TrustFunctionCallRequest& from);

  inline TrustFunctionCallRequest& operator=(const TrustFunctionCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrustFunctionCallRequest(TrustFunctionCallRequest&& from) noexcept
    : TrustFunctionCallRequest() {
    *this = ::std::move(from);
  }

  inline TrustFunctionCallRequest& operator=(TrustFunctionCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TrustFunctionCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustFunctionCallRequest* internal_default_instance() {
    return reinterpret_cast<const TrustFunctionCallRequest*>(
               &_TrustFunctionCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrustFunctionCallRequest* other);
  friend void swap(TrustFunctionCallRequest& a, TrustFunctionCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrustFunctionCallRequest* New() const final {
    return CreateMaybeMessage<TrustFunctionCallRequest>(nullptr);
  }

  TrustFunctionCallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrustFunctionCallRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TrustFunctionCallRequest& from);
  void MergeFrom(const TrustFunctionCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustFunctionCallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string args = 3;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // string address = 5;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .SyscallHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::SyscallHeader& header() const;
  ::SyscallHeader* release_header();
  ::SyscallHeader* mutable_header();
  void set_allocated_header(::SyscallHeader* header);

  // uint32 svn = 4;
  void clear_svn();
  static const int kSvnFieldNumber = 4;
  ::google::protobuf::uint32 svn() const;
  void set_svn(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TrustFunctionCallRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::SyscallHeader* header_;
  ::google::protobuf::uint32 svn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_2eproto;
};
// -------------------------------------------------------------------

class KVPair :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:KVPair) */ {
 public:
  KVPair();
  virtual ~KVPair();

  KVPair(const KVPair& from);

  inline KVPair& operator=(const KVPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KVPair(KVPair&& from) noexcept
    : KVPair() {
    *this = ::std::move(from);
  }

  inline KVPair& operator=(KVPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const KVPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVPair* internal_default_instance() {
    return reinterpret_cast<const KVPair*>(
               &_KVPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KVPair* other);
  friend void swap(KVPair& a, KVPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KVPair* New() const final {
    return CreateMaybeMessage<KVPair>(nullptr);
  }

  KVPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KVPair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const KVPair& from);
  void MergeFrom(const KVPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:KVPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_2eproto;
};
// -------------------------------------------------------------------

class KVPairs :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:KVPairs) */ {
 public:
  KVPairs();
  virtual ~KVPairs();

  KVPairs(const KVPairs& from);

  inline KVPairs& operator=(const KVPairs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KVPairs(KVPairs&& from) noexcept
    : KVPairs() {
    *this = ::std::move(from);
  }

  inline KVPairs& operator=(KVPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const KVPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVPairs* internal_default_instance() {
    return reinterpret_cast<const KVPairs*>(
               &_KVPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(KVPairs* other);
  friend void swap(KVPairs& a, KVPairs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KVPairs* New() const final {
    return CreateMaybeMessage<KVPairs>(nullptr);
  }

  KVPairs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KVPairs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const KVPairs& from);
  void MergeFrom(const KVPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVPairs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KVPair kv = 1;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 1;
  ::KVPair* mutable_kv(int index);
  ::google::protobuf::RepeatedPtrField< ::KVPair >*
      mutable_kv();
  const ::KVPair& kv(int index) const;
  ::KVPair* add_kv();
  const ::google::protobuf::RepeatedPtrField< ::KVPair >&
      kv() const;

  // @@protoc_insertion_point(class_scope:KVPairs)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KVPair > kv_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_2eproto;
};
// -------------------------------------------------------------------

class TrustFunctionCallResponse :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TrustFunctionCallResponse) */ {
 public:
  TrustFunctionCallResponse();
  virtual ~TrustFunctionCallResponse();

  TrustFunctionCallResponse(const TrustFunctionCallResponse& from);

  inline TrustFunctionCallResponse& operator=(const TrustFunctionCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrustFunctionCallResponse(TrustFunctionCallResponse&& from) noexcept
    : TrustFunctionCallResponse() {
    *this = ::std::move(from);
  }

  inline TrustFunctionCallResponse& operator=(TrustFunctionCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TrustFunctionCallResponse& default_instance();

  enum ResultsCase {
    kPlaintext = 2,
    kKvs = 3,
    RESULTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustFunctionCallResponse* internal_default_instance() {
    return reinterpret_cast<const TrustFunctionCallResponse*>(
               &_TrustFunctionCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TrustFunctionCallResponse* other);
  friend void swap(TrustFunctionCallResponse& a, TrustFunctionCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrustFunctionCallResponse* New() const final {
    return CreateMaybeMessage<TrustFunctionCallResponse>(nullptr);
  }

  TrustFunctionCallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrustFunctionCallResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TrustFunctionCallResponse& from);
  void MergeFrom(const TrustFunctionCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustFunctionCallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plaintext = 2;
  private:
  bool has_plaintext() const;
  public:
  void clear_plaintext();
  static const int kPlaintextFieldNumber = 2;
  const ::std::string& plaintext() const;
  void set_plaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_plaintext(::std::string&& value);
  #endif
  void set_plaintext(const char* value);
  void set_plaintext(const char* value, size_t size);
  ::std::string* mutable_plaintext();
  ::std::string* release_plaintext();
  void set_allocated_plaintext(::std::string* plaintext);

  // .KVPairs kvs = 3;
  bool has_kvs() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 3;
  const ::KVPairs& kvs() const;
  ::KVPairs* release_kvs();
  ::KVPairs* mutable_kvs();
  void set_allocated_kvs(::KVPairs* kvs);

  void clear_results();
  ResultsCase results_case() const;
  // @@protoc_insertion_point(class_scope:TrustFunctionCallResponse)
 private:
  class HasBitSetters;
  void set_has_plaintext();
  void set_has_kvs();

  inline bool has_results() const;
  inline void clear_has_results();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ResultsUnion {
    ResultsUnion() {}
    ::google::protobuf::internal::ArenaStringPtr plaintext_;
    ::KVPairs* kvs_;
  } results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyscallHeader

// int64 ctxid = 1;
inline void SyscallHeader::clear_ctxid() {
  ctxid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SyscallHeader::ctxid() const {
  // @@protoc_insertion_point(field_get:SyscallHeader.ctxid)
  return ctxid_;
}
inline void SyscallHeader::set_ctxid(::google::protobuf::int64 value) {
  
  ctxid_ = value;
  // @@protoc_insertion_point(field_set:SyscallHeader.ctxid)
}

// -------------------------------------------------------------------

// TrustFunctionCallRequest

// .SyscallHeader header = 1;
inline bool TrustFunctionCallRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void TrustFunctionCallRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::SyscallHeader& TrustFunctionCallRequest::header() const {
  const ::SyscallHeader* p = header_;
  // @@protoc_insertion_point(field_get:TrustFunctionCallRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::SyscallHeader*>(
      &::_SyscallHeader_default_instance_);
}
inline ::SyscallHeader* TrustFunctionCallRequest::release_header() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallRequest.header)
  
  ::SyscallHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::SyscallHeader* TrustFunctionCallRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyscallHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallRequest.header)
  return header_;
}
inline void TrustFunctionCallRequest::set_allocated_header(::SyscallHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:TrustFunctionCallRequest.header)
}

// string method = 2;
inline void TrustFunctionCallRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrustFunctionCallRequest::method() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallRequest.method)
  return method_.GetNoArena();
}
inline void TrustFunctionCallRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrustFunctionCallRequest.method)
}
#if LANG_CXX11
inline void TrustFunctionCallRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrustFunctionCallRequest.method)
}
#endif
inline void TrustFunctionCallRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrustFunctionCallRequest.method)
}
inline void TrustFunctionCallRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrustFunctionCallRequest.method)
}
inline ::std::string* TrustFunctionCallRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrustFunctionCallRequest::release_method() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrustFunctionCallRequest::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:TrustFunctionCallRequest.method)
}

// string args = 3;
inline void TrustFunctionCallRequest::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrustFunctionCallRequest::args() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallRequest.args)
  return args_.GetNoArena();
}
inline void TrustFunctionCallRequest::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrustFunctionCallRequest.args)
}
#if LANG_CXX11
inline void TrustFunctionCallRequest::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrustFunctionCallRequest.args)
}
#endif
inline void TrustFunctionCallRequest::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrustFunctionCallRequest.args)
}
inline void TrustFunctionCallRequest::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrustFunctionCallRequest.args)
}
inline ::std::string* TrustFunctionCallRequest::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallRequest.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrustFunctionCallRequest::release_args() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallRequest.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrustFunctionCallRequest::set_allocated_args(::std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:TrustFunctionCallRequest.args)
}

// uint32 svn = 4;
inline void TrustFunctionCallRequest::clear_svn() {
  svn_ = 0u;
}
inline ::google::protobuf::uint32 TrustFunctionCallRequest::svn() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallRequest.svn)
  return svn_;
}
inline void TrustFunctionCallRequest::set_svn(::google::protobuf::uint32 value) {
  
  svn_ = value;
  // @@protoc_insertion_point(field_set:TrustFunctionCallRequest.svn)
}

// string address = 5;
inline void TrustFunctionCallRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrustFunctionCallRequest::address() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallRequest.address)
  return address_.GetNoArena();
}
inline void TrustFunctionCallRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrustFunctionCallRequest.address)
}
#if LANG_CXX11
inline void TrustFunctionCallRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrustFunctionCallRequest.address)
}
#endif
inline void TrustFunctionCallRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrustFunctionCallRequest.address)
}
inline void TrustFunctionCallRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrustFunctionCallRequest.address)
}
inline ::std::string* TrustFunctionCallRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrustFunctionCallRequest::release_address() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrustFunctionCallRequest::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:TrustFunctionCallRequest.address)
}

// -------------------------------------------------------------------

// KVPair

// string key = 1;
inline void KVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::key() const {
  // @@protoc_insertion_point(field_get:KVPair.key)
  return key_.GetNoArena();
}
inline void KVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KVPair.key)
}
#if LANG_CXX11
inline void KVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KVPair.key)
}
#endif
inline void KVPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KVPair.key)
}
inline void KVPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KVPair.key)
}
inline ::std::string* KVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:KVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_key() {
  // @@protoc_insertion_point(field_release:KVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:KVPair.key)
}

// string value = 2;
inline void KVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::value() const {
  // @@protoc_insertion_point(field_get:KVPair.value)
  return value_.GetNoArena();
}
inline void KVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KVPair.value)
}
#if LANG_CXX11
inline void KVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KVPair.value)
}
#endif
inline void KVPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KVPair.value)
}
inline void KVPair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KVPair.value)
}
inline ::std::string* KVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:KVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_value() {
  // @@protoc_insertion_point(field_release:KVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:KVPair.value)
}

// -------------------------------------------------------------------

// KVPairs

// repeated .KVPair kv = 1;
inline int KVPairs::kv_size() const {
  return kv_.size();
}
inline void KVPairs::clear_kv() {
  kv_.Clear();
}
inline ::KVPair* KVPairs::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:KVPairs.kv)
  return kv_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KVPair >*
KVPairs::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:KVPairs.kv)
  return &kv_;
}
inline const ::KVPair& KVPairs::kv(int index) const {
  // @@protoc_insertion_point(field_get:KVPairs.kv)
  return kv_.Get(index);
}
inline ::KVPair* KVPairs::add_kv() {
  // @@protoc_insertion_point(field_add:KVPairs.kv)
  return kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KVPair >&
KVPairs::kv() const {
  // @@protoc_insertion_point(field_list:KVPairs.kv)
  return kv_;
}

// -------------------------------------------------------------------

// TrustFunctionCallResponse

// string plaintext = 2;
inline bool TrustFunctionCallResponse::has_plaintext() const {
  return results_case() == kPlaintext;
}
inline void TrustFunctionCallResponse::set_has_plaintext() {
  _oneof_case_[0] = kPlaintext;
}
inline void TrustFunctionCallResponse::clear_plaintext() {
  if (has_plaintext()) {
    results_.plaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_results();
  }
}
inline const ::std::string& TrustFunctionCallResponse::plaintext() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallResponse.plaintext)
  if (has_plaintext()) {
    return results_.plaintext_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TrustFunctionCallResponse::set_plaintext(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TrustFunctionCallResponse.plaintext)
  if (!has_plaintext()) {
    clear_results();
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  results_.plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrustFunctionCallResponse.plaintext)
}
#if LANG_CXX11
inline void TrustFunctionCallResponse::set_plaintext(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TrustFunctionCallResponse.plaintext)
  if (!has_plaintext()) {
    clear_results();
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  results_.plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrustFunctionCallResponse.plaintext)
}
#endif
inline void TrustFunctionCallResponse::set_plaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_plaintext()) {
    clear_results();
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  results_.plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrustFunctionCallResponse.plaintext)
}
inline void TrustFunctionCallResponse::set_plaintext(const char* value, size_t size) {
  if (!has_plaintext()) {
    clear_results();
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  results_.plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrustFunctionCallResponse.plaintext)
}
inline ::std::string* TrustFunctionCallResponse::mutable_plaintext() {
  if (!has_plaintext()) {
    clear_results();
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallResponse.plaintext)
  return results_.plaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrustFunctionCallResponse::release_plaintext() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallResponse.plaintext)
  if (has_plaintext()) {
    clear_has_results();
    return results_.plaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TrustFunctionCallResponse::set_allocated_plaintext(::std::string* plaintext) {
  if (has_results()) {
    clear_results();
  }
  if (plaintext != nullptr) {
    set_has_plaintext();
    results_.plaintext_.UnsafeSetDefault(plaintext);
  }
  // @@protoc_insertion_point(field_set_allocated:TrustFunctionCallResponse.plaintext)
}

// .KVPairs kvs = 3;
inline bool TrustFunctionCallResponse::has_kvs() const {
  return results_case() == kKvs;
}
inline void TrustFunctionCallResponse::set_has_kvs() {
  _oneof_case_[0] = kKvs;
}
inline void TrustFunctionCallResponse::clear_kvs() {
  if (has_kvs()) {
    delete results_.kvs_;
    clear_has_results();
  }
}
inline ::KVPairs* TrustFunctionCallResponse::release_kvs() {
  // @@protoc_insertion_point(field_release:TrustFunctionCallResponse.kvs)
  if (has_kvs()) {
    clear_has_results();
      ::KVPairs* temp = results_.kvs_;
    results_.kvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KVPairs& TrustFunctionCallResponse::kvs() const {
  // @@protoc_insertion_point(field_get:TrustFunctionCallResponse.kvs)
  return has_kvs()
      ? *results_.kvs_
      : *reinterpret_cast< ::KVPairs*>(&::_KVPairs_default_instance_);
}
inline ::KVPairs* TrustFunctionCallResponse::mutable_kvs() {
  if (!has_kvs()) {
    clear_results();
    set_has_kvs();
    results_.kvs_ = CreateMaybeMessage< ::KVPairs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TrustFunctionCallResponse.kvs)
  return results_.kvs_;
}

inline bool TrustFunctionCallResponse::has_results() const {
  return results_case() != RESULTS_NOT_SET;
}
inline void TrustFunctionCallResponse::clear_has_results() {
  _oneof_case_[0] = RESULTS_NOT_SET;
}
inline TrustFunctionCallResponse::ResultsCase TrustFunctionCallResponse::results_case() const {
  return TrustFunctionCallResponse::ResultsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_tf_2eproto
