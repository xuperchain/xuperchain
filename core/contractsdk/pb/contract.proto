syntax = "proto3";
option optimize_for = LITE_RUNTIME;
option go_package = "github.com/xuperchain/xuperchain/core/contractsdk/go/pb";

package xchain.contract.sdk;

message PingRequest {
}

message PingResponse {
}

message NativeCallRequest {
  // The context id of this request
  int64  ctxid = 1;
}

message NativeCallResponse {
}

message ArgPair {
  string key = 1;
  bytes value = 2;
}

message CallArgs {
  string method = 1;
  repeated ArgPair args = 2;
  string initiator = 3;
  repeated string auth_require = 4;
  string transfer_amount = 5;
}

message SyscallHeader {
  int64 ctxid = 1;
}

message PutRequest {
  SyscallHeader header = 1;
  bytes key = 2;
  bytes value = 3;
}

message PutResponse {
}

message GetRequest {
  SyscallHeader header = 1;
  bytes key = 2;
}

message GetResponse {
  bytes value = 1;
}

message DeleteRequest {
  SyscallHeader header = 1;
  bytes key = 2;
}

message DeleteResponse {
}

message IteratorRequest {
  SyscallHeader header = 1;
  // start和limit为[start, limit)
  bytes start = 2;
  bytes limit = 3;
  // cap代表一次请求的最大IteratorItem个数，如果为0则采用xchain的默认配置
  int32 cap = 4;
}

message IteratorItem {
  bytes key = 1;
  bytes value = 2;
}

message IteratorResponse {
  repeated IteratorItem items = 1;
}

message QueryTxRequest {
  SyscallHeader header = 1;
  string txid = 2;
}

message QueryTxResponse {
  // defined in user code
  Transaction tx = 1;
}

message QueryBlockRequest {
  SyscallHeader header = 1;
  string blockid = 2;
}

message QueryBlockResponse {
  // defined in user code
  Block block = 1;
}

message TransferRequest {
  SyscallHeader header = 1;
  string from = 2;
  string to = 3;
  string amount = 4;
}

message TransferResponse {
}

message ContractCallRequest {
  SyscallHeader header = 1;
  string module = 2;
  string contract = 3;
  string method = 4;
  repeated ArgPair args = 5;
}

message ContractCallResponse {
  Response response = 1;
}

message Response {
  int32  status = 1;
  string message = 2;
  bytes  body = 3;
}

message SetOutputRequest {
	SyscallHeader header = 1;
	Response response = 2;
}
message SetOutputResponse {
}

message GetCallArgsRequest {
	SyscallHeader header = 1;
}

// Transaction input
message TxInput
{
    // The transaction id referenced to
    string ref_txid = 1;
    // The output offset of the transaction referenced to
    int32 ref_offset = 2;
    // The address of the launcher
    bytes from_addr = 5;
    // The amount of the transaction
    string amount = 6;
    // Frozen height
    int64 frozen_height = 7;
}

// Transaction output
message TxOutput
{
    // The amount of the transaction
    string amount = 1;
    // The address of the launcher
    bytes to_addr = 2;
    // Fronzen height
    int64 frozen_height = 4;
}

// Transaction is the information of the transaction
message Transaction
{
    // txid is the id of this transaction
    string txid = 1;
    // the blockid the transaction belong to
    string blockid = 2;
    // Transaction input list
    repeated TxInput tx_inputs = 3;
    // Transaction output list
    repeated TxOutput tx_outputs = 4;
    // Transaction description or system contract
    bytes desc = 6;

    // 权限系统新增字段
    // 交易发起者, 可以是一个Address或者一个Account
    string initiator = 26;
    // 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
    repeated string auth_require = 27;
}

// The block struct
message Block
{
    // blockid generate the hash sign of the block used by sha256
    string blockid = 3;
    // pre_hash is the parent blockid of the block
    string pre_hash = 4;
    // The miner id
    bytes proposer = 5;
    // The sign which miner signed: blockid + nonce + timestamp
    string sign = 6;
    // The pk of the miner
    bytes pubkey =  7;
    // The height of the blockchain
    int64 height = 9;
    // Transactions of the block, only txid stored on kv, the detail information stored in another table
    repeated string txids = 11; 
    // The transaction count of the block
    int32 tx_count = 12;
    //下面的属性会动态变化
    // If the block is on the trunk
    bool in_trunk = 14;
    // Next next block which on trunk
    string next_hash = 15;
}

message GetAccountAddressesRequest{
  SyscallHeader header = 1;
  string account = 2;
}

message GetAccountAddressesResponse {
  repeated string addresses = 1;
}