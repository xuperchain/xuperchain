// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: contract_service.proto

package pbrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	pb "github.com/xuperchain/xuperchain/core/contractsdk/go/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_contract_service_proto protoreflect.FileDescriptor

var file_contract_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x76, 0x63, 0x1a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb2, 0x01,
	0x0a, 0x0a, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e,
	0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xf4, 0x0a, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x4e,
	0x0a, 0x09, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x78, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x78, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x12, 0x23,
	0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x78, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x28, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x78, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x23, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x78, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x5a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25,
	0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x09, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x78, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5a, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x78, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x70, 0x62, 0x48, 0x03, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x62, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_contract_service_proto_goTypes = []interface{}{
	(*pb.NativeCallRequest)(nil),           // 0: xchain.contract.sdk.NativeCallRequest
	(*pb.PingRequest)(nil),                 // 1: xchain.contract.sdk.PingRequest
	(*pb.PutRequest)(nil),                  // 2: xchain.contract.sdk.PutRequest
	(*pb.GetRequest)(nil),                  // 3: xchain.contract.sdk.GetRequest
	(*pb.DeleteRequest)(nil),               // 4: xchain.contract.sdk.DeleteRequest
	(*pb.IteratorRequest)(nil),             // 5: xchain.contract.sdk.IteratorRequest
	(*pb.QueryTxRequest)(nil),              // 6: xchain.contract.sdk.QueryTxRequest
	(*pb.QueryBlockRequest)(nil),           // 7: xchain.contract.sdk.QueryBlockRequest
	(*pb.TransferRequest)(nil),             // 8: xchain.contract.sdk.TransferRequest
	(*pb.ContractCallRequest)(nil),         // 9: xchain.contract.sdk.ContractCallRequest
	(*pb.CrossContractQueryRequest)(nil),   // 10: xchain.contract.sdk.CrossContractQueryRequest
	(*pb.GetAccountAddressesRequest)(nil),  // 11: xchain.contract.sdk.GetAccountAddressesRequest
	(*pb.PostLogRequest)(nil),              // 12: xchain.contract.sdk.PostLogRequest
	(*pb.GetCallArgsRequest)(nil),          // 13: xchain.contract.sdk.GetCallArgsRequest
	(*pb.SetOutputRequest)(nil),            // 14: xchain.contract.sdk.SetOutputRequest
	(*pb.EmitEventRequest)(nil),            // 15: xchain.contract.sdk.EmitEventRequest
	(*pb.NativeCallResponse)(nil),          // 16: xchain.contract.sdk.NativeCallResponse
	(*pb.PingResponse)(nil),                // 17: xchain.contract.sdk.PingResponse
	(*pb.PutResponse)(nil),                 // 18: xchain.contract.sdk.PutResponse
	(*pb.GetResponse)(nil),                 // 19: xchain.contract.sdk.GetResponse
	(*pb.DeleteResponse)(nil),              // 20: xchain.contract.sdk.DeleteResponse
	(*pb.IteratorResponse)(nil),            // 21: xchain.contract.sdk.IteratorResponse
	(*pb.QueryTxResponse)(nil),             // 22: xchain.contract.sdk.QueryTxResponse
	(*pb.QueryBlockResponse)(nil),          // 23: xchain.contract.sdk.QueryBlockResponse
	(*pb.TransferResponse)(nil),            // 24: xchain.contract.sdk.TransferResponse
	(*pb.ContractCallResponse)(nil),        // 25: xchain.contract.sdk.ContractCallResponse
	(*pb.CrossContractQueryResponse)(nil),  // 26: xchain.contract.sdk.CrossContractQueryResponse
	(*pb.GetAccountAddressesResponse)(nil), // 27: xchain.contract.sdk.GetAccountAddressesResponse
	(*pb.PostLogResponse)(nil),             // 28: xchain.contract.sdk.PostLogResponse
	(*pb.CallArgs)(nil),                    // 29: xchain.contract.sdk.CallArgs
	(*pb.SetOutputResponse)(nil),           // 30: xchain.contract.sdk.SetOutputResponse
	(*pb.EmitEventResponse)(nil),           // 31: xchain.contract.sdk.EmitEventResponse
}
var file_contract_service_proto_depIdxs = []int32{
	0,  // 0: xchain.contract.svc.NativeCode.Call:input_type -> xchain.contract.sdk.NativeCallRequest
	1,  // 1: xchain.contract.svc.NativeCode.Ping:input_type -> xchain.contract.sdk.PingRequest
	2,  // 2: xchain.contract.svc.Syscall.PutObject:input_type -> xchain.contract.sdk.PutRequest
	3,  // 3: xchain.contract.svc.Syscall.GetObject:input_type -> xchain.contract.sdk.GetRequest
	4,  // 4: xchain.contract.svc.Syscall.DeleteObject:input_type -> xchain.contract.sdk.DeleteRequest
	5,  // 5: xchain.contract.svc.Syscall.NewIterator:input_type -> xchain.contract.sdk.IteratorRequest
	6,  // 6: xchain.contract.svc.Syscall.QueryTx:input_type -> xchain.contract.sdk.QueryTxRequest
	7,  // 7: xchain.contract.svc.Syscall.QueryBlock:input_type -> xchain.contract.sdk.QueryBlockRequest
	8,  // 8: xchain.contract.svc.Syscall.Transfer:input_type -> xchain.contract.sdk.TransferRequest
	9,  // 9: xchain.contract.svc.Syscall.ContractCall:input_type -> xchain.contract.sdk.ContractCallRequest
	10, // 10: xchain.contract.svc.Syscall.CrossContractQuery:input_type -> xchain.contract.sdk.CrossContractQueryRequest
	11, // 11: xchain.contract.svc.Syscall.GetAccountAddresses:input_type -> xchain.contract.sdk.GetAccountAddressesRequest
	1,  // 12: xchain.contract.svc.Syscall.Ping:input_type -> xchain.contract.sdk.PingRequest
	12, // 13: xchain.contract.svc.Syscall.PostLog:input_type -> xchain.contract.sdk.PostLogRequest
	13, // 14: xchain.contract.svc.Syscall.GetCallArgs:input_type -> xchain.contract.sdk.GetCallArgsRequest
	14, // 15: xchain.contract.svc.Syscall.SetOutput:input_type -> xchain.contract.sdk.SetOutputRequest
	15, // 16: xchain.contract.svc.Syscall.EmitEvent:input_type -> xchain.contract.sdk.EmitEventRequest
	16, // 17: xchain.contract.svc.NativeCode.Call:output_type -> xchain.contract.sdk.NativeCallResponse
	17, // 18: xchain.contract.svc.NativeCode.Ping:output_type -> xchain.contract.sdk.PingResponse
	18, // 19: xchain.contract.svc.Syscall.PutObject:output_type -> xchain.contract.sdk.PutResponse
	19, // 20: xchain.contract.svc.Syscall.GetObject:output_type -> xchain.contract.sdk.GetResponse
	20, // 21: xchain.contract.svc.Syscall.DeleteObject:output_type -> xchain.contract.sdk.DeleteResponse
	21, // 22: xchain.contract.svc.Syscall.NewIterator:output_type -> xchain.contract.sdk.IteratorResponse
	22, // 23: xchain.contract.svc.Syscall.QueryTx:output_type -> xchain.contract.sdk.QueryTxResponse
	23, // 24: xchain.contract.svc.Syscall.QueryBlock:output_type -> xchain.contract.sdk.QueryBlockResponse
	24, // 25: xchain.contract.svc.Syscall.Transfer:output_type -> xchain.contract.sdk.TransferResponse
	25, // 26: xchain.contract.svc.Syscall.ContractCall:output_type -> xchain.contract.sdk.ContractCallResponse
	26, // 27: xchain.contract.svc.Syscall.CrossContractQuery:output_type -> xchain.contract.sdk.CrossContractQueryResponse
	27, // 28: xchain.contract.svc.Syscall.GetAccountAddresses:output_type -> xchain.contract.sdk.GetAccountAddressesResponse
	17, // 29: xchain.contract.svc.Syscall.Ping:output_type -> xchain.contract.sdk.PingResponse
	28, // 30: xchain.contract.svc.Syscall.PostLog:output_type -> xchain.contract.sdk.PostLogResponse
	29, // 31: xchain.contract.svc.Syscall.GetCallArgs:output_type -> xchain.contract.sdk.CallArgs
	30, // 32: xchain.contract.svc.Syscall.SetOutput:output_type -> xchain.contract.sdk.SetOutputResponse
	31, // 33: xchain.contract.svc.Syscall.EmitEvent:output_type -> xchain.contract.sdk.EmitEventResponse
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_contract_service_proto_init() }
func file_contract_service_proto_init() {
	if File_contract_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contract_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_contract_service_proto_goTypes,
		DependencyIndexes: file_contract_service_proto_depIdxs,
	}.Build()
	File_contract_service_proto = out.File
	file_contract_service_proto_rawDesc = nil
	file_contract_service_proto_goTypes = nil
	file_contract_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NativeCodeClient is the client API for NativeCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NativeCodeClient interface {
	Call(ctx context.Context, in *pb.NativeCallRequest, opts ...grpc.CallOption) (*pb.NativeCallResponse, error)
	Ping(ctx context.Context, in *pb.PingRequest, opts ...grpc.CallOption) (*pb.PingResponse, error)
}

type nativeCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNativeCodeClient(cc grpc.ClientConnInterface) NativeCodeClient {
	return &nativeCodeClient{cc}
}

func (c *nativeCodeClient) Call(ctx context.Context, in *pb.NativeCallRequest, opts ...grpc.CallOption) (*pb.NativeCallResponse, error) {
	out := new(pb.NativeCallResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.NativeCode/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeCodeClient) Ping(ctx context.Context, in *pb.PingRequest, opts ...grpc.CallOption) (*pb.PingResponse, error) {
	out := new(pb.PingResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.NativeCode/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NativeCodeServer is the server API for NativeCode service.
type NativeCodeServer interface {
	Call(context.Context, *pb.NativeCallRequest) (*pb.NativeCallResponse, error)
	Ping(context.Context, *pb.PingRequest) (*pb.PingResponse, error)
}

// UnimplementedNativeCodeServer can be embedded to have forward compatible implementations.
type UnimplementedNativeCodeServer struct {
}

func (*UnimplementedNativeCodeServer) Call(context.Context, *pb.NativeCallRequest) (*pb.NativeCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedNativeCodeServer) Ping(context.Context, *pb.PingRequest) (*pb.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterNativeCodeServer(s *grpc.Server, srv NativeCodeServer) {
	s.RegisterService(&_NativeCode_serviceDesc, srv)
}

func _NativeCode_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.NativeCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeCodeServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.NativeCode/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeCodeServer).Call(ctx, req.(*pb.NativeCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeCode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeCodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.NativeCode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeCodeServer).Ping(ctx, req.(*pb.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NativeCode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xchain.contract.svc.NativeCode",
	HandlerType: (*NativeCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _NativeCode_Call_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NativeCode_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract_service.proto",
}

// SyscallClient is the client API for Syscall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyscallClient interface {
	// KV service
	PutObject(ctx context.Context, in *pb.PutRequest, opts ...grpc.CallOption) (*pb.PutResponse, error)
	GetObject(ctx context.Context, in *pb.GetRequest, opts ...grpc.CallOption) (*pb.GetResponse, error)
	DeleteObject(ctx context.Context, in *pb.DeleteRequest, opts ...grpc.CallOption) (*pb.DeleteResponse, error)
	NewIterator(ctx context.Context, in *pb.IteratorRequest, opts ...grpc.CallOption) (*pb.IteratorResponse, error)
	// Chain service
	QueryTx(ctx context.Context, in *pb.QueryTxRequest, opts ...grpc.CallOption) (*pb.QueryTxResponse, error)
	QueryBlock(ctx context.Context, in *pb.QueryBlockRequest, opts ...grpc.CallOption) (*pb.QueryBlockResponse, error)
	Transfer(ctx context.Context, in *pb.TransferRequest, opts ...grpc.CallOption) (*pb.TransferResponse, error)
	ContractCall(ctx context.Context, in *pb.ContractCallRequest, opts ...grpc.CallOption) (*pb.ContractCallResponse, error)
	CrossContractQuery(ctx context.Context, in *pb.CrossContractQueryRequest, opts ...grpc.CallOption) (*pb.CrossContractQueryResponse, error)
	GetAccountAddresses(ctx context.Context, in *pb.GetAccountAddressesRequest, opts ...grpc.CallOption) (*pb.GetAccountAddressesResponse, error)
	// Heartbeat
	Ping(ctx context.Context, in *pb.PingRequest, opts ...grpc.CallOption) (*pb.PingResponse, error)
	// Post log
	PostLog(ctx context.Context, in *pb.PostLogRequest, opts ...grpc.CallOption) (*pb.PostLogResponse, error)
	GetCallArgs(ctx context.Context, in *pb.GetCallArgsRequest, opts ...grpc.CallOption) (*pb.CallArgs, error)
	SetOutput(ctx context.Context, in *pb.SetOutputRequest, opts ...grpc.CallOption) (*pb.SetOutputResponse, error)
	// Send Event
	EmitEvent(ctx context.Context, in *pb.EmitEventRequest, opts ...grpc.CallOption) (*pb.EmitEventResponse, error)
}

type syscallClient struct {
	cc grpc.ClientConnInterface
}

func NewSyscallClient(cc grpc.ClientConnInterface) SyscallClient {
	return &syscallClient{cc}
}

func (c *syscallClient) PutObject(ctx context.Context, in *pb.PutRequest, opts ...grpc.CallOption) (*pb.PutResponse, error) {
	out := new(pb.PutResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetObject(ctx context.Context, in *pb.GetRequest, opts ...grpc.CallOption) (*pb.GetResponse, error) {
	out := new(pb.GetResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) DeleteObject(ctx context.Context, in *pb.DeleteRequest, opts ...grpc.CallOption) (*pb.DeleteResponse, error) {
	out := new(pb.DeleteResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) NewIterator(ctx context.Context, in *pb.IteratorRequest, opts ...grpc.CallOption) (*pb.IteratorResponse, error) {
	out := new(pb.IteratorResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/NewIterator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) QueryTx(ctx context.Context, in *pb.QueryTxRequest, opts ...grpc.CallOption) (*pb.QueryTxResponse, error) {
	out := new(pb.QueryTxResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/QueryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) QueryBlock(ctx context.Context, in *pb.QueryBlockRequest, opts ...grpc.CallOption) (*pb.QueryBlockResponse, error) {
	out := new(pb.QueryBlockResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/QueryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) Transfer(ctx context.Context, in *pb.TransferRequest, opts ...grpc.CallOption) (*pb.TransferResponse, error) {
	out := new(pb.TransferResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) ContractCall(ctx context.Context, in *pb.ContractCallRequest, opts ...grpc.CallOption) (*pb.ContractCallResponse, error) {
	out := new(pb.ContractCallResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/ContractCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) CrossContractQuery(ctx context.Context, in *pb.CrossContractQueryRequest, opts ...grpc.CallOption) (*pb.CrossContractQueryResponse, error) {
	out := new(pb.CrossContractQueryResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/CrossContractQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetAccountAddresses(ctx context.Context, in *pb.GetAccountAddressesRequest, opts ...grpc.CallOption) (*pb.GetAccountAddressesResponse, error) {
	out := new(pb.GetAccountAddressesResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/GetAccountAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) Ping(ctx context.Context, in *pb.PingRequest, opts ...grpc.CallOption) (*pb.PingResponse, error) {
	out := new(pb.PingResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) PostLog(ctx context.Context, in *pb.PostLogRequest, opts ...grpc.CallOption) (*pb.PostLogResponse, error) {
	out := new(pb.PostLogResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/PostLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetCallArgs(ctx context.Context, in *pb.GetCallArgsRequest, opts ...grpc.CallOption) (*pb.CallArgs, error) {
	out := new(pb.CallArgs)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/GetCallArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) SetOutput(ctx context.Context, in *pb.SetOutputRequest, opts ...grpc.CallOption) (*pb.SetOutputResponse, error) {
	out := new(pb.SetOutputResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/SetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) EmitEvent(ctx context.Context, in *pb.EmitEventRequest, opts ...grpc.CallOption) (*pb.EmitEventResponse, error) {
	out := new(pb.EmitEventResponse)
	err := c.cc.Invoke(ctx, "/xchain.contract.svc.Syscall/EmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyscallServer is the server API for Syscall service.
type SyscallServer interface {
	// KV service
	PutObject(context.Context, *pb.PutRequest) (*pb.PutResponse, error)
	GetObject(context.Context, *pb.GetRequest) (*pb.GetResponse, error)
	DeleteObject(context.Context, *pb.DeleteRequest) (*pb.DeleteResponse, error)
	NewIterator(context.Context, *pb.IteratorRequest) (*pb.IteratorResponse, error)
	// Chain service
	QueryTx(context.Context, *pb.QueryTxRequest) (*pb.QueryTxResponse, error)
	QueryBlock(context.Context, *pb.QueryBlockRequest) (*pb.QueryBlockResponse, error)
	Transfer(context.Context, *pb.TransferRequest) (*pb.TransferResponse, error)
	ContractCall(context.Context, *pb.ContractCallRequest) (*pb.ContractCallResponse, error)
	CrossContractQuery(context.Context, *pb.CrossContractQueryRequest) (*pb.CrossContractQueryResponse, error)
	GetAccountAddresses(context.Context, *pb.GetAccountAddressesRequest) (*pb.GetAccountAddressesResponse, error)
	// Heartbeat
	Ping(context.Context, *pb.PingRequest) (*pb.PingResponse, error)
	// Post log
	PostLog(context.Context, *pb.PostLogRequest) (*pb.PostLogResponse, error)
	GetCallArgs(context.Context, *pb.GetCallArgsRequest) (*pb.CallArgs, error)
	SetOutput(context.Context, *pb.SetOutputRequest) (*pb.SetOutputResponse, error)
	// Send Event
	EmitEvent(context.Context, *pb.EmitEventRequest) (*pb.EmitEventResponse, error)
}

// UnimplementedSyscallServer can be embedded to have forward compatible implementations.
type UnimplementedSyscallServer struct {
}

func (*UnimplementedSyscallServer) PutObject(context.Context, *pb.PutRequest) (*pb.PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (*UnimplementedSyscallServer) GetObject(context.Context, *pb.GetRequest) (*pb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedSyscallServer) DeleteObject(context.Context, *pb.DeleteRequest) (*pb.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (*UnimplementedSyscallServer) NewIterator(context.Context, *pb.IteratorRequest) (*pb.IteratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIterator not implemented")
}
func (*UnimplementedSyscallServer) QueryTx(context.Context, *pb.QueryTxRequest) (*pb.QueryTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (*UnimplementedSyscallServer) QueryBlock(context.Context, *pb.QueryBlockRequest) (*pb.QueryBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlock not implemented")
}
func (*UnimplementedSyscallServer) Transfer(context.Context, *pb.TransferRequest) (*pb.TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedSyscallServer) ContractCall(context.Context, *pb.ContractCallRequest) (*pb.ContractCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCall not implemented")
}
func (*UnimplementedSyscallServer) CrossContractQuery(context.Context, *pb.CrossContractQueryRequest) (*pb.CrossContractQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossContractQuery not implemented")
}
func (*UnimplementedSyscallServer) GetAccountAddresses(context.Context, *pb.GetAccountAddressesRequest) (*pb.GetAccountAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAddresses not implemented")
}
func (*UnimplementedSyscallServer) Ping(context.Context, *pb.PingRequest) (*pb.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSyscallServer) PostLog(context.Context, *pb.PostLogRequest) (*pb.PostLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLog not implemented")
}
func (*UnimplementedSyscallServer) GetCallArgs(context.Context, *pb.GetCallArgsRequest) (*pb.CallArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallArgs not implemented")
}
func (*UnimplementedSyscallServer) SetOutput(context.Context, *pb.SetOutputRequest) (*pb.SetOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutput not implemented")
}
func (*UnimplementedSyscallServer) EmitEvent(context.Context, *pb.EmitEventRequest) (*pb.EmitEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvent not implemented")
}

func RegisterSyscallServer(s *grpc.Server, srv SyscallServer) {
	s.RegisterService(&_Syscall_serviceDesc, srv)
}

func _Syscall_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).PutObject(ctx, req.(*pb.PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetObject(ctx, req.(*pb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).DeleteObject(ctx, req.(*pb.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_NewIterator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.IteratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).NewIterator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/NewIterator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).NewIterator(ctx, req.(*pb.IteratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.QueryTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).QueryTx(ctx, req.(*pb.QueryTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.QueryBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).QueryBlock(ctx, req.(*pb.QueryBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).Transfer(ctx, req.(*pb.TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_ContractCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).ContractCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/ContractCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).ContractCall(ctx, req.(*pb.ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_CrossContractQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CrossContractQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).CrossContractQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/CrossContractQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).CrossContractQuery(ctx, req.(*pb.CrossContractQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetAccountAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetAccountAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetAccountAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/GetAccountAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetAccountAddresses(ctx, req.(*pb.GetAccountAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).Ping(ctx, req.(*pb.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_PostLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PostLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).PostLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/PostLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).PostLog(ctx, req.(*pb.PostLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetCallArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetCallArgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetCallArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/GetCallArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetCallArgs(ctx, req.(*pb.GetCallArgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_SetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.SetOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).SetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/SetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).SetOutput(ctx, req.(*pb.SetOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_EmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.EmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).EmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xchain.contract.svc.Syscall/EmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).EmitEvent(ctx, req.(*pb.EmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Syscall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xchain.contract.svc.Syscall",
	HandlerType: (*SyscallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _Syscall_PutObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Syscall_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Syscall_DeleteObject_Handler,
		},
		{
			MethodName: "NewIterator",
			Handler:    _Syscall_NewIterator_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _Syscall_QueryTx_Handler,
		},
		{
			MethodName: "QueryBlock",
			Handler:    _Syscall_QueryBlock_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Syscall_Transfer_Handler,
		},
		{
			MethodName: "ContractCall",
			Handler:    _Syscall_ContractCall_Handler,
		},
		{
			MethodName: "CrossContractQuery",
			Handler:    _Syscall_CrossContractQuery_Handler,
		},
		{
			MethodName: "GetAccountAddresses",
			Handler:    _Syscall_GetAccountAddresses_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Syscall_Ping_Handler,
		},
		{
			MethodName: "PostLog",
			Handler:    _Syscall_PostLog_Handler,
		},
		{
			MethodName: "GetCallArgs",
			Handler:    _Syscall_GetCallArgs_Handler,
		},
		{
			MethodName: "SetOutput",
			Handler:    _Syscall_SetOutput_Handler,
		},
		{
			MethodName: "EmitEvent",
			Handler:    _Syscall_EmitEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract_service.proto",
}
